/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scoreScalesCreate } from "../funcs/scoreScalesCreate.js";
import { scoreScalesDelete } from "../funcs/scoreScalesDelete.js";
import { scoreScalesGet } from "../funcs/scoreScalesGet.js";
import { scoreScalesList } from "../funcs/scoreScalesList.js";
import { scoreScalesUpdate } from "../funcs/scoreScalesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ScoreScales extends ClientSDK {
  /**
   * Get all Score Scales
   *
   * @remarks
   * Get all of the ScoreScales on the service provider.
   */
  async list(
    request: operations.GetAllScoreScalesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllScoreScalesResponse, { offset: number }>
  > {
    return unwrapResultIterator(scoreScalesList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Score Scale
   *
   * @remarks
   * To create a new scoreScale. The responding system must return the set of sourcedIds that have been allocated to the newly created scoreScale records.
   */
  async create(
    request: operations.CreateScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateScoreScaleResponse> {
    return unwrapAsync(scoreScalesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Score Scale
   *
   * @remarks
   * Get a specific scoreScale on the service provider.
   */
  async get(
    request: operations.GetScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.GetScoreScaleResponse> {
    return unwrapAsync(scoreScalesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Score Scale
   *
   * @remarks
   * To update an existing scoreScale. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateScoreScaleResponse> {
    return unwrapAsync(scoreScalesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Score Scale
   *
   * @remarks
   * Perform a soft delete on a specific ScoreScale on the service provider. This operation changes the status of the ScoreScale to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scoreScalesDelete(
      this,
      request,
      options,
    ));
  }
}
