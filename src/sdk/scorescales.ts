/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { scoreScalesCreate } from "../funcs/scoreScalesCreate.js";
import { scoreScalesDelete } from "../funcs/scoreScalesDelete.js";
import { scoreScalesGet } from "../funcs/scoreScalesGet.js";
import { scoreScalesList } from "../funcs/scoreScalesList.js";
import { scoreScalesUpdate } from "../funcs/scoreScalesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class ScoreScales extends ClientSDK {
  /**
   * Get all score scales
   *
   * @remarks
   * Returns a collection of all score scales.
   */
  async list(
    options?: RequestOptions,
  ): Promise<operations.GetAllScoreScalesResponse> {
    return unwrapAsync(scoreScalesList(
      this,
      options,
    ));
  }

  /**
   * Create a new score scale
   *
   * @remarks
   * Creates a new score scale with the provided information.
   */
  async create(
    request: operations.CreateScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateScoreScaleResponse> {
    return unwrapAsync(scoreScalesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific score scale
   *
   * @remarks
   * Returns a specific score scale by sourcedId.
   */
  async get(
    request: operations.GetScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.GetScoreScaleResponse> {
    return unwrapAsync(scoreScalesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing score scale
   *
   * @remarks
   * Updates an existing score scale with the provided information.
   */
  async update(
    request: operations.UpdateScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateScoreScaleResponse> {
    return unwrapAsync(scoreScalesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a score scale
   *
   * @remarks
   * Deletes a score scale with the specified sourcedId.
   */
  async delete(
    request: operations.DeleteScoreScaleRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(scoreScalesDelete(
      this,
      request,
      options,
    ));
  }
}
