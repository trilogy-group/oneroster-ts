/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { categoriesCreate } from "../funcs/categoriesCreate.js";
import { categoriesDelete } from "../funcs/categoriesDelete.js";
import { categoriesGet } from "../funcs/categoriesGet.js";
import { categoriesGetAll } from "../funcs/categoriesGetAll.js";
import { categoriesUpdate } from "../funcs/categoriesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Categories extends ClientSDK {
  /**
   * The REST read request message for the getAllCategories() API call.
   *
   * @remarks
   * Get all of the lineItem categories on the service provider.
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllCategoriesResponse> {
    return unwrapAsync(categoriesGetAll(
      this,
      options,
    ));
  }

  /**
   * The REST create request message for the createCategory() API call.
   *
   * @remarks
   * To create a new Category. The responding system must return the set of sourcedIds that have been allocated to the newly created category record. A 'title' MUST be provided when creating a category.
   */
  async create(
    request: operations.CreateCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCategoryResponse> {
    return unwrapAsync(categoriesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST read request message for the getCategory() API call.
   *
   * @remarks
   * Get a specific category on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Category not found.'
   */
  async get(
    request: operations.GetCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCategoryResponse> {
    return unwrapAsync(categoriesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST update request message for the updateCategory() API call.
   *
   * @remarks
   * To update an existing Category. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateCategoryResponse> {
    return unwrapAsync(categoriesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST delete request message for the deleteCategory() API call.
   *
   * @remarks
   * Perform a soft delete on a specific Category on the service provider. This operation changes the status of the Category to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteCategoryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(categoriesDelete(
      this,
      request,
      options,
    ));
  }
}
