/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resultsCreate } from "../funcs/resultsCreate.js";
import { resultsCreateForLineItem } from "../funcs/resultsCreateForLineItem.js";
import { resultsDelete } from "../funcs/resultsDelete.js";
import { resultsGet } from "../funcs/resultsGet.js";
import { resultsGetAll } from "../funcs/resultsGetAll.js";
import { resultsUpdate } from "../funcs/resultsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Results extends ClientSDK {
  /**
   * Get all results
   *
   * @remarks
   * Returns a collection of all results.
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllResultsResponse> {
    return unwrapAsync(resultsGetAll(
      this,
      options,
    ));
  }

  /**
   * Create a new result
   *
   * @remarks
   * Creates a new result with the provided information.
   */
  async create(
    request: operations.CreateResultRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResultResponse> {
    return unwrapAsync(resultsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific result
   *
   * @remarks
   * Returns a specific result by sourcedId.
   */
  async get(
    request: operations.GetResultRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResultResponse> {
    return unwrapAsync(resultsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing result
   *
   * @remarks
   * Updates an existing result with the provided information.
   */
  async update(
    request: operations.UpdateResultRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateResultResponse> {
    return unwrapAsync(resultsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a result
   *
   * @remarks
   * Deletes a result with the specified sourcedId.
   */
  async delete(
    request: operations.DeleteResultRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resultsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new result for a line item
   *
   * @remarks
   * Creates a new result associated with the specified line item.
   */
  async createForLineItem(
    request: operations.CreateResultForLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResultForLineItemResponse> {
    return unwrapAsync(resultsCreateForLineItem(
      this,
      request,
      options,
    ));
  }
}
