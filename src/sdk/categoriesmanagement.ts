/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { categoriesManagementCreateCategory } from "../funcs/categoriesManagementCreateCategory.js";
import { categoriesManagementDeleteCategory } from "../funcs/categoriesManagementDeleteCategory.js";
import { categoriesManagementGetAllCategories } from "../funcs/categoriesManagementGetAllCategories.js";
import { categoriesManagementGetCategory } from "../funcs/categoriesManagementGetCategory.js";
import { categoriesManagementUpdateCategory } from "../funcs/categoriesManagementUpdateCategory.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CategoriesManagement extends ClientSDK {
  /**
   * Get all Categories
   *
   * @remarks
   * Get all of the Line Item Categories on the service provider.
   */
  async getAllCategories(
    request: operations.GetAllCategoriesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCategoriesResponse, { offset: number }>
  > {
    return unwrapResultIterator(categoriesManagementGetAllCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Category
   *
   * @remarks
   * To create a new Category. The responding system must return the set of sourcedIds that have been allocated to the newly created category record. A 'title' MUST be provided when creating a category.
   */
  async createCategory(
    request: operations.CreateCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateCategoryResponse> {
    return unwrapAsync(categoriesManagementCreateCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Category
   *
   * @remarks
   * Get a specific category on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Category not found.'
   */
  async getCategory(
    request: operations.GetCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCategoryResponse> {
    return unwrapAsync(categoriesManagementGetCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Category
   *
   * @remarks
   * To update an existing Category. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateCategory(
    request: operations.UpdateCategoryRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateCategoryResponse> {
    return unwrapAsync(categoriesManagementUpdateCategory(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Category
   *
   * @remarks
   * Perform a soft delete on a specific Category on the service provider. This operation changes the status of the Category to 'tobedeleted'.
   */
  async deleteCategory(
    request: operations.DeleteCategoryRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(categoriesManagementDeleteCategory(
      this,
      request,
      options,
    ));
  }
}
