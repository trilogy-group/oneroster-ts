/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assessmentLineItemsCreate } from "../funcs/assessmentLineItemsCreate.js";
import { assessmentLineItemsDelete } from "../funcs/assessmentLineItemsDelete.js";
import { assessmentLineItemsGet } from "../funcs/assessmentLineItemsGet.js";
import { assessmentLineItemsGetAll } from "../funcs/assessmentLineItemsGetAll.js";
import { assessmentLineItemsUpdate } from "../funcs/assessmentLineItemsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class AssessmentLineItems extends ClientSDK {
  /**
   * Get all Assessment Line Items
   *
   * @remarks
   * Get all of the Assessment Line Items on the service provider.
   */
  async getAll(
    request: operations.GetAllAssessmentLineItemsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetAllAssessmentLineItemsResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(assessmentLineItemsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Assessment Line Item
   *
   * @remarks
   * To create an Assessment Line Item. The responding system must return the set of sourcedIds that have been allocated to the newly created assessmentLineItem record. A 'title' MUST be provided when creating an assessmentLineItem.
   */
  async create(
    request: operations.CreateAssessmentLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAssessmentLineItemResponse> {
    return unwrapAsync(assessmentLineItemsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an Assessment Line Item
   *
   * @remarks
   * Get a specific Assessment Line Item on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Assessment line item not found.'
   */
  async get(
    request: operations.GetAssessmentLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAssessmentLineItemResponse> {
    return unwrapAsync(assessmentLineItemsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Assessment Line Item
   *
   * @remarks
   * To update an existing Assessment Line Item. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateAssessmentLineItemRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAssessmentLineItemResponse> {
    return unwrapAsync(assessmentLineItemsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Assessment Line Item
   *
   * @remarks
   * Perform a soft delete on a specific Assessment Line Item on the service provider. This operation changes the status of the Assessment Line Item to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteAssessmentLineItemRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(assessmentLineItemsDelete(
      this,
      request,
      options,
    ));
  }
}
