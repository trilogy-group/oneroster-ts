/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { schoolsCreate } from "../funcs/schoolsCreate.js";
import { schoolsDelete } from "../funcs/schoolsDelete.js";
import { schoolsGet } from "../funcs/schoolsGet.js";
import { schoolsGetAll } from "../funcs/schoolsGetAll.js";
import { schoolsGetClasses } from "../funcs/schoolsGetClasses.js";
import { schoolsGetEnrollments } from "../funcs/schoolsGetEnrollments.js";
import { schoolsGetStudents } from "../funcs/schoolsGetStudents.js";
import { schoolsGetTeachers } from "../funcs/schoolsGetTeachers.js";
import { schoolsGetTerms } from "../funcs/schoolsGetTerms.js";
import { schoolsUpdate } from "../funcs/schoolsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { SchoolsCourses } from "./schoolscourses.js";
import { SchoolsLineItems } from "./schoolslineitems.js";

export class Schools extends ClientSDK {
  private _lineItems?: SchoolsLineItems;
  get lineItems(): SchoolsLineItems {
    return (this._lineItems ??= new SchoolsLineItems(this._options));
  }

  private _courses?: SchoolsCourses;
  get courses(): SchoolsCourses {
    return (this._courses ??= new SchoolsCourses(this._options));
  }

  /**
   * Get all Schools
   *
   * @remarks
   * To get all Schools on the service provider.
   */
  async getAll(
    request: operations.GetAllSchoolsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllSchoolsResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new School
   *
   * @remarks
   * To create a new School. The responding system must return the set of sourcedIds that have been allocated to the newly created school record.
   */
  async create(
    request?: operations.CreateSchoolRequest | undefined,
    options?: RequestOptions,
  ): Promise<components.Org> {
    return unwrapAsync(schoolsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific School
   *
   * @remarks
   * Get a specific School on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'School not found.'
   */
  async get(
    request: operations.GetSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.GetSchoolResponse> {
    return unwrapAsync(schoolsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a School
   *
   * @remarks
   * To update an existing School. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateSchoolRequest,
    options?: RequestOptions,
  ): Promise<components.Org> {
    return unwrapAsync(schoolsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a School
   *
   * @remarks
   * Perform a soft delete on a specific School on the service provider. The operation changes the status of the School to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteSchoolRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(schoolsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Classes for a School
   *
   * @remarks
   * To get all Classes for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getClasses(
    request: operations.GetClassesForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetClasses(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Terms for a School
   *
   * @remarks
   * To get all Terms for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getTerms(
    request: operations.GetTermsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTermsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetTerms(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all teachers for a school
   *
   * @remarks
   * To get all Teachers for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getTeachers(
    request: operations.GetTeachersForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetTeachersForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetTeachers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Students for a School
   *
   * @remarks
   * To get all Students for a School on the service provider.
   */
  async getStudents(
    request: operations.GetStudentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetStudentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Enrollments for a School
   *
   * @remarks
   * To get all Enrollments for a School on the service provider. If the specified school cannot be identified within the service provider, the api will return a 404 error code and message 'School not found.'
   */
  async getEnrollments(
    request: operations.GetEnrollmentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetEnrollmentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(schoolsGetEnrollments(
      this,
      request,
      options,
    ));
  }
}
