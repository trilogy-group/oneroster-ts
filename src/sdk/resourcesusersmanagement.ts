/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourcesUsersManagementAssignResourceToUser } from "../funcs/resourcesUsersManagementAssignResourceToUser.js";
import { resourcesUsersManagementGetResourcesForUser } from "../funcs/resourcesUsersManagementGetResourcesForUser.js";
import { resourcesUsersManagementRemoveResourceFromUser } from "../funcs/resourcesUsersManagementRemoveResourceFromUser.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ResourcesUsersManagement extends ClientSDK {
  /**
   * Get resources for a user
   *
   * @remarks
   * To get the collection of resources available to a specific user. If the corresponding record cannot be located, the api will return a 404 error code and message 'User not found.'
   */
  async getResourcesForUser(
    request: operations.GetResourcesForUserRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetResourcesForUserResponse, { offset: number }>
  > {
    return unwrapResultIterator(resourcesUsersManagementGetResourcesForUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a resource to a user
   *
   * @remarks
   * To assign an existing resource to the specified user. If the corresponding record cannot be located, the api will return a 404 error code and message 'User or resource not found.'
   */
  async assignResourceToUser(
    request: operations.AssignResourceToUserRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(resourcesUsersManagementAssignResourceToUser(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a resource from a user
   *
   * @remarks
   * To unassign an existing resource from the specified user. If the corresponding record cannot be located, the api will return a 404 error code and message 'User or resource relationship not found.'
   */
  async removeResourceFromUser(
    request: operations.RemoveResourceFromUserRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(resourcesUsersManagementRemoveResourceFromUser(
      this,
      request,
      options,
    ));
  }
}
