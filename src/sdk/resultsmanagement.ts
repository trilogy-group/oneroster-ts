/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resultsManagementCreateResult } from "../funcs/resultsManagementCreateResult.js";
import { resultsManagementDeleteResult } from "../funcs/resultsManagementDeleteResult.js";
import { resultsManagementGetAllResults } from "../funcs/resultsManagementGetAllResults.js";
import { resultsManagementGetResult } from "../funcs/resultsManagementGetResult.js";
import { resultsManagementUpdateResult } from "../funcs/resultsManagementUpdateResult.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ResultsManagement extends ClientSDK {
  /**
   * Get all Results
   *
   * @remarks
   * Get all of the results on the service provider.
   */
  async getAllResults(
    request: operations.GetAllResultsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllResultsResponse, { offset: number }>
  > {
    return unwrapResultIterator(resultsManagementGetAllResults(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a Result
   *
   * @remarks
   * To create a new result. The request body must include a `result` object with the following required fields: `lineItem` (with sourcedId), `student` (with sourcedId), `scoreStatus`, and `scoreDate`. The responding system must return the set of sourcedIds that have been allocated to the newly created result records.
   */
  async createResult(
    request: operations.CreateResultRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResultResponse> {
    return unwrapAsync(resultsManagementCreateResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a Result
   *
   * @remarks
   * Get a specific result on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Result not found.'
   */
  async getResult(
    request: operations.GetResultRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResultResponse> {
    return unwrapAsync(resultsManagementGetResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Result
   *
   * @remarks
   * To update an existing result. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateResult(
    request: operations.UpdateResultRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateResultResponse> {
    return unwrapAsync(resultsManagementUpdateResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Result
   *
   * @remarks
   * Perform a soft delete on a specific Result on the service provider. This operation changes the status of the Result to 'tobedeleted'.
   */
  async deleteResult(
    request: operations.DeleteResultRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resultsManagementDeleteResult(
      this,
      request,
      options,
    ));
  }
}
