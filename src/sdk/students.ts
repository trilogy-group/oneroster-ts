/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { studentsGet } from "../funcs/studentsGet.js";
import { studentsGetAll } from "../funcs/studentsGetAll.js";
import { studentsGetForClass } from "../funcs/studentsGetForClass.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { StudentsClasses } from "./studentsclasses.js";

export class Students extends ClientSDK {
  private _classes?: StudentsClasses;
  get classes(): StudentsClasses {
    return (this._classes ??= new StudentsClasses(this._options));
  }

  /**
   * Get all students
   *
   * @remarks
   * Returns a collection of all students.
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllStudentsResponse> {
    return unwrapAsync(studentsGetAll(
      this,
      options,
    ));
  }

  /**
   * Get a specific student
   *
   * @remarks
   * Returns a specific student by sourcedId.
   */
  async get(
    request: operations.GetStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStudentResponse> {
    return unwrapAsync(studentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Get students for a specific class in a school
   *
   * @remarks
   * Returns a collection of students enrolled in a specific class within a school
   */
  async getForClass(
    request: operations.GetStudentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStudentsForClassInSchoolResponse> {
    return unwrapAsync(studentsGetForClass(
      this,
      request,
      options,
    ));
  }
}
