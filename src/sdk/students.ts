/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { studentsGet } from "../funcs/studentsGet.js";
import { studentsGetAll } from "../funcs/studentsGetAll.js";
import { studentsGetForClass } from "../funcs/studentsGetForClass.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";
import { StudentsClasses } from "./studentsclasses.js";

export class Students extends ClientSDK {
  private _classes?: StudentsClasses;
  get classes(): StudentsClasses {
    return (this._classes ??= new StudentsClasses(this._options));
  }

  /**
   * Get Students for a specific Class in a School
   *
   * @remarks
   * To get all Students for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getForClass(
    request: operations.GetStudentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetStudentsForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(studentsGetForClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Students
   *
   * @remarks
   * To get all Students on the service provider.
   */
  async getAll(
    request: operations.GetAllStudentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllStudentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(studentsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Student
   *
   * @remarks
   * To get a specific Student on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Student not found.'
   */
  async get(
    request: operations.GetStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStudentResponse> {
    return unwrapAsync(studentsGet(
      this,
      request,
      options,
    ));
  }
}
