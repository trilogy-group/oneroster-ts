/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { organizationsCreate } from "../funcs/organizationsCreate.js";
import { organizationsDelete } from "../funcs/organizationsDelete.js";
import { organizationsGet } from "../funcs/organizationsGet.js";
import { organizationsGetAll } from "../funcs/organizationsGetAll.js";
import { organizationsUpdate } from "../funcs/organizationsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Organizations extends ClientSDK {
  /**
   * Get all organizations
   *
   * @remarks
   * Returns a collection of all organizations
   */
  async getAll(
    request: operations.GetAllOrgsRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetAllOrgsResponse, { offset: number }>> {
    return unwrapResultIterator(organizationsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an organization
   *
   * @remarks
   * Creates a new organization
   */
  async create(
    request?: operations.CreateOrgRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateOrgResponse> {
    return unwrapAsync(organizationsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific organization
   *
   * @remarks
   * Returns a specific organization by sourcedId
   */
  async get(
    request: operations.GetOrgRequest,
    options?: RequestOptions,
  ): Promise<operations.GetOrgResponse> {
    return unwrapAsync(organizationsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an organization
   *
   * @remarks
   * Updates a specific organization by sourcedId
   */
  async update(
    request: operations.UpdateOrgRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(organizationsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an organization
   *
   * @remarks
   * Deletes a specific organization by sourcedId
   */
  async delete(
    request: operations.DeleteOrgRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(organizationsDelete(
      this,
      request,
      options,
    ));
  }
}
