/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourcesCreate } from "../funcs/resourcesCreate.js";
import { resourcesDelete } from "../funcs/resourcesDelete.js";
import { resourcesGet } from "../funcs/resourcesGet.js";
import { resourcesGetAll } from "../funcs/resourcesGetAll.js";
import { resourcesUpdate } from "../funcs/resourcesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ResourcesClasses } from "./resourcesclasses.js";

export class Resources extends ClientSDK {
  private _classes?: ResourcesClasses;
  get classes(): ResourcesClasses {
    return (this._classes ??= new ResourcesClasses(this._options));
  }

  /**
   * Get all resources
   *
   * @remarks
   * Returns a collection of all resources.
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllResourcesResponse> {
    return unwrapAsync(resourcesGetAll(
      this,
      options,
    ));
  }

  /**
   * Create a new resource
   *
   * @remarks
   * Creates a new resource with the provided information.
   */
  async create(
    request: operations.CreateResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateResourceResponse> {
    return unwrapAsync(resourcesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific resource
   *
   * @remarks
   * Returns a specific resource by sourcedId.
   */
  async get(
    request: operations.GetResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResourceResponse> {
    return unwrapAsync(resourcesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing resource
   *
   * @remarks
   * Updates an existing resource with the provided information.
   */
  async update(
    request: operations.UpdateResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(resourcesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a resource
   *
   * @remarks
   * Deletes a resource with the specified sourcedId.
   */
  async delete(
    request: operations.DeleteResourceRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(resourcesDelete(
      this,
      request,
      options,
    ));
  }
}
