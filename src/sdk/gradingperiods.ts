/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gradingPeriodsCreate } from "../funcs/gradingPeriodsCreate.js";
import { gradingPeriodsCreateForTerm } from "../funcs/gradingPeriodsCreateForTerm.js";
import { gradingPeriodsDelete } from "../funcs/gradingPeriodsDelete.js";
import { gradingPeriodsGet } from "../funcs/gradingPeriodsGet.js";
import { gradingPeriodsGetAll } from "../funcs/gradingPeriodsGetAll.js";
import { gradingPeriodsUpdate } from "../funcs/gradingPeriodsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class GradingPeriods extends ClientSDK {
  /**
   * Get all grading periods
   *
   * @remarks
   * Returns a collection of all grading periods
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllGradingPeriodsResponse> {
    return unwrapAsync(gradingPeriodsGetAll(
      this,
      options,
    ));
  }

  /**
   * Create a new grading period
   *
   * @remarks
   * Creates a new grading period
   */
  async create(
    request?: operations.CreateGradingPeriodRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateGradingPeriodResponse> {
    return unwrapAsync(gradingPeriodsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific grading period
   *
   * @remarks
   * Returns a specific grading period by sourcedId
   */
  async get(
    request: operations.GetGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGradingPeriodResponse> {
    return unwrapAsync(gradingPeriodsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a grading period
   *
   * @remarks
   * Updates an existing grading period by sourcedId
   */
  async update(
    request: operations.UpdateGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(gradingPeriodsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a grading period
   *
   * @remarks
   * Deletes a grading period by sourcedId
   */
  async delete(
    request: operations.DeleteGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(gradingPeriodsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new grading period for a term
   *
   * @remarks
   * Creates a new grading period associated with the specified term.
   */
  async createForTerm(
    request: operations.CreateGradingPeriodForTermRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateGradingPeriodForTermResponse> {
    return unwrapAsync(gradingPeriodsCreateForTerm(
      this,
      request,
      options,
    ));
  }
}
