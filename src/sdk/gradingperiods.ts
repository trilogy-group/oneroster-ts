/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { gradingPeriodsCreate } from "../funcs/gradingPeriodsCreate.js";
import { gradingPeriodsCreateForTerm } from "../funcs/gradingPeriodsCreateForTerm.js";
import { gradingPeriodsDelete } from "../funcs/gradingPeriodsDelete.js";
import { gradingPeriodsGet } from "../funcs/gradingPeriodsGet.js";
import { gradingPeriodsGetAll } from "../funcs/gradingPeriodsGetAll.js";
import { gradingPeriodsUpdate } from "../funcs/gradingPeriodsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class GradingPeriods extends ClientSDK {
  /**
   * Get all Grading Periods
   *
   * @remarks
   * To get all Grading Periods on the service provider.
   */
  async getAll(
    request: operations.GetAllGradingPeriodsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllGradingPeriodsResponse, { offset: number }>
  > {
    return unwrapResultIterator(gradingPeriodsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new Grading Period
   *
   * @remarks
   * To create a new Grading Period. The responding system must return the set of sourcedIds that have been allocated to the newly created gradingPeriod record.
   */
  async create(
    request?: operations.CreateGradingPeriodRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateGradingPeriodResponse> {
    return unwrapAsync(gradingPeriodsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Grading Period
   *
   * @remarks
   * Get a specific Grading Period on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Grading period not found.'
   */
  async get(
    request: operations.GetGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<operations.GetGradingPeriodResponse> {
    return unwrapAsync(gradingPeriodsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Grading Period
   *
   * @remarks
   * To update an existing Grading Period. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(gradingPeriodsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Grading Period
   *
   * @remarks
   * Perform a soft delete on a specific Grading Period on the service provider. The operation changes the status of the Grading Period to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteGradingPeriodRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(gradingPeriodsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new Grading Period for a Term
   *
   * @remarks
   * To create a new Grading Period for a Term. A Grading Period is a type of Academic Session. The responding system must return the set of sourcedIds that have been allocated to the newly created academicSession record.
   */
  async createForTerm(
    request: operations.CreateGradingPeriodForTermRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateGradingPeriodForTermResponse> {
    return unwrapAsync(gradingPeriodsCreateForTerm(
      this,
      request,
      options,
    ));
  }
}
