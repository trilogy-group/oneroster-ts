/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { usersAssignResource } from "../funcs/usersAssignResource.js";
import { usersCreate } from "../funcs/usersCreate.js";
import { usersDelete } from "../funcs/usersDelete.js";
import { usersGet } from "../funcs/usersGet.js";
import { usersGetAll } from "../funcs/usersGetAll.js";
import { usersGetClasses } from "../funcs/usersGetClasses.js";
import { usersGetResources } from "../funcs/usersGetResources.js";
import { usersUpdate } from "../funcs/usersUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Users extends ClientSDK {
  /**
   * Get resources for a user
   *
   * @remarks
   * Returns a collection of resources associated with the user.
   */
  async getResources(
    request: operations.GetResourcesForUserRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResourcesForUserResponse> {
    return unwrapAsync(usersGetResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a resource to a user
   *
   * @remarks
   * Assigns an existing resource to the specified user.
   */
  async assignResource(
    request: operations.AssignResourceToUserRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(usersAssignResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all users
   *
   * @remarks
   * Returns a collection of all users.
   */
  async getAll(
    request: operations.GetAllUsersRequest,
    options?: RequestOptions,
  ): Promise<PageIterator<operations.GetAllUsersResponse, { offset: number }>> {
    return unwrapResultIterator(usersGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a new user
   *
   * @remarks
   * Creates a new user with the provided information.
   */
  async create(
    request: operations.CreateUserRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateUserResponse> {
    return unwrapAsync(usersCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific user
   *
   * @remarks
   * Returns a specific user by sourcedId.
   */
  async get(
    request: operations.GetUserRequest,
    options?: RequestOptions,
  ): Promise<operations.GetUserResponse> {
    return unwrapAsync(usersGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an existing user
   *
   * @remarks
   * Updates an existing user with the provided information.
   */
  async update(
    request: operations.UpdateUserRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateUserResponse> {
    return unwrapAsync(usersUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a user
   *
   * @remarks
   * Deletes a user with the specified sourcedId.
   */
  async delete(
    request: operations.DeleteUserRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(usersDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get classes for a user
   *
   * @remarks
   * Returns a collection of classes associated with the user.
   */
  async getClasses(
    request: operations.GetClassesForUserRequest,
    options?: RequestOptions,
  ): Promise<operations.GetClassesForUserResponse> {
    return unwrapAsync(usersGetClasses(
      this,
      request,
      options,
    ));
  }
}
