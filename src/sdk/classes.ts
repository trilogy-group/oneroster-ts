/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { classesAddStudent } from "../funcs/classesAddStudent.js";
import { classesAddTeacher } from "../funcs/classesAddTeacher.js";
import { classesCreate } from "../funcs/classesCreate.js";
import { classesCreateLineItem } from "../funcs/classesCreateLineItem.js";
import { classesCreateResults } from "../funcs/classesCreateResults.js";
import { classesDelete } from "../funcs/classesDelete.js";
import { classesGet } from "../funcs/classesGet.js";
import { classesGetAll } from "../funcs/classesGetAll.js";
import { classesGetCategories } from "../funcs/classesGetCategories.js";
import { classesGetScoreScales } from "../funcs/classesGetScoreScales.js";
import { classesGetStudentResults } from "../funcs/classesGetStudentResults.js";
import { classesGetStudents } from "../funcs/classesGetStudents.js";
import { classesGetTeachers } from "../funcs/classesGetTeachers.js";
import { classesListLineItems } from "../funcs/classesListLineItems.js";
import { classesListResources } from "../funcs/classesListResources.js";
import { classesUpdate } from "../funcs/classesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { ClassesResults } from "./classesresults.js";

export class Classes extends ClientSDK {
  private _results?: ClassesResults;
  get results(): ClassesResults {
    return (this._results ??= new ClassesResults(this._options));
  }

  /**
   * Create results for an academic session in a class
   *
   * @remarks
   * Creates new results for a specific academic session within a class.
   */
  async createResults(
    request: operations.PostResultsForAcademicSessionForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.PostResultsForAcademicSessionForClassResponse> {
    return unwrapAsync(classesCreateResults(
      this,
      request,
      options,
    ));
  }

  /**
   * Get line items for a class
   *
   * @remarks
   * Returns a collection of line items associated with a specific class.
   */
  async listLineItems(
    request: operations.GetLineItemsForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.GetLineItemsForClassResponse> {
    return unwrapAsync(classesListLineItems(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a line item for a class
   *
   * @remarks
   * Creates a new line item associated with a specific class.
   */
  async createLineItem(
    request: operations.PostLineItemsForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.PostLineItemsForClassResponse> {
    return unwrapAsync(classesCreateLineItem(
      this,
      request,
      options,
    ));
  }

  /**
   * Get results for a specific student in a class
   *
   * @remarks
   * Returns a collection of results for a specific student within a class.
   */
  async getStudentResults(
    request: operations.GetResultsForStudentForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResultsForStudentForClassResponse> {
    return unwrapAsync(classesGetStudentResults(
      this,
      request,
      options,
    ));
  }

  /**
   * Get categories for a class
   *
   * @remarks
   * Returns a collection of categories associated with a specific class.
   */
  async getCategories(
    request: operations.GetCategoriesForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCategoriesForClassResponse> {
    return unwrapAsync(classesGetCategories(
      this,
      request,
      options,
    ));
  }

  /**
   * Get score scales for a class
   *
   * @remarks
   * Returns a collection of score scales associated with a specific class.
   */
  async getScoreScales(
    request: operations.GetScoreScalesForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.GetScoreScalesForClassResponse> {
    return unwrapAsync(classesGetScoreScales(
      this,
      request,
      options,
    ));
  }

  /**
   * Get resources for a class
   *
   * @remarks
   * Returns a collection of resources associated with the class.
   */
  async listResources(
    request: operations.GetResourcesForClassRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResourcesForClassResponse> {
    return unwrapAsync(classesListResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Get teachers for a specific class in a school
   *
   * @remarks
   * Returns a collection of teachers assigned to a specific class within a school
   */
  async getTeachers(
    request: operations.GetTeachersForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.GetTeachersForClassInSchoolResponse> {
    return unwrapAsync(classesGetTeachers(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all classes
   *
   * @remarks
   * Returns a collection of classes
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<Array<components.Class>> {
    return unwrapAsync(classesGetAll(
      this,
      options,
    ));
  }

  /**
   * Create a new class
   *
   * @remarks
   * Creates a new class with the provided data
   */
  async create(
    request?: operations.CreateClassRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateClassResponse> {
    return unwrapAsync(classesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get students for a class
   *
   * @remarks
   * Returns a collection of students enrolled in a specific class
   */
  async getStudents(
    request: operations.GetStudentsForClassRequest,
    options?: RequestOptions,
  ): Promise<Array<components.Class>> {
    return unwrapAsync(classesGetStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a student to a class
   *
   * @remarks
   * Enrolls a student in a specific class
   */
  async addStudent(
    request: operations.AddStudentToClassRequest,
    options?: RequestOptions,
  ): Promise<operations.AddStudentToClassResponse> {
    return unwrapAsync(classesAddStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a teacher to a class
   *
   * @remarks
   * Assigns a teacher to a specific class
   */
  async addTeacher(
    request: operations.AddTeacherToClassRequest,
    options?: RequestOptions,
  ): Promise<operations.AddTeacherToClassResponse> {
    return unwrapAsync(classesAddTeacher(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific class
   *
   * @remarks
   * Returns a specific class by sourcedId
   */
  async get(
    request: operations.GetClassRequest,
    options?: RequestOptions,
  ): Promise<components.Class> {
    return unwrapAsync(classesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a class
   *
   * @remarks
   * Updates an existing class with the provided data
   */
  async update(
    request: operations.UpdateClassRequest,
    options?: RequestOptions,
  ): Promise<components.Class> {
    return unwrapAsync(classesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a class
   *
   * @remarks
   * Deletes an existing class
   */
  async delete(
    request: operations.DeleteClassRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(classesDelete(
      this,
      request,
      options,
    ));
  }
}
