/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { academicSessionsCreate } from "../funcs/academicSessionsCreate.js";
import { academicSessionsDelete } from "../funcs/academicSessionsDelete.js";
import { academicSessionsGet } from "../funcs/academicSessionsGet.js";
import { academicSessionsGetAll } from "../funcs/academicSessionsGetAll.js";
import { academicSessionsUpdate } from "../funcs/academicSessionsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class AcademicSessions extends ClientSDK {
  /**
   * Get all Academic Sessions
   *
   * @remarks
   * To get all Academic Sessions on the service provider.
   */
  async getAll(
    request: operations.GetAllAcademicSessionsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllAcademicSessionsResponse, { offset: number }>
  > {
    return unwrapResultIterator(academicSessionsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Academic Session
   *
   * @remarks
   * To create a new academic session. The responding system must return the set of sourcedIds that have been allocated to the newly created academicSession record.
   */
  async create(
    request?: operations.PostAcademicSessionRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.PostAcademicSessionResponse> {
    return unwrapAsync(academicSessionsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Academic Session
   *
   * @remarks
   * Get a specific Academic Session on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Academic session not found.'
   */
  async get(
    request: operations.GetAcademicSessionRequest,
    options?: RequestOptions,
  ): Promise<components.AcademicSession> {
    return unwrapAsync(academicSessionsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Academic Session
   *
   * @remarks
   * To update an existing Academic Session. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.PutAcademicSessionRequest,
    options?: RequestOptions,
  ): Promise<components.AcademicSession> {
    return unwrapAsync(academicSessionsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Academic Session
   *
   * @remarks
   * Perform a soft delete on a specific Academic Session on the service provider. This operation changes the status of the Academic Session to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteAcademicSessionRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(academicSessionsDelete(
      this,
      request,
      options,
    ));
  }
}
