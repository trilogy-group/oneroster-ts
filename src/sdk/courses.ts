/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { coursesAssignResource } from "../funcs/coursesAssignResource.js";
import { coursesCreate } from "../funcs/coursesCreate.js";
import { coursesCreateComponent } from "../funcs/coursesCreateComponent.js";
import { coursesCreateComponentResource } from "../funcs/coursesCreateComponentResource.js";
import { coursesDelete } from "../funcs/coursesDelete.js";
import { coursesDeleteComponentResource } from "../funcs/coursesDeleteComponentResource.js";
import { coursesGet } from "../funcs/coursesGet.js";
import { coursesGetAll } from "../funcs/coursesGetAll.js";
import { coursesGetComponent } from "../funcs/coursesGetComponent.js";
import { coursesGetComponentResource } from "../funcs/coursesGetComponentResource.js";
import { coursesGetResources } from "../funcs/coursesGetResources.js";
import { coursesUpdate } from "../funcs/coursesUpdate.js";
import { coursesUpdateComponent } from "../funcs/coursesUpdateComponent.js";
import { coursesUpdateComponentResource } from "../funcs/coursesUpdateComponentResource.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class Courses extends ClientSDK {
  /**
   * Get resources for a course
   *
   * @remarks
   * Returns a collection of resources associated with the course.
   */
  async getResources(
    request: operations.GetResourcesForCourseRequest,
    options?: RequestOptions,
  ): Promise<operations.GetResourcesForCourseResponse> {
    return unwrapAsync(coursesGetResources(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a resource to a course
   *
   * @remarks
   * Assigns an existing resource to the specified course.
   */
  async assignResource(
    request: operations.AssignResourceToCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesAssignResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get All Courses
   *
   * @remarks
   * Returns a collection of all courses
   */
  async getAll(
    request: operations.GetAllCoursesRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCoursesResponse, { offset: number }>
  > {
    return unwrapResultIterator(coursesGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Course
   *
   * @remarks
   * Used when creating a new course
   */
  async create(
    request?: operations.CreateCourseRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCourseResponse> {
    return unwrapAsync(coursesCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Course
   *
   * @remarks
   * Returns a specific course by sourcedId
   */
  async get(
    request: operations.GetCourseRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCourseResponse> {
    return unwrapAsync(coursesGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Course
   *
   * @remarks
   * Updates an existing course
   */
  async update(
    request: operations.PutCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Course
   *
   * @remarks
   * Deletes a specific course by sourcedId
   */
  async delete(
    request: operations.DeleteCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Component Resource
   *
   * @remarks
   * Used when creating a new component resource
   */
  async createComponentResource(
    request?: operations.CreateComponentResourceRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateComponentResourceResponse> {
    return unwrapAsync(coursesCreateComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Component Resource
   *
   * @remarks
   * Returns a specific component resource by sourcedId
   */
  async getComponentResource(
    request: operations.GetComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<operations.GetComponentResourceResponse> {
    return unwrapAsync(coursesGetComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Component Resource
   *
   * @remarks
   * Updates an existing component resource
   */
  async updateComponentResource(
    request: operations.PutComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesUpdateComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete Component Resource
   *
   * @remarks
   * Deletes a specific component resource by sourcedId
   */
  async deleteComponentResource(
    request: operations.DeleteComponentResourceRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesDeleteComponentResource(
      this,
      request,
      options,
    ));
  }

  /**
   * Create Course Component
   *
   * @remarks
   * Used when creating a new course component or module
   */
  async createComponent(
    request?: operations.CreateCourseComponentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCourseComponentResponse> {
    return unwrapAsync(coursesCreateComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Course Component
   *
   * @remarks
   * Returns a specific course component by sourcedId
   */
  async getComponent(
    request: operations.GetCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCourseComponentResponse> {
    return unwrapAsync(coursesGetComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update Course Component
   *
   * @remarks
   * Updates an existing course component
   */
  async updateComponent(
    request: operations.PutCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(coursesUpdateComponent(
      this,
      request,
      options,
    ));
  }
}
