/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { resourcesCoursesManagementAssignResourceToCourse } from "../funcs/resourcesCoursesManagementAssignResourceToCourse.js";
import { resourcesCoursesManagementGetResourcesForCourse } from "../funcs/resourcesCoursesManagementGetResourcesForCourse.js";
import { resourcesCoursesManagementRemoveResourceFromCourse } from "../funcs/resourcesCoursesManagementRemoveResourceFromCourse.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class ResourcesCoursesManagement extends ClientSDK {
  /**
   * Get resources for a course
   *
   * @remarks
   * To get the collection of resources assigned to a specific course. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course not found.'
   */
  async getResourcesForCourse(
    request: operations.GetResourcesForCourseRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetResourcesForCourseResponse, { offset: number }>
  > {
    return unwrapResultIterator(resourcesCoursesManagementGetResourcesForCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Assign a resource to a course
   *
   * @remarks
   * To assign an existing resource to the specified course. The course sourcedId is supplied by the requesting system. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course or resource not found.'
   */
  async assignResourceToCourse(
    request: operations.AssignResourceToCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(resourcesCoursesManagementAssignResourceToCourse(
      this,
      request,
      options,
    ));
  }

  /**
   * Remove a resource from a course
   *
   * @remarks
   * To unassign an existing resource from the specified course. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course or resource relationship not found.'
   */
  async removeResourceFromCourse(
    request: operations.RemoveResourceFromCourseRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(resourcesCoursesManagementRemoveResourceFromCourse(
      this,
      request,
      options,
    ));
  }
}
