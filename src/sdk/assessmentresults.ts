/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assessmentResultsCreate } from "../funcs/assessmentResultsCreate.js";
import { assessmentResultsDelete } from "../funcs/assessmentResultsDelete.js";
import { assessmentResultsGet } from "../funcs/assessmentResultsGet.js";
import { assessmentResultsGetAll } from "../funcs/assessmentResultsGetAll.js";
import { assessmentResultsUpdate } from "../funcs/assessmentResultsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class AssessmentResults extends ClientSDK {
  /**
   * The REST read request message for the getAllAssessmentResults() API call.
   *
   * @remarks
   * Get all of the Assessment Results on the service provider.
   */
  async getAll(
    request: operations.GetAllAssessmentResultsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllAssessmentResultsResponse, { offset: number }>
  > {
    return unwrapResultIterator(assessmentResultsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST create request message for the createAssessmentResult() API call.
   *
   * @remarks
   * To create an Assessment Result. The responding system must return the set of sourcedIds that have been allocated to the newly created assessmentResult record. An Assessment Line Item sourcedId and Student sourcedId MUST be provided when creating an assessmentResult.
   */
  async create(
    request: operations.CreateAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST read request message for the getAssessmentResult() API call.
   *
   * @remarks
   * Get a specific Assessment Result on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Assessment result not found.'
   */
  async get(
    request: operations.GetAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST update request message for the updateAssessmentResult() API call.
   *
   * @remarks
   * To update an existing Assessment Result. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async update(
    request: operations.UpdateAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * The REST delete request message for the deleteAssessmentResult() API call.
   *
   * @remarks
   * Perform a soft delete on a specific Assessment Result on the service provider. This operation changes the status of the Assessment Result to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(assessmentResultsDelete(
      this,
      request,
      options,
    ));
  }
}
