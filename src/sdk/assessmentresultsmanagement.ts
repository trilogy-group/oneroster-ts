/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { assessmentResultsManagementCreateAssessmentResult } from "../funcs/assessmentResultsManagementCreateAssessmentResult.js";
import { assessmentResultsManagementDeleteAssessmentResult } from "../funcs/assessmentResultsManagementDeleteAssessmentResult.js";
import { assessmentResultsManagementGetAllAssessmentResults } from "../funcs/assessmentResultsManagementGetAllAssessmentResults.js";
import { assessmentResultsManagementGetAssessmentResult } from "../funcs/assessmentResultsManagementGetAssessmentResult.js";
import { assessmentResultsManagementUpdateAssessmentResult } from "../funcs/assessmentResultsManagementUpdateAssessmentResult.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class AssessmentResultsManagement extends ClientSDK {
  /**
   * Get all Assessment Results
   *
   * @remarks
   * Get all of the Assessment Results on the service provider.
   */
  async getAllAssessmentResults(
    request: operations.GetAllAssessmentResultsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllAssessmentResultsResponse, { offset: number }>
  > {
    return unwrapResultIterator(
      assessmentResultsManagementGetAllAssessmentResults(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Create an Assessment Result
   *
   * @remarks
   * To create an Assessment Result. The responding system must return the set of sourcedIds that have been allocated to the newly created assessmentResult record. An Assessment Line Item sourcedId and Student sourcedId MUST be provided when creating an assessmentResult.
   */
  async createAssessmentResult(
    request: operations.CreateAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.CreateAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsManagementCreateAssessmentResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Get an Assessment Result
   *
   * @remarks
   * Get a specific Assessment Result on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Assessment result not found.'
   */
  async getAssessmentResult(
    request: operations.GetAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.GetAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsManagementGetAssessmentResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an Assessment Result
   *
   * @remarks
   * To update an existing Assessment Result. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async updateAssessmentResult(
    request: operations.UpdateAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<operations.UpdateAssessmentResultResponse> {
    return unwrapAsync(assessmentResultsManagementUpdateAssessmentResult(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an Assessment Result
   *
   * @remarks
   * Perform a soft delete on a specific Assessment Result on the service provider. This operation changes the status of the Assessment Result to 'tobedeleted'.
   */
  async deleteAssessmentResult(
    request: operations.DeleteAssessmentResultRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(assessmentResultsManagementDeleteAssessmentResult(
      this,
      request,
      options,
    ));
  }
}
