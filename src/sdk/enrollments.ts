/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { enrollmentsCreate } from "../funcs/enrollmentsCreate.js";
import { enrollmentsDelete } from "../funcs/enrollmentsDelete.js";
import { enrollmentsGet } from "../funcs/enrollmentsGet.js";
import { enrollmentsGetAll } from "../funcs/enrollmentsGetAll.js";
import { enrollmentsGetForClass } from "../funcs/enrollmentsGetForClass.js";
import { enrollmentsUpdate } from "../funcs/enrollmentsUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Enrollments extends ClientSDK {
  /**
   * Get all enrollments
   *
   * @remarks
   * Returns a collection of all enrollment records
   */
  async getAll(
    options?: RequestOptions,
  ): Promise<operations.GetAllEnrollmentsResponse> {
    return unwrapAsync(enrollmentsGetAll(
      this,
      options,
    ));
  }

  /**
   * Create a new enrollment
   *
   * @remarks
   * Creates a new enrollment with the provided data
   */
  async create(
    request?: operations.CreateEnrollmentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateEnrollmentResponse> {
    return unwrapAsync(enrollmentsCreate(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific enrollment
   *
   * @remarks
   * Returns the enrollment record matching the sourcedId
   */
  async get(
    request: operations.GetEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetEnrollmentResponse> {
    return unwrapAsync(enrollmentsGet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update an enrollment
   *
   * @remarks
   * Updates an existing enrollment with the provided data
   */
  async update(
    request: operations.UpdateEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(enrollmentsUpdate(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete an enrollment
   *
   * @remarks
   * Deletes the enrollment with the specified sourcedId
   */
  async delete(
    request: operations.DeleteEnrollmentRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(enrollmentsDelete(
      this,
      request,
      options,
    ));
  }

  /**
   * Get enrollments for a specific class in a school
   *
   * @remarks
   * Returns a collection of enrollments for a specific class within a school
   */
  async getForClass(
    request: operations.GetEnrollmentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<operations.GetEnrollmentsForClassInSchoolResponse> {
    return unwrapAsync(enrollmentsGetForClass(
      this,
      request,
      options,
    ));
  }
}
