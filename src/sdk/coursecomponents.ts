/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { courseComponentsDelete } from "../funcs/courseComponentsDelete.js";
import { courseComponentsGetAll } from "../funcs/courseComponentsGetAll.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CourseComponents extends ClientSDK {
  /**
   * Get all Course Components
   *
   * @remarks
   * To get all Course Components on the service provider.
   */
  async getAll(
    request: operations.GetAllCourseComponentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCourseComponentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(courseComponentsGetAll(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Course Component
   *
   * @remarks
   * Perform a soft delete on a specific Course Component on the service provider. The operation changes the status of the Course Component to 'tobedeleted'.
   */
  async delete(
    request: operations.DeleteCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(courseComponentsDelete(
      this,
      request,
      options,
    ));
  }
}
