/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { courseComponentsManagementCreateCourseComponent } from "../funcs/courseComponentsManagementCreateCourseComponent.js";
import { courseComponentsManagementDeleteCourseComponent } from "../funcs/courseComponentsManagementDeleteCourseComponent.js";
import { courseComponentsManagementGetAllCourseComponents } from "../funcs/courseComponentsManagementGetAllCourseComponents.js";
import { courseComponentsManagementGetCourseComponent } from "../funcs/courseComponentsManagementGetCourseComponent.js";
import { courseComponentsManagementPutCourseComponent } from "../funcs/courseComponentsManagementPutCourseComponent.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class CourseComponentsManagement extends ClientSDK {
  /**
   * Create Course Component
   *
   * @remarks
   * Used when creating a new course component or module
   */
  async createCourseComponent(
    request?: operations.CreateCourseComponentRequest | undefined,
    options?: RequestOptions,
  ): Promise<operations.CreateCourseComponentResponse> {
    return unwrapAsync(courseComponentsManagementCreateCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Course Components
   *
   * @remarks
   * To get all Course Components on the service provider.
   */
  async getAllCourseComponents(
    request: operations.GetAllCourseComponentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllCourseComponentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(
      courseComponentsManagementGetAllCourseComponents(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Get a specific Course Component
   *
   * @remarks
   * Get a specific Course Component on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Course Component not found.'
   */
  async getCourseComponent(
    request: operations.GetCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetCourseComponentResponse> {
    return unwrapAsync(courseComponentsManagementGetCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a Course Component
   *
   * @remarks
   * To update an existing Course Component. The sourcedId for the record to be updated is supplied by the requesting system.
   */
  async putCourseComponent(
    request: operations.PutCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(courseComponentsManagementPutCourseComponent(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a Course Component
   *
   * @remarks
   * Perform a soft delete on a specific Course Component on the service provider. The operation changes the status of the Course Component to 'tobedeleted'.
   */
  async deleteCourseComponent(
    request: operations.DeleteCourseComponentRequest,
    options?: RequestOptions,
  ): Promise<{ [k: string]: any }> {
    return unwrapAsync(courseComponentsManagementDeleteCourseComponent(
      this,
      request,
      options,
    ));
  }
}
