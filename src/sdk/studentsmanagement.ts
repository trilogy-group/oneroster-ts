/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { studentsManagementAddStudentToClass } from "../funcs/studentsManagementAddStudentToClass.js";
import { studentsManagementGetAllStudents } from "../funcs/studentsManagementGetAllStudents.js";
import { studentsManagementGetClassesForStudent } from "../funcs/studentsManagementGetClassesForStudent.js";
import { studentsManagementGetStudent } from "../funcs/studentsManagementGetStudent.js";
import { studentsManagementGetStudentsForClass } from "../funcs/studentsManagementGetStudentsForClass.js";
import { studentsManagementGetStudentsForClassInSchool } from "../funcs/studentsManagementGetStudentsForClassInSchool.js";
import { studentsManagementGetStudentsForSchool } from "../funcs/studentsManagementGetStudentsForSchool.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { PageIterator, unwrapResultIterator } from "../types/operations.js";

export class StudentsManagement extends ClientSDK {
  /**
   * Get students for a Class
   *
   * @remarks
   * To get all students enrolled in a specific Class. If the corresponding record cannot be located, the api will return a 404 error code and message 'Class not found.'
   */
  async getStudentsForClass(
    request: operations.GetStudentsForClassRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetStudentsForClassResponse, { offset: number }>
  > {
    return unwrapResultIterator(studentsManagementGetStudentsForClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Add a student to a Class
   *
   * @remarks
   * Enrolls a student in a specific Class. The responding system must return the set of sourcedIds that have been allocated to the newly created enrollment record.
   */
  async addStudentToClass(
    request: operations.AddStudentToClassRequest,
    options?: RequestOptions,
  ): Promise<operations.AddStudentToClassResponse> {
    return unwrapAsync(studentsManagementAddStudentToClass(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Students for a specific Class in a School
   *
   * @remarks
   * To get all Students for a Class in a School on the service provider. If the specified school and/or class cannot be identified within the service provider, the api will return a 404 error code and message 'School or class not found.'
   */
  async getStudentsForClassInSchool(
    request: operations.GetStudentsForClassInSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<
      operations.GetStudentsForClassInSchoolResponse,
      { offset: number }
    >
  > {
    return unwrapResultIterator(studentsManagementGetStudentsForClassInSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Students for a School
   *
   * @remarks
   * To get all Students for a School on the service provider.
   */
  async getStudentsForSchool(
    request: operations.GetStudentsForSchoolRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetStudentsForSchoolResponse, { offset: number }>
  > {
    return unwrapResultIterator(studentsManagementGetStudentsForSchool(
      this,
      request,
      options,
    ));
  }

  /**
   * Get all Students
   *
   * @remarks
   * To get all Students on the service provider.
   */
  async getAllStudents(
    request: operations.GetAllStudentsRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetAllStudentsResponse, { offset: number }>
  > {
    return unwrapResultIterator(studentsManagementGetAllStudents(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a specific Student
   *
   * @remarks
   * To get a specific Student on the service provider. If the corresponding record cannot be located, the api will return a 404 error code and message 'Student not found.'
   */
  async getStudent(
    request: operations.GetStudentRequest,
    options?: RequestOptions,
  ): Promise<operations.GetStudentResponse> {
    return unwrapAsync(studentsManagementGetStudent(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Classes for a Student
   *
   * @remarks
   * To get the set of Classes related to a specific Student. If the specified student cannot be identified within the service provider, the api will return a 404 error code and message 'Student not found.'
   */
  async getClassesForStudent(
    request: operations.GetClassesForStudentRequest,
    options?: RequestOptions,
  ): Promise<
    PageIterator<operations.GetClassesForStudentResponse, { offset: number }>
  > {
    return unwrapResultIterator(studentsManagementGetClassesForStudent(
      this,
      request,
      options,
    ));
  }
}
