/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type PostResultsForAcademicSessionForClassRequestBody = {
  results: Array<components.Result>;
};

export type PostResultsForAcademicSessionForClassRequest = {
  /**
   * The sourcedId of the class
   */
  classSourcedId: string;
  /**
   * The sourcedId of the academic session
   */
  academicSessionSourcedId: string;
  requestBody: PostResultsForAcademicSessionForClassRequestBody;
};

export type PostResultsForAcademicSessionForClassSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Results successfully created
 */
export type PostResultsForAcademicSessionForClassResponse = {
  sourcedIdPairs: PostResultsForAcademicSessionForClassSourcedIdPairs;
};

/** @internal */
export const PostResultsForAcademicSessionForClassRequestBody$inboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassRequestBody,
    z.ZodTypeDef,
    unknown
  > = z.object({
    results: z.array(components.Result$inboundSchema),
  });

/** @internal */
export type PostResultsForAcademicSessionForClassRequestBody$Outbound = {
  results: Array<components.Result$Outbound>;
};

/** @internal */
export const PostResultsForAcademicSessionForClassRequestBody$outboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassRequestBody$Outbound,
    z.ZodTypeDef,
    PostResultsForAcademicSessionForClassRequestBody
  > = z.object({
    results: z.array(components.Result$outboundSchema),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostResultsForAcademicSessionForClassRequestBody$ {
  /** @deprecated use `PostResultsForAcademicSessionForClassRequestBody$inboundSchema` instead. */
  export const inboundSchema =
    PostResultsForAcademicSessionForClassRequestBody$inboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    PostResultsForAcademicSessionForClassRequestBody$outboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassRequestBody$Outbound` instead. */
  export type Outbound =
    PostResultsForAcademicSessionForClassRequestBody$Outbound;
}

export function postResultsForAcademicSessionForClassRequestBodyToJSON(
  postResultsForAcademicSessionForClassRequestBody:
    PostResultsForAcademicSessionForClassRequestBody,
): string {
  return JSON.stringify(
    PostResultsForAcademicSessionForClassRequestBody$outboundSchema.parse(
      postResultsForAcademicSessionForClassRequestBody,
    ),
  );
}

export function postResultsForAcademicSessionForClassRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  PostResultsForAcademicSessionForClassRequestBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostResultsForAcademicSessionForClassRequestBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostResultsForAcademicSessionForClassRequestBody' from JSON`,
  );
}

/** @internal */
export const PostResultsForAcademicSessionForClassRequest$inboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    classSourcedId: z.string(),
    academicSessionSourcedId: z.string(),
    RequestBody: z.lazy(() =>
      PostResultsForAcademicSessionForClassRequestBody$inboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      "RequestBody": "requestBody",
    });
  });

/** @internal */
export type PostResultsForAcademicSessionForClassRequest$Outbound = {
  classSourcedId: string;
  academicSessionSourcedId: string;
  RequestBody: PostResultsForAcademicSessionForClassRequestBody$Outbound;
};

/** @internal */
export const PostResultsForAcademicSessionForClassRequest$outboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassRequest$Outbound,
    z.ZodTypeDef,
    PostResultsForAcademicSessionForClassRequest
  > = z.object({
    classSourcedId: z.string(),
    academicSessionSourcedId: z.string(),
    requestBody: z.lazy(() =>
      PostResultsForAcademicSessionForClassRequestBody$outboundSchema
    ),
  }).transform((v) => {
    return remap$(v, {
      requestBody: "RequestBody",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostResultsForAcademicSessionForClassRequest$ {
  /** @deprecated use `PostResultsForAcademicSessionForClassRequest$inboundSchema` instead. */
  export const inboundSchema =
    PostResultsForAcademicSessionForClassRequest$inboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassRequest$outboundSchema` instead. */
  export const outboundSchema =
    PostResultsForAcademicSessionForClassRequest$outboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassRequest$Outbound` instead. */
  export type Outbound = PostResultsForAcademicSessionForClassRequest$Outbound;
}

export function postResultsForAcademicSessionForClassRequestToJSON(
  postResultsForAcademicSessionForClassRequest:
    PostResultsForAcademicSessionForClassRequest,
): string {
  return JSON.stringify(
    PostResultsForAcademicSessionForClassRequest$outboundSchema.parse(
      postResultsForAcademicSessionForClassRequest,
    ),
  );
}

export function postResultsForAcademicSessionForClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  PostResultsForAcademicSessionForClassRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostResultsForAcademicSessionForClassRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostResultsForAcademicSessionForClassRequest' from JSON`,
  );
}

/** @internal */
export const PostResultsForAcademicSessionForClassSourcedIdPairs$inboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassSourcedIdPairs,
    z.ZodTypeDef,
    unknown
  > = z.object({
    suppliedSourcedId: z.string(),
    allocatedSourcedId: z.string(),
  });

/** @internal */
export type PostResultsForAcademicSessionForClassSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const PostResultsForAcademicSessionForClassSourcedIdPairs$outboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassSourcedIdPairs$Outbound,
    z.ZodTypeDef,
    PostResultsForAcademicSessionForClassSourcedIdPairs
  > = z.object({
    suppliedSourcedId: z.string(),
    allocatedSourcedId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostResultsForAcademicSessionForClassSourcedIdPairs$ {
  /** @deprecated use `PostResultsForAcademicSessionForClassSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema =
    PostResultsForAcademicSessionForClassSourcedIdPairs$inboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema =
    PostResultsForAcademicSessionForClassSourcedIdPairs$outboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassSourcedIdPairs$Outbound` instead. */
  export type Outbound =
    PostResultsForAcademicSessionForClassSourcedIdPairs$Outbound;
}

export function postResultsForAcademicSessionForClassSourcedIdPairsToJSON(
  postResultsForAcademicSessionForClassSourcedIdPairs:
    PostResultsForAcademicSessionForClassSourcedIdPairs,
): string {
  return JSON.stringify(
    PostResultsForAcademicSessionForClassSourcedIdPairs$outboundSchema.parse(
      postResultsForAcademicSessionForClassSourcedIdPairs,
    ),
  );
}

export function postResultsForAcademicSessionForClassSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<
  PostResultsForAcademicSessionForClassSourcedIdPairs,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostResultsForAcademicSessionForClassSourcedIdPairs$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostResultsForAcademicSessionForClassSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const PostResultsForAcademicSessionForClassResponse$inboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassResponse,
    z.ZodTypeDef,
    unknown
  > = z.object({
    sourcedIdPairs: z.lazy(() =>
      PostResultsForAcademicSessionForClassSourcedIdPairs$inboundSchema
    ),
  });

/** @internal */
export type PostResultsForAcademicSessionForClassResponse$Outbound = {
  sourcedIdPairs: PostResultsForAcademicSessionForClassSourcedIdPairs$Outbound;
};

/** @internal */
export const PostResultsForAcademicSessionForClassResponse$outboundSchema:
  z.ZodType<
    PostResultsForAcademicSessionForClassResponse$Outbound,
    z.ZodTypeDef,
    PostResultsForAcademicSessionForClassResponse
  > = z.object({
    sourcedIdPairs: z.lazy(() =>
      PostResultsForAcademicSessionForClassSourcedIdPairs$outboundSchema
    ),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PostResultsForAcademicSessionForClassResponse$ {
  /** @deprecated use `PostResultsForAcademicSessionForClassResponse$inboundSchema` instead. */
  export const inboundSchema =
    PostResultsForAcademicSessionForClassResponse$inboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassResponse$outboundSchema` instead. */
  export const outboundSchema =
    PostResultsForAcademicSessionForClassResponse$outboundSchema;
  /** @deprecated use `PostResultsForAcademicSessionForClassResponse$Outbound` instead. */
  export type Outbound = PostResultsForAcademicSessionForClassResponse$Outbound;
}

export function postResultsForAcademicSessionForClassResponseToJSON(
  postResultsForAcademicSessionForClassResponse:
    PostResultsForAcademicSessionForClassResponse,
): string {
  return JSON.stringify(
    PostResultsForAcademicSessionForClassResponse$outboundSchema.parse(
      postResultsForAcademicSessionForClassResponse,
    ),
  );
}

export function postResultsForAcademicSessionForClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  PostResultsForAcademicSessionForClassResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      PostResultsForAcademicSessionForClassResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'PostResultsForAcademicSessionForClassResponse' from JSON`,
  );
}
