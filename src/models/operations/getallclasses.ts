/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllClassesOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllClassesOrderBy = ClosedEnum<typeof GetAllClassesOrderBy>;

export type GetAllClassesRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllClassesOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Successful response with a list of classes
 */
export type GetAllClassesResponseBody = {
  classes: Array<components.Class>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetAllClassesResponse = {
  result: GetAllClassesResponseBody;
};

/** @internal */
export const GetAllClassesOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllClassesOrderBy
> = z.nativeEnum(GetAllClassesOrderBy);

/** @internal */
export const GetAllClassesOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllClassesOrderBy
> = GetAllClassesOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllClassesOrderBy$ {
  /** @deprecated use `GetAllClassesOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllClassesOrderBy$inboundSchema;
  /** @deprecated use `GetAllClassesOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllClassesOrderBy$outboundSchema;
}

/** @internal */
export const GetAllClassesRequest$inboundSchema: z.ZodType<
  GetAllClassesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllClassesOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllClassesRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllClassesRequest$outboundSchema: z.ZodType<
  GetAllClassesRequest$Outbound,
  z.ZodTypeDef,
  GetAllClassesRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllClassesOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllClassesRequest$ {
  /** @deprecated use `GetAllClassesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllClassesRequest$inboundSchema;
  /** @deprecated use `GetAllClassesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllClassesRequest$outboundSchema;
  /** @deprecated use `GetAllClassesRequest$Outbound` instead. */
  export type Outbound = GetAllClassesRequest$Outbound;
}

export function getAllClassesRequestToJSON(
  getAllClassesRequest: GetAllClassesRequest,
): string {
  return JSON.stringify(
    GetAllClassesRequest$outboundSchema.parse(getAllClassesRequest),
  );
}

export function getAllClassesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllClassesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllClassesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllClassesRequest' from JSON`,
  );
}

/** @internal */
export const GetAllClassesResponseBody$inboundSchema: z.ZodType<
  GetAllClassesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  classes: z.array(components.Class$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetAllClassesResponseBody$Outbound = {
  classes: Array<components.Class$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetAllClassesResponseBody$outboundSchema: z.ZodType<
  GetAllClassesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllClassesResponseBody
> = z.object({
  classes: z.array(components.Class$outboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllClassesResponseBody$ {
  /** @deprecated use `GetAllClassesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllClassesResponseBody$inboundSchema;
  /** @deprecated use `GetAllClassesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllClassesResponseBody$outboundSchema;
  /** @deprecated use `GetAllClassesResponseBody$Outbound` instead. */
  export type Outbound = GetAllClassesResponseBody$Outbound;
}

export function getAllClassesResponseBodyToJSON(
  getAllClassesResponseBody: GetAllClassesResponseBody,
): string {
  return JSON.stringify(
    GetAllClassesResponseBody$outboundSchema.parse(getAllClassesResponseBody),
  );
}

export function getAllClassesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllClassesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllClassesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllClassesResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllClassesResponse$inboundSchema: z.ZodType<
  GetAllClassesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllClassesResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllClassesResponse$Outbound = {
  Result: GetAllClassesResponseBody$Outbound;
};

/** @internal */
export const GetAllClassesResponse$outboundSchema: z.ZodType<
  GetAllClassesResponse$Outbound,
  z.ZodTypeDef,
  GetAllClassesResponse
> = z.object({
  result: z.lazy(() => GetAllClassesResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllClassesResponse$ {
  /** @deprecated use `GetAllClassesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllClassesResponse$inboundSchema;
  /** @deprecated use `GetAllClassesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllClassesResponse$outboundSchema;
  /** @deprecated use `GetAllClassesResponse$Outbound` instead. */
  export type Outbound = GetAllClassesResponse$Outbound;
}

export function getAllClassesResponseToJSON(
  getAllClassesResponse: GetAllClassesResponse,
): string {
  return JSON.stringify(
    GetAllClassesResponse$outboundSchema.parse(getAllClassesResponse),
  );
}

export function getAllClassesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllClassesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllClassesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllClassesResponse' from JSON`,
  );
}
