/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCoursesForSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
};

export const GetCoursesForSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetCoursesForSchoolStatus = ClosedEnum<
  typeof GetCoursesForSchoolStatus
>;

export type GetCoursesForSchoolAcademicSession = {
  sourcedId: string;
};

export type GetCoursesForSchoolOrg = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type GetCoursesForSchoolResponse = {
  sourcedId?: string | undefined;
  status: GetCoursesForSchoolStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: GetCoursesForSchoolAcademicSession | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetCoursesForSchoolOrg;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const GetCoursesForSchoolRequest$inboundSchema: z.ZodType<
  GetCoursesForSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
});

/** @internal */
export type GetCoursesForSchoolRequest$Outbound = {
  schoolSourcedId: string;
};

/** @internal */
export const GetCoursesForSchoolRequest$outboundSchema: z.ZodType<
  GetCoursesForSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetCoursesForSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCoursesForSchoolRequest$ {
  /** @deprecated use `GetCoursesForSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetCoursesForSchoolRequest$inboundSchema;
  /** @deprecated use `GetCoursesForSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = GetCoursesForSchoolRequest$outboundSchema;
  /** @deprecated use `GetCoursesForSchoolRequest$Outbound` instead. */
  export type Outbound = GetCoursesForSchoolRequest$Outbound;
}

export function getCoursesForSchoolRequestToJSON(
  getCoursesForSchoolRequest: GetCoursesForSchoolRequest,
): string {
  return JSON.stringify(
    GetCoursesForSchoolRequest$outboundSchema.parse(getCoursesForSchoolRequest),
  );
}

export function getCoursesForSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCoursesForSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCoursesForSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCoursesForSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetCoursesForSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetCoursesForSchoolStatus
> = z.nativeEnum(GetCoursesForSchoolStatus);

/** @internal */
export const GetCoursesForSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetCoursesForSchoolStatus
> = GetCoursesForSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCoursesForSchoolStatus$ {
  /** @deprecated use `GetCoursesForSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = GetCoursesForSchoolStatus$inboundSchema;
  /** @deprecated use `GetCoursesForSchoolStatus$outboundSchema` instead. */
  export const outboundSchema = GetCoursesForSchoolStatus$outboundSchema;
}

/** @internal */
export const GetCoursesForSchoolAcademicSession$inboundSchema: z.ZodType<
  GetCoursesForSchoolAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetCoursesForSchoolAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetCoursesForSchoolAcademicSession$outboundSchema: z.ZodType<
  GetCoursesForSchoolAcademicSession$Outbound,
  z.ZodTypeDef,
  GetCoursesForSchoolAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCoursesForSchoolAcademicSession$ {
  /** @deprecated use `GetCoursesForSchoolAcademicSession$inboundSchema` instead. */
  export const inboundSchema = GetCoursesForSchoolAcademicSession$inboundSchema;
  /** @deprecated use `GetCoursesForSchoolAcademicSession$outboundSchema` instead. */
  export const outboundSchema =
    GetCoursesForSchoolAcademicSession$outboundSchema;
  /** @deprecated use `GetCoursesForSchoolAcademicSession$Outbound` instead. */
  export type Outbound = GetCoursesForSchoolAcademicSession$Outbound;
}

export function getCoursesForSchoolAcademicSessionToJSON(
  getCoursesForSchoolAcademicSession: GetCoursesForSchoolAcademicSession,
): string {
  return JSON.stringify(
    GetCoursesForSchoolAcademicSession$outboundSchema.parse(
      getCoursesForSchoolAcademicSession,
    ),
  );
}

export function getCoursesForSchoolAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<GetCoursesForSchoolAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetCoursesForSchoolAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCoursesForSchoolAcademicSession' from JSON`,
  );
}

/** @internal */
export const GetCoursesForSchoolOrg$inboundSchema: z.ZodType<
  GetCoursesForSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetCoursesForSchoolOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetCoursesForSchoolOrg$outboundSchema: z.ZodType<
  GetCoursesForSchoolOrg$Outbound,
  z.ZodTypeDef,
  GetCoursesForSchoolOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCoursesForSchoolOrg$ {
  /** @deprecated use `GetCoursesForSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = GetCoursesForSchoolOrg$inboundSchema;
  /** @deprecated use `GetCoursesForSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = GetCoursesForSchoolOrg$outboundSchema;
  /** @deprecated use `GetCoursesForSchoolOrg$Outbound` instead. */
  export type Outbound = GetCoursesForSchoolOrg$Outbound;
}

export function getCoursesForSchoolOrgToJSON(
  getCoursesForSchoolOrg: GetCoursesForSchoolOrg,
): string {
  return JSON.stringify(
    GetCoursesForSchoolOrg$outboundSchema.parse(getCoursesForSchoolOrg),
  );
}

export function getCoursesForSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetCoursesForSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCoursesForSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCoursesForSchoolOrg' from JSON`,
  );
}

/** @internal */
export const GetCoursesForSchoolResponse$inboundSchema: z.ZodType<
  GetCoursesForSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCoursesForSchoolStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetCoursesForSchoolAcademicSession$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetCoursesForSchoolOrg$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCoursesForSchoolResponse$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?:
    | GetCoursesForSchoolAcademicSession$Outbound
    | null
    | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetCoursesForSchoolOrg$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const GetCoursesForSchoolResponse$outboundSchema: z.ZodType<
  GetCoursesForSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetCoursesForSchoolResponse
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCoursesForSchoolStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetCoursesForSchoolAcademicSession$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetCoursesForSchoolOrg$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCoursesForSchoolResponse$ {
  /** @deprecated use `GetCoursesForSchoolResponse$inboundSchema` instead. */
  export const inboundSchema = GetCoursesForSchoolResponse$inboundSchema;
  /** @deprecated use `GetCoursesForSchoolResponse$outboundSchema` instead. */
  export const outboundSchema = GetCoursesForSchoolResponse$outboundSchema;
  /** @deprecated use `GetCoursesForSchoolResponse$Outbound` instead. */
  export type Outbound = GetCoursesForSchoolResponse$Outbound;
}

export function getCoursesForSchoolResponseToJSON(
  getCoursesForSchoolResponse: GetCoursesForSchoolResponse,
): string {
  return JSON.stringify(
    GetCoursesForSchoolResponse$outboundSchema.parse(
      getCoursesForSchoolResponse,
    ),
  );
}

export function getCoursesForSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCoursesForSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCoursesForSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCoursesForSchoolResponse' from JSON`,
  );
}
