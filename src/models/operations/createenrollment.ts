/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateEnrollmentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateEnrollmentStatus = ClosedEnum<typeof CreateEnrollmentStatus>;

export const CreateEnrollmentRole = {
  Administrator: "administrator",
  Proctor: "proctor",
  Student: "student",
  Teacher: "teacher",
} as const;
export type CreateEnrollmentRole = ClosedEnum<typeof CreateEnrollmentRole>;

export type CreateEnrollmentUser = {
  sourcedId: string;
};

export type CreateEnrollmentClass = {
  sourcedId: string;
};

export type CreateEnrollmentEnrollment = {
  sourcedId?: string | undefined;
  status?: CreateEnrollmentStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  role: CreateEnrollmentRole;
  primary?: boolean | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
  user: CreateEnrollmentUser;
  class: CreateEnrollmentClass;
};

export type CreateEnrollmentRequest = {
  enrollment: CreateEnrollmentEnrollment;
};

export type CreateEnrollmentSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Successfully created
 */
export type CreateEnrollmentResponse = {
  sourcedIdPairs: CreateEnrollmentSourcedIdPairs;
};

/** @internal */
export const CreateEnrollmentStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateEnrollmentStatus
> = z.nativeEnum(CreateEnrollmentStatus);

/** @internal */
export const CreateEnrollmentStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateEnrollmentStatus
> = CreateEnrollmentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentStatus$ {
  /** @deprecated use `CreateEnrollmentStatus$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentStatus$inboundSchema;
  /** @deprecated use `CreateEnrollmentStatus$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentStatus$outboundSchema;
}

/** @internal */
export const CreateEnrollmentRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateEnrollmentRole
> = z.nativeEnum(CreateEnrollmentRole);

/** @internal */
export const CreateEnrollmentRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateEnrollmentRole
> = CreateEnrollmentRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentRole$ {
  /** @deprecated use `CreateEnrollmentRole$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentRole$inboundSchema;
  /** @deprecated use `CreateEnrollmentRole$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentRole$outboundSchema;
}

/** @internal */
export const CreateEnrollmentUser$inboundSchema: z.ZodType<
  CreateEnrollmentUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateEnrollmentUser$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateEnrollmentUser$outboundSchema: z.ZodType<
  CreateEnrollmentUser$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentUser
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentUser$ {
  /** @deprecated use `CreateEnrollmentUser$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentUser$inboundSchema;
  /** @deprecated use `CreateEnrollmentUser$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentUser$outboundSchema;
  /** @deprecated use `CreateEnrollmentUser$Outbound` instead. */
  export type Outbound = CreateEnrollmentUser$Outbound;
}

export function createEnrollmentUserToJSON(
  createEnrollmentUser: CreateEnrollmentUser,
): string {
  return JSON.stringify(
    CreateEnrollmentUser$outboundSchema.parse(createEnrollmentUser),
  );
}

export function createEnrollmentUserFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentUser' from JSON`,
  );
}

/** @internal */
export const CreateEnrollmentClass$inboundSchema: z.ZodType<
  CreateEnrollmentClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateEnrollmentClass$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateEnrollmentClass$outboundSchema: z.ZodType<
  CreateEnrollmentClass$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentClass
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentClass$ {
  /** @deprecated use `CreateEnrollmentClass$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentClass$inboundSchema;
  /** @deprecated use `CreateEnrollmentClass$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentClass$outboundSchema;
  /** @deprecated use `CreateEnrollmentClass$Outbound` instead. */
  export type Outbound = CreateEnrollmentClass$Outbound;
}

export function createEnrollmentClassToJSON(
  createEnrollmentClass: CreateEnrollmentClass,
): string {
  return JSON.stringify(
    CreateEnrollmentClass$outboundSchema.parse(createEnrollmentClass),
  );
}

export function createEnrollmentClassFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentClass' from JSON`,
  );
}

/** @internal */
export const CreateEnrollmentEnrollment$inboundSchema: z.ZodType<
  CreateEnrollmentEnrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateEnrollmentStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  role: CreateEnrollmentRole$inboundSchema,
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
  user: z.lazy(() => CreateEnrollmentUser$inboundSchema),
  class: z.lazy(() => CreateEnrollmentClass$inboundSchema),
});

/** @internal */
export type CreateEnrollmentEnrollment$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  role: string;
  primary: boolean;
  beginDate?: string | undefined;
  endDate?: string | undefined;
  user: CreateEnrollmentUser$Outbound;
  class: CreateEnrollmentClass$Outbound;
};

/** @internal */
export const CreateEnrollmentEnrollment$outboundSchema: z.ZodType<
  CreateEnrollmentEnrollment$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentEnrollment
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateEnrollmentStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  role: CreateEnrollmentRole$outboundSchema,
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
  user: z.lazy(() => CreateEnrollmentUser$outboundSchema),
  class: z.lazy(() => CreateEnrollmentClass$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentEnrollment$ {
  /** @deprecated use `CreateEnrollmentEnrollment$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentEnrollment$inboundSchema;
  /** @deprecated use `CreateEnrollmentEnrollment$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentEnrollment$outboundSchema;
  /** @deprecated use `CreateEnrollmentEnrollment$Outbound` instead. */
  export type Outbound = CreateEnrollmentEnrollment$Outbound;
}

export function createEnrollmentEnrollmentToJSON(
  createEnrollmentEnrollment: CreateEnrollmentEnrollment,
): string {
  return JSON.stringify(
    CreateEnrollmentEnrollment$outboundSchema.parse(createEnrollmentEnrollment),
  );
}

export function createEnrollmentEnrollmentFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentEnrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentEnrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentEnrollment' from JSON`,
  );
}

/** @internal */
export const CreateEnrollmentRequest$inboundSchema: z.ZodType<
  CreateEnrollmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollment: z.lazy(() => CreateEnrollmentEnrollment$inboundSchema),
});

/** @internal */
export type CreateEnrollmentRequest$Outbound = {
  enrollment: CreateEnrollmentEnrollment$Outbound;
};

/** @internal */
export const CreateEnrollmentRequest$outboundSchema: z.ZodType<
  CreateEnrollmentRequest$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentRequest
> = z.object({
  enrollment: z.lazy(() => CreateEnrollmentEnrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentRequest$ {
  /** @deprecated use `CreateEnrollmentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentRequest$inboundSchema;
  /** @deprecated use `CreateEnrollmentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentRequest$outboundSchema;
  /** @deprecated use `CreateEnrollmentRequest$Outbound` instead. */
  export type Outbound = CreateEnrollmentRequest$Outbound;
}

export function createEnrollmentRequestToJSON(
  createEnrollmentRequest: CreateEnrollmentRequest,
): string {
  return JSON.stringify(
    CreateEnrollmentRequest$outboundSchema.parse(createEnrollmentRequest),
  );
}

export function createEnrollmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentRequest' from JSON`,
  );
}

/** @internal */
export const CreateEnrollmentSourcedIdPairs$inboundSchema: z.ZodType<
  CreateEnrollmentSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateEnrollmentSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateEnrollmentSourcedIdPairs$outboundSchema: z.ZodType<
  CreateEnrollmentSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentSourcedIdPairs$ {
  /** @deprecated use `CreateEnrollmentSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateEnrollmentSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateEnrollmentSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateEnrollmentSourcedIdPairs$Outbound;
}

export function createEnrollmentSourcedIdPairsToJSON(
  createEnrollmentSourcedIdPairs: CreateEnrollmentSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateEnrollmentSourcedIdPairs$outboundSchema.parse(
      createEnrollmentSourcedIdPairs,
    ),
  );
}

export function createEnrollmentSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateEnrollmentResponse$inboundSchema: z.ZodType<
  CreateEnrollmentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateEnrollmentSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateEnrollmentResponse$Outbound = {
  sourcedIdPairs: CreateEnrollmentSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateEnrollmentResponse$outboundSchema: z.ZodType<
  CreateEnrollmentResponse$Outbound,
  z.ZodTypeDef,
  CreateEnrollmentResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateEnrollmentSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateEnrollmentResponse$ {
  /** @deprecated use `CreateEnrollmentResponse$inboundSchema` instead. */
  export const inboundSchema = CreateEnrollmentResponse$inboundSchema;
  /** @deprecated use `CreateEnrollmentResponse$outboundSchema` instead. */
  export const outboundSchema = CreateEnrollmentResponse$outboundSchema;
  /** @deprecated use `CreateEnrollmentResponse$Outbound` instead. */
  export type Outbound = CreateEnrollmentResponse$Outbound;
}

export function createEnrollmentResponseToJSON(
  createEnrollmentResponse: CreateEnrollmentResponse,
): string {
  return JSON.stringify(
    CreateEnrollmentResponse$outboundSchema.parse(createEnrollmentResponse),
  );
}

export function createEnrollmentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateEnrollmentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateEnrollmentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateEnrollmentResponse' from JSON`,
  );
}
