/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetEnrollmentsForClassInSchoolOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetEnrollmentsForClassInSchoolOrderBy = ClosedEnum<
  typeof GetEnrollmentsForClassInSchoolOrderBy
>;

export type GetEnrollmentsForClassInSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
  /**
   * Class sourced ID
   */
  classSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetEnrollmentsForClassInSchoolOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Collection of enrollments successfully retrieved
 */
export type GetEnrollmentsForClassInSchoolResponseBody = {
  enrollments: Array<components.Enrollment>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetEnrollmentsForClassInSchoolResponse = {
  result: GetEnrollmentsForClassInSchoolResponseBody;
};

/** @internal */
export const GetEnrollmentsForClassInSchoolOrderBy$inboundSchema:
  z.ZodNativeEnum<typeof GetEnrollmentsForClassInSchoolOrderBy> = z.nativeEnum(
    GetEnrollmentsForClassInSchoolOrderBy,
  );

/** @internal */
export const GetEnrollmentsForClassInSchoolOrderBy$outboundSchema:
  z.ZodNativeEnum<typeof GetEnrollmentsForClassInSchoolOrderBy> =
    GetEnrollmentsForClassInSchoolOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrollmentsForClassInSchoolOrderBy$ {
  /** @deprecated use `GetEnrollmentsForClassInSchoolOrderBy$inboundSchema` instead. */
  export const inboundSchema =
    GetEnrollmentsForClassInSchoolOrderBy$inboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolOrderBy$outboundSchema` instead. */
  export const outboundSchema =
    GetEnrollmentsForClassInSchoolOrderBy$outboundSchema;
}

/** @internal */
export const GetEnrollmentsForClassInSchoolRequest$inboundSchema: z.ZodType<
  GetEnrollmentsForClassInSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
  classSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetEnrollmentsForClassInSchoolOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetEnrollmentsForClassInSchoolRequest$Outbound = {
  schoolSourcedId: string;
  classSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetEnrollmentsForClassInSchoolRequest$outboundSchema: z.ZodType<
  GetEnrollmentsForClassInSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetEnrollmentsForClassInSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
  classSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetEnrollmentsForClassInSchoolOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrollmentsForClassInSchoolRequest$ {
  /** @deprecated use `GetEnrollmentsForClassInSchoolRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetEnrollmentsForClassInSchoolRequest$inboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetEnrollmentsForClassInSchoolRequest$outboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolRequest$Outbound` instead. */
  export type Outbound = GetEnrollmentsForClassInSchoolRequest$Outbound;
}

export function getEnrollmentsForClassInSchoolRequestToJSON(
  getEnrollmentsForClassInSchoolRequest: GetEnrollmentsForClassInSchoolRequest,
): string {
  return JSON.stringify(
    GetEnrollmentsForClassInSchoolRequest$outboundSchema.parse(
      getEnrollmentsForClassInSchoolRequest,
    ),
  );
}

export function getEnrollmentsForClassInSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetEnrollmentsForClassInSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetEnrollmentsForClassInSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnrollmentsForClassInSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetEnrollmentsForClassInSchoolResponseBody$inboundSchema:
  z.ZodType<GetEnrollmentsForClassInSchoolResponseBody, z.ZodTypeDef, unknown> =
    z.object({
      enrollments: z.array(components.Enrollment$inboundSchema),
      totalCount: z.number(),
      pageCount: z.number(),
      pageNumber: z.number(),
      offset: z.number(),
      limit: z.number(),
    });

/** @internal */
export type GetEnrollmentsForClassInSchoolResponseBody$Outbound = {
  enrollments: Array<components.Enrollment$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetEnrollmentsForClassInSchoolResponseBody$outboundSchema:
  z.ZodType<
    GetEnrollmentsForClassInSchoolResponseBody$Outbound,
    z.ZodTypeDef,
    GetEnrollmentsForClassInSchoolResponseBody
  > = z.object({
    enrollments: z.array(components.Enrollment$outboundSchema),
    totalCount: z.number(),
    pageCount: z.number(),
    pageNumber: z.number(),
    offset: z.number(),
    limit: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrollmentsForClassInSchoolResponseBody$ {
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetEnrollmentsForClassInSchoolResponseBody$inboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetEnrollmentsForClassInSchoolResponseBody$outboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponseBody$Outbound` instead. */
  export type Outbound = GetEnrollmentsForClassInSchoolResponseBody$Outbound;
}

export function getEnrollmentsForClassInSchoolResponseBodyToJSON(
  getEnrollmentsForClassInSchoolResponseBody:
    GetEnrollmentsForClassInSchoolResponseBody,
): string {
  return JSON.stringify(
    GetEnrollmentsForClassInSchoolResponseBody$outboundSchema.parse(
      getEnrollmentsForClassInSchoolResponseBody,
    ),
  );
}

export function getEnrollmentsForClassInSchoolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetEnrollmentsForClassInSchoolResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetEnrollmentsForClassInSchoolResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetEnrollmentsForClassInSchoolResponseBody' from JSON`,
  );
}

/** @internal */
export const GetEnrollmentsForClassInSchoolResponse$inboundSchema: z.ZodType<
  GetEnrollmentsForClassInSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() =>
    GetEnrollmentsForClassInSchoolResponseBody$inboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetEnrollmentsForClassInSchoolResponse$Outbound = {
  Result: GetEnrollmentsForClassInSchoolResponseBody$Outbound;
};

/** @internal */
export const GetEnrollmentsForClassInSchoolResponse$outboundSchema: z.ZodType<
  GetEnrollmentsForClassInSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetEnrollmentsForClassInSchoolResponse
> = z.object({
  result: z.lazy(() =>
    GetEnrollmentsForClassInSchoolResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetEnrollmentsForClassInSchoolResponse$ {
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetEnrollmentsForClassInSchoolResponse$inboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetEnrollmentsForClassInSchoolResponse$outboundSchema;
  /** @deprecated use `GetEnrollmentsForClassInSchoolResponse$Outbound` instead. */
  export type Outbound = GetEnrollmentsForClassInSchoolResponse$Outbound;
}

export function getEnrollmentsForClassInSchoolResponseToJSON(
  getEnrollmentsForClassInSchoolResponse:
    GetEnrollmentsForClassInSchoolResponse,
): string {
  return JSON.stringify(
    GetEnrollmentsForClassInSchoolResponse$outboundSchema.parse(
      getEnrollmentsForClassInSchoolResponse,
    ),
  );
}

export function getEnrollmentsForClassInSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetEnrollmentsForClassInSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetEnrollmentsForClassInSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetEnrollmentsForClassInSchoolResponse' from JSON`,
  );
}
