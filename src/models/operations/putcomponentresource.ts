/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutComponentResourceStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type PutComponentResourceStatus = ClosedEnum<
  typeof PutComponentResourceStatus
>;

export type PutComponentResourceCourseComponent = {
  sourcedId: string;
};

export type PutComponentResourceResource = {
  sourcedId: string;
};

/**
 * Represents a resource associated with a course component.
 */
export type PutComponentResourceComponentResource = {
  sourcedId: string;
  status: PutComponentResourceStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  courseComponent: PutComponentResourceCourseComponent;
  resource: PutComponentResourceResource;
  title: string;
  sortOrder?: number | undefined;
};

export type PutComponentResourceRequestBody = {
  /**
   * Represents a resource associated with a course component.
   */
  componentResource: PutComponentResourceComponentResource;
};

export type PutComponentResourceRequest = {
  /**
   * The sourcedId of the component resource to update
   */
  sourcedId: string;
  requestBody?: PutComponentResourceRequestBody | undefined;
};

/** @internal */
export const PutComponentResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof PutComponentResourceStatus
> = z.nativeEnum(PutComponentResourceStatus);

/** @internal */
export const PutComponentResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof PutComponentResourceStatus
> = PutComponentResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceStatus$ {
  /** @deprecated use `PutComponentResourceStatus$inboundSchema` instead. */
  export const inboundSchema = PutComponentResourceStatus$inboundSchema;
  /** @deprecated use `PutComponentResourceStatus$outboundSchema` instead. */
  export const outboundSchema = PutComponentResourceStatus$outboundSchema;
}

/** @internal */
export const PutComponentResourceCourseComponent$inboundSchema: z.ZodType<
  PutComponentResourceCourseComponent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutComponentResourceCourseComponent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutComponentResourceCourseComponent$outboundSchema: z.ZodType<
  PutComponentResourceCourseComponent$Outbound,
  z.ZodTypeDef,
  PutComponentResourceCourseComponent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceCourseComponent$ {
  /** @deprecated use `PutComponentResourceCourseComponent$inboundSchema` instead. */
  export const inboundSchema =
    PutComponentResourceCourseComponent$inboundSchema;
  /** @deprecated use `PutComponentResourceCourseComponent$outboundSchema` instead. */
  export const outboundSchema =
    PutComponentResourceCourseComponent$outboundSchema;
  /** @deprecated use `PutComponentResourceCourseComponent$Outbound` instead. */
  export type Outbound = PutComponentResourceCourseComponent$Outbound;
}

export function putComponentResourceCourseComponentToJSON(
  putComponentResourceCourseComponent: PutComponentResourceCourseComponent,
): string {
  return JSON.stringify(
    PutComponentResourceCourseComponent$outboundSchema.parse(
      putComponentResourceCourseComponent,
    ),
  );
}

export function putComponentResourceCourseComponentFromJSON(
  jsonString: string,
): SafeParseResult<PutComponentResourceCourseComponent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutComponentResourceCourseComponent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutComponentResourceCourseComponent' from JSON`,
  );
}

/** @internal */
export const PutComponentResourceResource$inboundSchema: z.ZodType<
  PutComponentResourceResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutComponentResourceResource$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutComponentResourceResource$outboundSchema: z.ZodType<
  PutComponentResourceResource$Outbound,
  z.ZodTypeDef,
  PutComponentResourceResource
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceResource$ {
  /** @deprecated use `PutComponentResourceResource$inboundSchema` instead. */
  export const inboundSchema = PutComponentResourceResource$inboundSchema;
  /** @deprecated use `PutComponentResourceResource$outboundSchema` instead. */
  export const outboundSchema = PutComponentResourceResource$outboundSchema;
  /** @deprecated use `PutComponentResourceResource$Outbound` instead. */
  export type Outbound = PutComponentResourceResource$Outbound;
}

export function putComponentResourceResourceToJSON(
  putComponentResourceResource: PutComponentResourceResource,
): string {
  return JSON.stringify(
    PutComponentResourceResource$outboundSchema.parse(
      putComponentResourceResource,
    ),
  );
}

export function putComponentResourceResourceFromJSON(
  jsonString: string,
): SafeParseResult<PutComponentResourceResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutComponentResourceResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutComponentResourceResource' from JSON`,
  );
}

/** @internal */
export const PutComponentResourceComponentResource$inboundSchema: z.ZodType<
  PutComponentResourceComponentResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: PutComponentResourceStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  courseComponent: z.lazy(() =>
    PutComponentResourceCourseComponent$inboundSchema
  ),
  resource: z.lazy(() => PutComponentResourceResource$inboundSchema),
  title: z.string(),
  sortOrder: z.number().default(0),
});

/** @internal */
export type PutComponentResourceComponentResource$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  courseComponent: PutComponentResourceCourseComponent$Outbound;
  resource: PutComponentResourceResource$Outbound;
  title: string;
  sortOrder: number;
};

/** @internal */
export const PutComponentResourceComponentResource$outboundSchema: z.ZodType<
  PutComponentResourceComponentResource$Outbound,
  z.ZodTypeDef,
  PutComponentResourceComponentResource
> = z.object({
  sourcedId: z.string(),
  status: PutComponentResourceStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  courseComponent: z.lazy(() =>
    PutComponentResourceCourseComponent$outboundSchema
  ),
  resource: z.lazy(() => PutComponentResourceResource$outboundSchema),
  title: z.string(),
  sortOrder: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceComponentResource$ {
  /** @deprecated use `PutComponentResourceComponentResource$inboundSchema` instead. */
  export const inboundSchema =
    PutComponentResourceComponentResource$inboundSchema;
  /** @deprecated use `PutComponentResourceComponentResource$outboundSchema` instead. */
  export const outboundSchema =
    PutComponentResourceComponentResource$outboundSchema;
  /** @deprecated use `PutComponentResourceComponentResource$Outbound` instead. */
  export type Outbound = PutComponentResourceComponentResource$Outbound;
}

export function putComponentResourceComponentResourceToJSON(
  putComponentResourceComponentResource: PutComponentResourceComponentResource,
): string {
  return JSON.stringify(
    PutComponentResourceComponentResource$outboundSchema.parse(
      putComponentResourceComponentResource,
    ),
  );
}

export function putComponentResourceComponentResourceFromJSON(
  jsonString: string,
): SafeParseResult<PutComponentResourceComponentResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutComponentResourceComponentResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutComponentResourceComponentResource' from JSON`,
  );
}

/** @internal */
export const PutComponentResourceRequestBody$inboundSchema: z.ZodType<
  PutComponentResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  componentResource: z.lazy(() =>
    PutComponentResourceComponentResource$inboundSchema
  ),
});

/** @internal */
export type PutComponentResourceRequestBody$Outbound = {
  componentResource: PutComponentResourceComponentResource$Outbound;
};

/** @internal */
export const PutComponentResourceRequestBody$outboundSchema: z.ZodType<
  PutComponentResourceRequestBody$Outbound,
  z.ZodTypeDef,
  PutComponentResourceRequestBody
> = z.object({
  componentResource: z.lazy(() =>
    PutComponentResourceComponentResource$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceRequestBody$ {
  /** @deprecated use `PutComponentResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutComponentResourceRequestBody$inboundSchema;
  /** @deprecated use `PutComponentResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutComponentResourceRequestBody$outboundSchema;
  /** @deprecated use `PutComponentResourceRequestBody$Outbound` instead. */
  export type Outbound = PutComponentResourceRequestBody$Outbound;
}

export function putComponentResourceRequestBodyToJSON(
  putComponentResourceRequestBody: PutComponentResourceRequestBody,
): string {
  return JSON.stringify(
    PutComponentResourceRequestBody$outboundSchema.parse(
      putComponentResourceRequestBody,
    ),
  );
}

export function putComponentResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutComponentResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutComponentResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutComponentResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const PutComponentResourceRequest$inboundSchema: z.ZodType<
  PutComponentResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => PutComponentResourceRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutComponentResourceRequest$Outbound = {
  sourcedId: string;
  RequestBody?: PutComponentResourceRequestBody$Outbound | undefined;
};

/** @internal */
export const PutComponentResourceRequest$outboundSchema: z.ZodType<
  PutComponentResourceRequest$Outbound,
  z.ZodTypeDef,
  PutComponentResourceRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => PutComponentResourceRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutComponentResourceRequest$ {
  /** @deprecated use `PutComponentResourceRequest$inboundSchema` instead. */
  export const inboundSchema = PutComponentResourceRequest$inboundSchema;
  /** @deprecated use `PutComponentResourceRequest$outboundSchema` instead. */
  export const outboundSchema = PutComponentResourceRequest$outboundSchema;
  /** @deprecated use `PutComponentResourceRequest$Outbound` instead. */
  export type Outbound = PutComponentResourceRequest$Outbound;
}

export function putComponentResourceRequestToJSON(
  putComponentResourceRequest: PutComponentResourceRequest,
): string {
  return JSON.stringify(
    PutComponentResourceRequest$outboundSchema.parse(
      putComponentResourceRequest,
    ),
  );
}

export function putComponentResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutComponentResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutComponentResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutComponentResourceRequest' from JSON`,
  );
}
