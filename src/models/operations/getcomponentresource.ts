/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetComponentResourceRequest = {
  /**
   * The sourcedId of the component resource
   */
  sourcedId: string;
};

export const GetComponentResourceStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetComponentResourceStatus = ClosedEnum<
  typeof GetComponentResourceStatus
>;

export type GetComponentResourceCourseComponent = {
  sourcedId: string;
};

export type GetComponentResourceResource = {
  sourcedId: string;
};

/**
 * Represents a resource associated with a course component.
 */
export type GetComponentResourceComponentResource = {
  sourcedId: string;
  status: GetComponentResourceStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  courseComponent: GetComponentResourceCourseComponent;
  resource: GetComponentResourceResource;
  title: string;
  sortOrder?: number | undefined;
};

/**
 * Single Component Resource
 */
export type GetComponentResourceResponse = {
  /**
   * Represents a resource associated with a course component.
   */
  componentResource: GetComponentResourceComponentResource;
};

/** @internal */
export const GetComponentResourceRequest$inboundSchema: z.ZodType<
  GetComponentResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetComponentResourceRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetComponentResourceRequest$outboundSchema: z.ZodType<
  GetComponentResourceRequest$Outbound,
  z.ZodTypeDef,
  GetComponentResourceRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceRequest$ {
  /** @deprecated use `GetComponentResourceRequest$inboundSchema` instead. */
  export const inboundSchema = GetComponentResourceRequest$inboundSchema;
  /** @deprecated use `GetComponentResourceRequest$outboundSchema` instead. */
  export const outboundSchema = GetComponentResourceRequest$outboundSchema;
  /** @deprecated use `GetComponentResourceRequest$Outbound` instead. */
  export type Outbound = GetComponentResourceRequest$Outbound;
}

export function getComponentResourceRequestToJSON(
  getComponentResourceRequest: GetComponentResourceRequest,
): string {
  return JSON.stringify(
    GetComponentResourceRequest$outboundSchema.parse(
      getComponentResourceRequest,
    ),
  );
}

export function getComponentResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetComponentResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetComponentResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetComponentResourceRequest' from JSON`,
  );
}

/** @internal */
export const GetComponentResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetComponentResourceStatus
> = z.nativeEnum(GetComponentResourceStatus);

/** @internal */
export const GetComponentResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetComponentResourceStatus
> = GetComponentResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceStatus$ {
  /** @deprecated use `GetComponentResourceStatus$inboundSchema` instead. */
  export const inboundSchema = GetComponentResourceStatus$inboundSchema;
  /** @deprecated use `GetComponentResourceStatus$outboundSchema` instead. */
  export const outboundSchema = GetComponentResourceStatus$outboundSchema;
}

/** @internal */
export const GetComponentResourceCourseComponent$inboundSchema: z.ZodType<
  GetComponentResourceCourseComponent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetComponentResourceCourseComponent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetComponentResourceCourseComponent$outboundSchema: z.ZodType<
  GetComponentResourceCourseComponent$Outbound,
  z.ZodTypeDef,
  GetComponentResourceCourseComponent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceCourseComponent$ {
  /** @deprecated use `GetComponentResourceCourseComponent$inboundSchema` instead. */
  export const inboundSchema =
    GetComponentResourceCourseComponent$inboundSchema;
  /** @deprecated use `GetComponentResourceCourseComponent$outboundSchema` instead. */
  export const outboundSchema =
    GetComponentResourceCourseComponent$outboundSchema;
  /** @deprecated use `GetComponentResourceCourseComponent$Outbound` instead. */
  export type Outbound = GetComponentResourceCourseComponent$Outbound;
}

export function getComponentResourceCourseComponentToJSON(
  getComponentResourceCourseComponent: GetComponentResourceCourseComponent,
): string {
  return JSON.stringify(
    GetComponentResourceCourseComponent$outboundSchema.parse(
      getComponentResourceCourseComponent,
    ),
  );
}

export function getComponentResourceCourseComponentFromJSON(
  jsonString: string,
): SafeParseResult<GetComponentResourceCourseComponent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetComponentResourceCourseComponent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetComponentResourceCourseComponent' from JSON`,
  );
}

/** @internal */
export const GetComponentResourceResource$inboundSchema: z.ZodType<
  GetComponentResourceResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetComponentResourceResource$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetComponentResourceResource$outboundSchema: z.ZodType<
  GetComponentResourceResource$Outbound,
  z.ZodTypeDef,
  GetComponentResourceResource
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceResource$ {
  /** @deprecated use `GetComponentResourceResource$inboundSchema` instead. */
  export const inboundSchema = GetComponentResourceResource$inboundSchema;
  /** @deprecated use `GetComponentResourceResource$outboundSchema` instead. */
  export const outboundSchema = GetComponentResourceResource$outboundSchema;
  /** @deprecated use `GetComponentResourceResource$Outbound` instead. */
  export type Outbound = GetComponentResourceResource$Outbound;
}

export function getComponentResourceResourceToJSON(
  getComponentResourceResource: GetComponentResourceResource,
): string {
  return JSON.stringify(
    GetComponentResourceResource$outboundSchema.parse(
      getComponentResourceResource,
    ),
  );
}

export function getComponentResourceResourceFromJSON(
  jsonString: string,
): SafeParseResult<GetComponentResourceResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetComponentResourceResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetComponentResourceResource' from JSON`,
  );
}

/** @internal */
export const GetComponentResourceComponentResource$inboundSchema: z.ZodType<
  GetComponentResourceComponentResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetComponentResourceStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  courseComponent: z.lazy(() =>
    GetComponentResourceCourseComponent$inboundSchema
  ),
  resource: z.lazy(() => GetComponentResourceResource$inboundSchema),
  title: z.string(),
  sortOrder: z.number().default(0),
});

/** @internal */
export type GetComponentResourceComponentResource$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  courseComponent: GetComponentResourceCourseComponent$Outbound;
  resource: GetComponentResourceResource$Outbound;
  title: string;
  sortOrder: number;
};

/** @internal */
export const GetComponentResourceComponentResource$outboundSchema: z.ZodType<
  GetComponentResourceComponentResource$Outbound,
  z.ZodTypeDef,
  GetComponentResourceComponentResource
> = z.object({
  sourcedId: z.string(),
  status: GetComponentResourceStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  courseComponent: z.lazy(() =>
    GetComponentResourceCourseComponent$outboundSchema
  ),
  resource: z.lazy(() => GetComponentResourceResource$outboundSchema),
  title: z.string(),
  sortOrder: z.number().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceComponentResource$ {
  /** @deprecated use `GetComponentResourceComponentResource$inboundSchema` instead. */
  export const inboundSchema =
    GetComponentResourceComponentResource$inboundSchema;
  /** @deprecated use `GetComponentResourceComponentResource$outboundSchema` instead. */
  export const outboundSchema =
    GetComponentResourceComponentResource$outboundSchema;
  /** @deprecated use `GetComponentResourceComponentResource$Outbound` instead. */
  export type Outbound = GetComponentResourceComponentResource$Outbound;
}

export function getComponentResourceComponentResourceToJSON(
  getComponentResourceComponentResource: GetComponentResourceComponentResource,
): string {
  return JSON.stringify(
    GetComponentResourceComponentResource$outboundSchema.parse(
      getComponentResourceComponentResource,
    ),
  );
}

export function getComponentResourceComponentResourceFromJSON(
  jsonString: string,
): SafeParseResult<GetComponentResourceComponentResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetComponentResourceComponentResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetComponentResourceComponentResource' from JSON`,
  );
}

/** @internal */
export const GetComponentResourceResponse$inboundSchema: z.ZodType<
  GetComponentResourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  componentResource: z.lazy(() =>
    GetComponentResourceComponentResource$inboundSchema
  ),
});

/** @internal */
export type GetComponentResourceResponse$Outbound = {
  componentResource: GetComponentResourceComponentResource$Outbound;
};

/** @internal */
export const GetComponentResourceResponse$outboundSchema: z.ZodType<
  GetComponentResourceResponse$Outbound,
  z.ZodTypeDef,
  GetComponentResourceResponse
> = z.object({
  componentResource: z.lazy(() =>
    GetComponentResourceComponentResource$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetComponentResourceResponse$ {
  /** @deprecated use `GetComponentResourceResponse$inboundSchema` instead. */
  export const inboundSchema = GetComponentResourceResponse$inboundSchema;
  /** @deprecated use `GetComponentResourceResponse$outboundSchema` instead. */
  export const outboundSchema = GetComponentResourceResponse$outboundSchema;
  /** @deprecated use `GetComponentResourceResponse$Outbound` instead. */
  export type Outbound = GetComponentResourceResponse$Outbound;
}

export function getComponentResourceResponseToJSON(
  getComponentResourceResponse: GetComponentResourceResponse,
): string {
  return JSON.stringify(
    GetComponentResourceResponse$outboundSchema.parse(
      getComponentResourceResponse,
    ),
  );
}

export function getComponentResourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetComponentResourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetComponentResourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetComponentResourceResponse' from JSON`,
  );
}
