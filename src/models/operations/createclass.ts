/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateClassStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateClassStatus = ClosedEnum<typeof CreateClassStatus>;

export const CreateClassClassType = {
  Homeroom: "homeroom",
  Scheduled: "scheduled",
} as const;
export type CreateClassClassType = ClosedEnum<typeof CreateClassClassType>;

export type CreateClassCourse = {
  sourcedId: string;
};

export type CreateClassOrg = {
  sourcedId: string;
};

export type CreateClassResource = {
  sourcedId: string;
};

export type CreateClassTerm = {
  sourcedId: string;
};

export type CreateClassClass = {
  sourcedId?: string | undefined;
  status?: CreateClassStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  title: string;
  classCode?: string | undefined;
  classType?: CreateClassClassType | undefined;
  location?: string | undefined;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  course: CreateClassCourse;
  org: CreateClassOrg;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<CreateClassResource> | undefined;
  terms: Array<CreateClassTerm>;
};

export type CreateClassRequest = {
  class: CreateClassClass;
};

export type CreateClassSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Class successfully created
 */
export type CreateClassResponse = {
  sourcedIdPairs: CreateClassSourcedIdPairs;
};

/** @internal */
export const CreateClassStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateClassStatus
> = z.nativeEnum(CreateClassStatus);

/** @internal */
export const CreateClassStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateClassStatus
> = CreateClassStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassStatus$ {
  /** @deprecated use `CreateClassStatus$inboundSchema` instead. */
  export const inboundSchema = CreateClassStatus$inboundSchema;
  /** @deprecated use `CreateClassStatus$outboundSchema` instead. */
  export const outboundSchema = CreateClassStatus$outboundSchema;
}

/** @internal */
export const CreateClassClassType$inboundSchema: z.ZodNativeEnum<
  typeof CreateClassClassType
> = z.nativeEnum(CreateClassClassType);

/** @internal */
export const CreateClassClassType$outboundSchema: z.ZodNativeEnum<
  typeof CreateClassClassType
> = CreateClassClassType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassClassType$ {
  /** @deprecated use `CreateClassClassType$inboundSchema` instead. */
  export const inboundSchema = CreateClassClassType$inboundSchema;
  /** @deprecated use `CreateClassClassType$outboundSchema` instead. */
  export const outboundSchema = CreateClassClassType$outboundSchema;
}

/** @internal */
export const CreateClassCourse$inboundSchema: z.ZodType<
  CreateClassCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateClassCourse$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateClassCourse$outboundSchema: z.ZodType<
  CreateClassCourse$Outbound,
  z.ZodTypeDef,
  CreateClassCourse
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassCourse$ {
  /** @deprecated use `CreateClassCourse$inboundSchema` instead. */
  export const inboundSchema = CreateClassCourse$inboundSchema;
  /** @deprecated use `CreateClassCourse$outboundSchema` instead. */
  export const outboundSchema = CreateClassCourse$outboundSchema;
  /** @deprecated use `CreateClassCourse$Outbound` instead. */
  export type Outbound = CreateClassCourse$Outbound;
}

export function createClassCourseToJSON(
  createClassCourse: CreateClassCourse,
): string {
  return JSON.stringify(
    CreateClassCourse$outboundSchema.parse(createClassCourse),
  );
}

export function createClassCourseFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassCourse' from JSON`,
  );
}

/** @internal */
export const CreateClassOrg$inboundSchema: z.ZodType<
  CreateClassOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateClassOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateClassOrg$outboundSchema: z.ZodType<
  CreateClassOrg$Outbound,
  z.ZodTypeDef,
  CreateClassOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassOrg$ {
  /** @deprecated use `CreateClassOrg$inboundSchema` instead. */
  export const inboundSchema = CreateClassOrg$inboundSchema;
  /** @deprecated use `CreateClassOrg$outboundSchema` instead. */
  export const outboundSchema = CreateClassOrg$outboundSchema;
  /** @deprecated use `CreateClassOrg$Outbound` instead. */
  export type Outbound = CreateClassOrg$Outbound;
}

export function createClassOrgToJSON(createClassOrg: CreateClassOrg): string {
  return JSON.stringify(CreateClassOrg$outboundSchema.parse(createClassOrg));
}

export function createClassOrgFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassOrg' from JSON`,
  );
}

/** @internal */
export const CreateClassResource$inboundSchema: z.ZodType<
  CreateClassResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateClassResource$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateClassResource$outboundSchema: z.ZodType<
  CreateClassResource$Outbound,
  z.ZodTypeDef,
  CreateClassResource
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassResource$ {
  /** @deprecated use `CreateClassResource$inboundSchema` instead. */
  export const inboundSchema = CreateClassResource$inboundSchema;
  /** @deprecated use `CreateClassResource$outboundSchema` instead. */
  export const outboundSchema = CreateClassResource$outboundSchema;
  /** @deprecated use `CreateClassResource$Outbound` instead. */
  export type Outbound = CreateClassResource$Outbound;
}

export function createClassResourceToJSON(
  createClassResource: CreateClassResource,
): string {
  return JSON.stringify(
    CreateClassResource$outboundSchema.parse(createClassResource),
  );
}

export function createClassResourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassResource' from JSON`,
  );
}

/** @internal */
export const CreateClassTerm$inboundSchema: z.ZodType<
  CreateClassTerm,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateClassTerm$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateClassTerm$outboundSchema: z.ZodType<
  CreateClassTerm$Outbound,
  z.ZodTypeDef,
  CreateClassTerm
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassTerm$ {
  /** @deprecated use `CreateClassTerm$inboundSchema` instead. */
  export const inboundSchema = CreateClassTerm$inboundSchema;
  /** @deprecated use `CreateClassTerm$outboundSchema` instead. */
  export const outboundSchema = CreateClassTerm$outboundSchema;
  /** @deprecated use `CreateClassTerm$Outbound` instead. */
  export type Outbound = CreateClassTerm$Outbound;
}

export function createClassTermToJSON(
  createClassTerm: CreateClassTerm,
): string {
  return JSON.stringify(CreateClassTerm$outboundSchema.parse(createClassTerm));
}

export function createClassTermFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassTerm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassTerm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassTerm' from JSON`,
  );
}

/** @internal */
export const CreateClassClass$inboundSchema: z.ZodType<
  CreateClassClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateClassStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  title: z.string(),
  classCode: z.string().optional(),
  classType: CreateClassClassType$inboundSchema.optional(),
  location: z.string().optional(),
  grades: z.array(z.string()).optional(),
  subjects: z.array(z.string()).optional(),
  course: z.lazy(() => CreateClassCourse$inboundSchema),
  org: z.lazy(() => CreateClassOrg$inboundSchema),
  subjectCodes: z.array(z.string()).optional(),
  periods: z.array(z.string()).optional(),
  resources: z.array(z.lazy(() => CreateClassResource$inboundSchema))
    .optional(),
  terms: z.array(z.lazy(() => CreateClassTerm$inboundSchema)),
});

/** @internal */
export type CreateClassClass$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  title: string;
  classCode?: string | undefined;
  classType?: string | undefined;
  location?: string | undefined;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  course: CreateClassCourse$Outbound;
  org: CreateClassOrg$Outbound;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<CreateClassResource$Outbound> | undefined;
  terms: Array<CreateClassTerm$Outbound>;
};

/** @internal */
export const CreateClassClass$outboundSchema: z.ZodType<
  CreateClassClass$Outbound,
  z.ZodTypeDef,
  CreateClassClass
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateClassStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  title: z.string(),
  classCode: z.string().optional(),
  classType: CreateClassClassType$outboundSchema.optional(),
  location: z.string().optional(),
  grades: z.array(z.string()).optional(),
  subjects: z.array(z.string()).optional(),
  course: z.lazy(() => CreateClassCourse$outboundSchema),
  org: z.lazy(() => CreateClassOrg$outboundSchema),
  subjectCodes: z.array(z.string()).optional(),
  periods: z.array(z.string()).optional(),
  resources: z.array(z.lazy(() => CreateClassResource$outboundSchema))
    .optional(),
  terms: z.array(z.lazy(() => CreateClassTerm$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassClass$ {
  /** @deprecated use `CreateClassClass$inboundSchema` instead. */
  export const inboundSchema = CreateClassClass$inboundSchema;
  /** @deprecated use `CreateClassClass$outboundSchema` instead. */
  export const outboundSchema = CreateClassClass$outboundSchema;
  /** @deprecated use `CreateClassClass$Outbound` instead. */
  export type Outbound = CreateClassClass$Outbound;
}

export function createClassClassToJSON(
  createClassClass: CreateClassClass,
): string {
  return JSON.stringify(
    CreateClassClass$outboundSchema.parse(createClassClass),
  );
}

export function createClassClassFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassClass' from JSON`,
  );
}

/** @internal */
export const CreateClassRequest$inboundSchema: z.ZodType<
  CreateClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  class: z.lazy(() => CreateClassClass$inboundSchema),
});

/** @internal */
export type CreateClassRequest$Outbound = {
  class: CreateClassClass$Outbound;
};

/** @internal */
export const CreateClassRequest$outboundSchema: z.ZodType<
  CreateClassRequest$Outbound,
  z.ZodTypeDef,
  CreateClassRequest
> = z.object({
  class: z.lazy(() => CreateClassClass$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassRequest$ {
  /** @deprecated use `CreateClassRequest$inboundSchema` instead. */
  export const inboundSchema = CreateClassRequest$inboundSchema;
  /** @deprecated use `CreateClassRequest$outboundSchema` instead. */
  export const outboundSchema = CreateClassRequest$outboundSchema;
  /** @deprecated use `CreateClassRequest$Outbound` instead. */
  export type Outbound = CreateClassRequest$Outbound;
}

export function createClassRequestToJSON(
  createClassRequest: CreateClassRequest,
): string {
  return JSON.stringify(
    CreateClassRequest$outboundSchema.parse(createClassRequest),
  );
}

export function createClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassRequest' from JSON`,
  );
}

/** @internal */
export const CreateClassSourcedIdPairs$inboundSchema: z.ZodType<
  CreateClassSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateClassSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateClassSourcedIdPairs$outboundSchema: z.ZodType<
  CreateClassSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateClassSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassSourcedIdPairs$ {
  /** @deprecated use `CreateClassSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateClassSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateClassSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateClassSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateClassSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateClassSourcedIdPairs$Outbound;
}

export function createClassSourcedIdPairsToJSON(
  createClassSourcedIdPairs: CreateClassSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateClassSourcedIdPairs$outboundSchema.parse(createClassSourcedIdPairs),
  );
}

export function createClassSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateClassResponse$inboundSchema: z.ZodType<
  CreateClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateClassSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateClassResponse$Outbound = {
  sourcedIdPairs: CreateClassSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateClassResponse$outboundSchema: z.ZodType<
  CreateClassResponse$Outbound,
  z.ZodTypeDef,
  CreateClassResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateClassSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateClassResponse$ {
  /** @deprecated use `CreateClassResponse$inboundSchema` instead. */
  export const inboundSchema = CreateClassResponse$inboundSchema;
  /** @deprecated use `CreateClassResponse$outboundSchema` instead. */
  export const outboundSchema = CreateClassResponse$outboundSchema;
  /** @deprecated use `CreateClassResponse$Outbound` instead. */
  export type Outbound = CreateClassResponse$Outbound;
}

export function createClassResponseToJSON(
  createClassResponse: CreateClassResponse,
): string {
  return JSON.stringify(
    CreateClassResponse$outboundSchema.parse(createClassResponse),
  );
}

export function createClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateClassResponse' from JSON`,
  );
}
