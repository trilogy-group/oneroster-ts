/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeleteResultRequest = {
  /**
   * The sourcedId of the result to delete
   */
  sourcedId: string;
};

/** @internal */
export const DeleteResultRequest$inboundSchema: z.ZodType<
  DeleteResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type DeleteResultRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const DeleteResultRequest$outboundSchema: z.ZodType<
  DeleteResultRequest$Outbound,
  z.ZodTypeDef,
  DeleteResultRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeleteResultRequest$ {
  /** @deprecated use `DeleteResultRequest$inboundSchema` instead. */
  export const inboundSchema = DeleteResultRequest$inboundSchema;
  /** @deprecated use `DeleteResultRequest$outboundSchema` instead. */
  export const outboundSchema = DeleteResultRequest$outboundSchema;
  /** @deprecated use `DeleteResultRequest$Outbound` instead. */
  export type Outbound = DeleteResultRequest$Outbound;
}

export function deleteResultRequestToJSON(
  deleteResultRequest: DeleteResultRequest,
): string {
  return JSON.stringify(
    DeleteResultRequest$outboundSchema.parse(deleteResultRequest),
  );
}

export function deleteResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeleteResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeleteResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeleteResultRequest' from JSON`,
  );
}
