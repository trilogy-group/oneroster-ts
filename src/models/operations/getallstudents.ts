/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const GetAllStudentsStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetAllStudentsStatus = ClosedEnum<typeof GetAllStudentsStatus>;

export type GetAllStudentsUserId = {
  type: string;
  identifier: string;
};

export const GetAllStudentsRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetAllStudentsRoleType = ClosedEnum<typeof GetAllStudentsRoleType>;

export const GetAllStudentsRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetAllStudentsRoleEnum = ClosedEnum<typeof GetAllStudentsRoleEnum>;

export type GetAllStudentsOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetAllStudentsRole = {
  roleType: GetAllStudentsRoleType;
  role: GetAllStudentsRoleEnum;
  org: GetAllStudentsOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetAllStudentsType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetAllStudentsType = ClosedEnum<typeof GetAllStudentsType>;

export type GetAllStudentsAgent = {
  href: string;
  sourcedId: string;
  type: GetAllStudentsType;
};

export type GetAllStudentsPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetAllStudentsUser = {
  sourcedId: string;
  status: GetAllStudentsStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetAllStudentsUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetAllStudentsRole>;
  agents: Array<GetAllStudentsAgent>;
  primaryOrg?: GetAllStudentsPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Successful response containing a collection of students
 */
export type GetAllStudentsResponse = {
  users: Array<GetAllStudentsUser>;
};

/** @internal */
export const GetAllStudentsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsStatus
> = z.nativeEnum(GetAllStudentsStatus);

/** @internal */
export const GetAllStudentsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsStatus
> = GetAllStudentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsStatus$ {
  /** @deprecated use `GetAllStudentsStatus$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsStatus$inboundSchema;
  /** @deprecated use `GetAllStudentsStatus$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsStatus$outboundSchema;
}

/** @internal */
export const GetAllStudentsUserId$inboundSchema: z.ZodType<
  GetAllStudentsUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetAllStudentsUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetAllStudentsUserId$outboundSchema: z.ZodType<
  GetAllStudentsUserId$Outbound,
  z.ZodTypeDef,
  GetAllStudentsUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsUserId$ {
  /** @deprecated use `GetAllStudentsUserId$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsUserId$inboundSchema;
  /** @deprecated use `GetAllStudentsUserId$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsUserId$outboundSchema;
  /** @deprecated use `GetAllStudentsUserId$Outbound` instead. */
  export type Outbound = GetAllStudentsUserId$Outbound;
}

export function getAllStudentsUserIdToJSON(
  getAllStudentsUserId: GetAllStudentsUserId,
): string {
  return JSON.stringify(
    GetAllStudentsUserId$outboundSchema.parse(getAllStudentsUserId),
  );
}

export function getAllStudentsUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsUserId' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsRoleType
> = z.nativeEnum(GetAllStudentsRoleType);

/** @internal */
export const GetAllStudentsRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsRoleType
> = GetAllStudentsRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsRoleType$ {
  /** @deprecated use `GetAllStudentsRoleType$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsRoleType$inboundSchema;
  /** @deprecated use `GetAllStudentsRoleType$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsRoleType$outboundSchema;
}

/** @internal */
export const GetAllStudentsRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsRoleEnum
> = z.nativeEnum(GetAllStudentsRoleEnum);

/** @internal */
export const GetAllStudentsRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsRoleEnum
> = GetAllStudentsRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsRoleEnum$ {
  /** @deprecated use `GetAllStudentsRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsRoleEnum$inboundSchema;
  /** @deprecated use `GetAllStudentsRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsRoleEnum$outboundSchema;
}

/** @internal */
export const GetAllStudentsOrg$inboundSchema: z.ZodType<
  GetAllStudentsOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetAllStudentsOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllStudentsOrg$outboundSchema: z.ZodType<
  GetAllStudentsOrg$Outbound,
  z.ZodTypeDef,
  GetAllStudentsOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsOrg$ {
  /** @deprecated use `GetAllStudentsOrg$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsOrg$inboundSchema;
  /** @deprecated use `GetAllStudentsOrg$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsOrg$outboundSchema;
  /** @deprecated use `GetAllStudentsOrg$Outbound` instead. */
  export type Outbound = GetAllStudentsOrg$Outbound;
}

export function getAllStudentsOrgToJSON(
  getAllStudentsOrg: GetAllStudentsOrg,
): string {
  return JSON.stringify(
    GetAllStudentsOrg$outboundSchema.parse(getAllStudentsOrg),
  );
}

export function getAllStudentsOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsOrg' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsRole$inboundSchema: z.ZodType<
  GetAllStudentsRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetAllStudentsRoleType$inboundSchema,
  role: GetAllStudentsRoleEnum$inboundSchema,
  org: z.lazy(() => GetAllStudentsOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetAllStudentsRole$Outbound = {
  roleType: string;
  role: string;
  org: GetAllStudentsOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetAllStudentsRole$outboundSchema: z.ZodType<
  GetAllStudentsRole$Outbound,
  z.ZodTypeDef,
  GetAllStudentsRole
> = z.object({
  roleType: GetAllStudentsRoleType$outboundSchema,
  role: GetAllStudentsRoleEnum$outboundSchema,
  org: z.lazy(() => GetAllStudentsOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsRole$ {
  /** @deprecated use `GetAllStudentsRole$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsRole$inboundSchema;
  /** @deprecated use `GetAllStudentsRole$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsRole$outboundSchema;
  /** @deprecated use `GetAllStudentsRole$Outbound` instead. */
  export type Outbound = GetAllStudentsRole$Outbound;
}

export function getAllStudentsRoleToJSON(
  getAllStudentsRole: GetAllStudentsRole,
): string {
  return JSON.stringify(
    GetAllStudentsRole$outboundSchema.parse(getAllStudentsRole),
  );
}

export function getAllStudentsRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsRole' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsType
> = z.nativeEnum(GetAllStudentsType);

/** @internal */
export const GetAllStudentsType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllStudentsType
> = GetAllStudentsType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsType$ {
  /** @deprecated use `GetAllStudentsType$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsType$inboundSchema;
  /** @deprecated use `GetAllStudentsType$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsType$outboundSchema;
}

/** @internal */
export const GetAllStudentsAgent$inboundSchema: z.ZodType<
  GetAllStudentsAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetAllStudentsType$inboundSchema,
});

/** @internal */
export type GetAllStudentsAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllStudentsAgent$outboundSchema: z.ZodType<
  GetAllStudentsAgent$Outbound,
  z.ZodTypeDef,
  GetAllStudentsAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetAllStudentsType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsAgent$ {
  /** @deprecated use `GetAllStudentsAgent$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsAgent$inboundSchema;
  /** @deprecated use `GetAllStudentsAgent$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsAgent$outboundSchema;
  /** @deprecated use `GetAllStudentsAgent$Outbound` instead. */
  export type Outbound = GetAllStudentsAgent$Outbound;
}

export function getAllStudentsAgentToJSON(
  getAllStudentsAgent: GetAllStudentsAgent,
): string {
  return JSON.stringify(
    GetAllStudentsAgent$outboundSchema.parse(getAllStudentsAgent),
  );
}

export function getAllStudentsAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsAgent' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsPrimaryOrg$inboundSchema: z.ZodType<
  GetAllStudentsPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetAllStudentsPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllStudentsPrimaryOrg$outboundSchema: z.ZodType<
  GetAllStudentsPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetAllStudentsPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsPrimaryOrg$ {
  /** @deprecated use `GetAllStudentsPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsPrimaryOrg$inboundSchema;
  /** @deprecated use `GetAllStudentsPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsPrimaryOrg$outboundSchema;
  /** @deprecated use `GetAllStudentsPrimaryOrg$Outbound` instead. */
  export type Outbound = GetAllStudentsPrimaryOrg$Outbound;
}

export function getAllStudentsPrimaryOrgToJSON(
  getAllStudentsPrimaryOrg: GetAllStudentsPrimaryOrg,
): string {
  return JSON.stringify(
    GetAllStudentsPrimaryOrg$outboundSchema.parse(getAllStudentsPrimaryOrg),
  );
}

export function getAllStudentsPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsUser$inboundSchema: z.ZodType<
  GetAllStudentsUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetAllStudentsStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetAllStudentsUserId$inboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetAllStudentsRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetAllStudentsAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetAllStudentsPrimaryOrg$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAllStudentsUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetAllStudentsUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetAllStudentsRole$Outbound>;
  agents: Array<GetAllStudentsAgent$Outbound>;
  primaryOrg?: GetAllStudentsPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetAllStudentsUser$outboundSchema: z.ZodType<
  GetAllStudentsUser$Outbound,
  z.ZodTypeDef,
  GetAllStudentsUser
> = z.object({
  sourcedId: z.string(),
  status: GetAllStudentsStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetAllStudentsUserId$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetAllStudentsRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetAllStudentsAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetAllStudentsPrimaryOrg$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsUser$ {
  /** @deprecated use `GetAllStudentsUser$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsUser$inboundSchema;
  /** @deprecated use `GetAllStudentsUser$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsUser$outboundSchema;
  /** @deprecated use `GetAllStudentsUser$Outbound` instead. */
  export type Outbound = GetAllStudentsUser$Outbound;
}

export function getAllStudentsUserToJSON(
  getAllStudentsUser: GetAllStudentsUser,
): string {
  return JSON.stringify(
    GetAllStudentsUser$outboundSchema.parse(getAllStudentsUser),
  );
}

export function getAllStudentsUserFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsUser' from JSON`,
  );
}

/** @internal */
export const GetAllStudentsResponse$inboundSchema: z.ZodType<
  GetAllStudentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(z.lazy(() => GetAllStudentsUser$inboundSchema)),
});

/** @internal */
export type GetAllStudentsResponse$Outbound = {
  users: Array<GetAllStudentsUser$Outbound>;
};

/** @internal */
export const GetAllStudentsResponse$outboundSchema: z.ZodType<
  GetAllStudentsResponse$Outbound,
  z.ZodTypeDef,
  GetAllStudentsResponse
> = z.object({
  users: z.array(z.lazy(() => GetAllStudentsUser$outboundSchema)),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllStudentsResponse$ {
  /** @deprecated use `GetAllStudentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllStudentsResponse$inboundSchema;
  /** @deprecated use `GetAllStudentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllStudentsResponse$outboundSchema;
  /** @deprecated use `GetAllStudentsResponse$Outbound` instead. */
  export type Outbound = GetAllStudentsResponse$Outbound;
}

export function getAllStudentsResponseToJSON(
  getAllStudentsResponse: GetAllStudentsResponse,
): string {
  return JSON.stringify(
    GetAllStudentsResponse$outboundSchema.parse(getAllStudentsResponse),
  );
}

export function getAllStudentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllStudentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllStudentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllStudentsResponse' from JSON`,
  );
}
