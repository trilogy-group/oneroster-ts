/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Demographics collection retrieved successfully
 */
export type GetAllDemographicsResponse = {
  demographics: Array<components.Demographics>;
};

/** @internal */
export const GetAllDemographicsResponse$inboundSchema: z.ZodType<
  GetAllDemographicsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  demographics: z.array(components.Demographics$inboundSchema),
});

/** @internal */
export type GetAllDemographicsResponse$Outbound = {
  demographics: Array<components.Demographics$Outbound>;
};

/** @internal */
export const GetAllDemographicsResponse$outboundSchema: z.ZodType<
  GetAllDemographicsResponse$Outbound,
  z.ZodTypeDef,
  GetAllDemographicsResponse
> = z.object({
  demographics: z.array(components.Demographics$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDemographicsResponse$ {
  /** @deprecated use `GetAllDemographicsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllDemographicsResponse$inboundSchema;
  /** @deprecated use `GetAllDemographicsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllDemographicsResponse$outboundSchema;
  /** @deprecated use `GetAllDemographicsResponse$Outbound` instead. */
  export type Outbound = GetAllDemographicsResponse$Outbound;
}

export function getAllDemographicsResponseToJSON(
  getAllDemographicsResponse: GetAllDemographicsResponse,
): string {
  return JSON.stringify(
    GetAllDemographicsResponse$outboundSchema.parse(getAllDemographicsResponse),
  );
}

export function getAllDemographicsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDemographicsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDemographicsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDemographicsResponse' from JSON`,
  );
}
