/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetClassesForSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
};

/**
 * Collection of classes successfully retrieved
 */
export type GetClassesForSchoolResponse = {
  classes: Array<components.Class>;
};

/** @internal */
export const GetClassesForSchoolRequest$inboundSchema: z.ZodType<
  GetClassesForSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
});

/** @internal */
export type GetClassesForSchoolRequest$Outbound = {
  schoolSourcedId: string;
};

/** @internal */
export const GetClassesForSchoolRequest$outboundSchema: z.ZodType<
  GetClassesForSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetClassesForSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassesForSchoolRequest$ {
  /** @deprecated use `GetClassesForSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetClassesForSchoolRequest$inboundSchema;
  /** @deprecated use `GetClassesForSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = GetClassesForSchoolRequest$outboundSchema;
  /** @deprecated use `GetClassesForSchoolRequest$Outbound` instead. */
  export type Outbound = GetClassesForSchoolRequest$Outbound;
}

export function getClassesForSchoolRequestToJSON(
  getClassesForSchoolRequest: GetClassesForSchoolRequest,
): string {
  return JSON.stringify(
    GetClassesForSchoolRequest$outboundSchema.parse(getClassesForSchoolRequest),
  );
}

export function getClassesForSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetClassesForSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassesForSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassesForSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetClassesForSchoolResponse$inboundSchema: z.ZodType<
  GetClassesForSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  classes: z.array(components.Class$inboundSchema),
});

/** @internal */
export type GetClassesForSchoolResponse$Outbound = {
  classes: Array<components.Class$Outbound>;
};

/** @internal */
export const GetClassesForSchoolResponse$outboundSchema: z.ZodType<
  GetClassesForSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetClassesForSchoolResponse
> = z.object({
  classes: z.array(components.Class$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetClassesForSchoolResponse$ {
  /** @deprecated use `GetClassesForSchoolResponse$inboundSchema` instead. */
  export const inboundSchema = GetClassesForSchoolResponse$inboundSchema;
  /** @deprecated use `GetClassesForSchoolResponse$outboundSchema` instead. */
  export const outboundSchema = GetClassesForSchoolResponse$outboundSchema;
  /** @deprecated use `GetClassesForSchoolResponse$Outbound` instead. */
  export type Outbound = GetClassesForSchoolResponse$Outbound;
}

export function getClassesForSchoolResponseToJSON(
  getClassesForSchoolResponse: GetClassesForSchoolResponse,
): string {
  return JSON.stringify(
    GetClassesForSchoolResponse$outboundSchema.parse(
      getClassesForSchoolResponse,
    ),
  );
}

export function getClassesForSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetClassesForSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetClassesForSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetClassesForSchoolResponse' from JSON`,
  );
}
