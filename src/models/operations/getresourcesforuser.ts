/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetResourcesForUserOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetResourcesForUserOrderBy = ClosedEnum<
  typeof GetResourcesForUserOrderBy
>;

export type GetResourcesForUserRequest = {
  /**
   * The sourcedId of the user
   */
  userSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetResourcesForUserOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Successful response containing a collection of resources for the user
 */
export type GetResourcesForUserResponseBody = {
  resources: Array<components.Resource>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetResourcesForUserResponse = {
  result: GetResourcesForUserResponseBody;
};

/** @internal */
export const GetResourcesForUserOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetResourcesForUserOrderBy
> = z.nativeEnum(GetResourcesForUserOrderBy);

/** @internal */
export const GetResourcesForUserOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetResourcesForUserOrderBy
> = GetResourcesForUserOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesForUserOrderBy$ {
  /** @deprecated use `GetResourcesForUserOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetResourcesForUserOrderBy$inboundSchema;
  /** @deprecated use `GetResourcesForUserOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetResourcesForUserOrderBy$outboundSchema;
}

/** @internal */
export const GetResourcesForUserRequest$inboundSchema: z.ZodType<
  GetResourcesForUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResourcesForUserOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetResourcesForUserRequest$Outbound = {
  userSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetResourcesForUserRequest$outboundSchema: z.ZodType<
  GetResourcesForUserRequest$Outbound,
  z.ZodTypeDef,
  GetResourcesForUserRequest
> = z.object({
  userSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResourcesForUserOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesForUserRequest$ {
  /** @deprecated use `GetResourcesForUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetResourcesForUserRequest$inboundSchema;
  /** @deprecated use `GetResourcesForUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetResourcesForUserRequest$outboundSchema;
  /** @deprecated use `GetResourcesForUserRequest$Outbound` instead. */
  export type Outbound = GetResourcesForUserRequest$Outbound;
}

export function getResourcesForUserRequestToJSON(
  getResourcesForUserRequest: GetResourcesForUserRequest,
): string {
  return JSON.stringify(
    GetResourcesForUserRequest$outboundSchema.parse(getResourcesForUserRequest),
  );
}

export function getResourcesForUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesForUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesForUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesForUserRequest' from JSON`,
  );
}

/** @internal */
export const GetResourcesForUserResponseBody$inboundSchema: z.ZodType<
  GetResourcesForUserResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resources: z.array(components.Resource$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetResourcesForUserResponseBody$Outbound = {
  resources: Array<components.Resource$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetResourcesForUserResponseBody$outboundSchema: z.ZodType<
  GetResourcesForUserResponseBody$Outbound,
  z.ZodTypeDef,
  GetResourcesForUserResponseBody
> = z.object({
  resources: z.array(components.Resource$outboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesForUserResponseBody$ {
  /** @deprecated use `GetResourcesForUserResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetResourcesForUserResponseBody$inboundSchema;
  /** @deprecated use `GetResourcesForUserResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetResourcesForUserResponseBody$outboundSchema;
  /** @deprecated use `GetResourcesForUserResponseBody$Outbound` instead. */
  export type Outbound = GetResourcesForUserResponseBody$Outbound;
}

export function getResourcesForUserResponseBodyToJSON(
  getResourcesForUserResponseBody: GetResourcesForUserResponseBody,
): string {
  return JSON.stringify(
    GetResourcesForUserResponseBody$outboundSchema.parse(
      getResourcesForUserResponseBody,
    ),
  );
}

export function getResourcesForUserResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesForUserResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesForUserResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesForUserResponseBody' from JSON`,
  );
}

/** @internal */
export const GetResourcesForUserResponse$inboundSchema: z.ZodType<
  GetResourcesForUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetResourcesForUserResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetResourcesForUserResponse$Outbound = {
  Result: GetResourcesForUserResponseBody$Outbound;
};

/** @internal */
export const GetResourcesForUserResponse$outboundSchema: z.ZodType<
  GetResourcesForUserResponse$Outbound,
  z.ZodTypeDef,
  GetResourcesForUserResponse
> = z.object({
  result: z.lazy(() => GetResourcesForUserResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResourcesForUserResponse$ {
  /** @deprecated use `GetResourcesForUserResponse$inboundSchema` instead. */
  export const inboundSchema = GetResourcesForUserResponse$inboundSchema;
  /** @deprecated use `GetResourcesForUserResponse$outboundSchema` instead. */
  export const outboundSchema = GetResourcesForUserResponse$outboundSchema;
  /** @deprecated use `GetResourcesForUserResponse$Outbound` instead. */
  export type Outbound = GetResourcesForUserResponse$Outbound;
}

export function getResourcesForUserResponseToJSON(
  getResourcesForUserResponse: GetResourcesForUserResponse,
): string {
  return JSON.stringify(
    GetResourcesForUserResponse$outboundSchema.parse(
      getResourcesForUserResponse,
    ),
  );
}

export function getResourcesForUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResourcesForUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResourcesForUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResourcesForUserResponse' from JSON`,
  );
}
