/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetStudentsForSchoolOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetStudentsForSchoolOrderBy = ClosedEnum<
  typeof GetStudentsForSchoolOrderBy
>;

export type GetStudentsForSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetStudentsForSchoolOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetStudentsForSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetStudentsForSchoolStatus = ClosedEnum<
  typeof GetStudentsForSchoolStatus
>;

export type GetStudentsForSchoolUserId = {
  type: string;
  identifier: string;
};

export const GetStudentsForSchoolRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetStudentsForSchoolRoleType = ClosedEnum<
  typeof GetStudentsForSchoolRoleType
>;

export const GetStudentsForSchoolRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetStudentsForSchoolRoleEnum = ClosedEnum<
  typeof GetStudentsForSchoolRoleEnum
>;

export type GetStudentsForSchoolOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetStudentsForSchoolRole = {
  roleType: GetStudentsForSchoolRoleType;
  role: GetStudentsForSchoolRoleEnum;
  org: GetStudentsForSchoolOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetStudentsForSchoolType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetStudentsForSchoolType = ClosedEnum<
  typeof GetStudentsForSchoolType
>;

export type GetStudentsForSchoolAgent = {
  href: string;
  sourcedId: string;
  type: GetStudentsForSchoolType;
};

export type GetStudentsForSchoolPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetStudentsForSchoolUser = {
  sourcedId: string;
  status: GetStudentsForSchoolStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetStudentsForSchoolUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetStudentsForSchoolRole>;
  agents: Array<GetStudentsForSchoolAgent>;
  primaryOrg?: GetStudentsForSchoolPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Collection of students successfully retrieved
 */
export type GetStudentsForSchoolResponseBody = {
  users: Array<GetStudentsForSchoolUser>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetStudentsForSchoolResponse = {
  result: GetStudentsForSchoolResponseBody;
};

/** @internal */
export const GetStudentsForSchoolOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolOrderBy
> = z.nativeEnum(GetStudentsForSchoolOrderBy);

/** @internal */
export const GetStudentsForSchoolOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolOrderBy
> = GetStudentsForSchoolOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolOrderBy$ {
  /** @deprecated use `GetStudentsForSchoolOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolOrderBy$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolOrderBy$outboundSchema;
}

/** @internal */
export const GetStudentsForSchoolRequest$inboundSchema: z.ZodType<
  GetStudentsForSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetStudentsForSchoolOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetStudentsForSchoolRequest$Outbound = {
  schoolSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetStudentsForSchoolRequest$outboundSchema: z.ZodType<
  GetStudentsForSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetStudentsForSchoolOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolRequest$ {
  /** @deprecated use `GetStudentsForSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolRequest$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolRequest$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolRequest$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolRequest$Outbound;
}

export function getStudentsForSchoolRequestToJSON(
  getStudentsForSchoolRequest: GetStudentsForSchoolRequest,
): string {
  return JSON.stringify(
    GetStudentsForSchoolRequest$outboundSchema.parse(
      getStudentsForSchoolRequest,
    ),
  );
}

export function getStudentsForSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolStatus
> = z.nativeEnum(GetStudentsForSchoolStatus);

/** @internal */
export const GetStudentsForSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolStatus
> = GetStudentsForSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolStatus$ {
  /** @deprecated use `GetStudentsForSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolStatus$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolStatus$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolStatus$outboundSchema;
}

/** @internal */
export const GetStudentsForSchoolUserId$inboundSchema: z.ZodType<
  GetStudentsForSchoolUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetStudentsForSchoolUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetStudentsForSchoolUserId$outboundSchema: z.ZodType<
  GetStudentsForSchoolUserId$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolUserId$ {
  /** @deprecated use `GetStudentsForSchoolUserId$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolUserId$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolUserId$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolUserId$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolUserId$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolUserId$Outbound;
}

export function getStudentsForSchoolUserIdToJSON(
  getStudentsForSchoolUserId: GetStudentsForSchoolUserId,
): string {
  return JSON.stringify(
    GetStudentsForSchoolUserId$outboundSchema.parse(getStudentsForSchoolUserId),
  );
}

export function getStudentsForSchoolUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolUserId' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolRoleType
> = z.nativeEnum(GetStudentsForSchoolRoleType);

/** @internal */
export const GetStudentsForSchoolRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolRoleType
> = GetStudentsForSchoolRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolRoleType$ {
  /** @deprecated use `GetStudentsForSchoolRoleType$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolRoleType$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolRoleType$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolRoleType$outboundSchema;
}

/** @internal */
export const GetStudentsForSchoolRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolRoleEnum
> = z.nativeEnum(GetStudentsForSchoolRoleEnum);

/** @internal */
export const GetStudentsForSchoolRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolRoleEnum
> = GetStudentsForSchoolRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolRoleEnum$ {
  /** @deprecated use `GetStudentsForSchoolRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolRoleEnum$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolRoleEnum$outboundSchema;
}

/** @internal */
export const GetStudentsForSchoolOrg$inboundSchema: z.ZodType<
  GetStudentsForSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStudentsForSchoolOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentsForSchoolOrg$outboundSchema: z.ZodType<
  GetStudentsForSchoolOrg$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolOrg$ {
  /** @deprecated use `GetStudentsForSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolOrg$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolOrg$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolOrg$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolOrg$Outbound;
}

export function getStudentsForSchoolOrgToJSON(
  getStudentsForSchoolOrg: GetStudentsForSchoolOrg,
): string {
  return JSON.stringify(
    GetStudentsForSchoolOrg$outboundSchema.parse(getStudentsForSchoolOrg),
  );
}

export function getStudentsForSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolOrg' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolRole$inboundSchema: z.ZodType<
  GetStudentsForSchoolRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetStudentsForSchoolRoleType$inboundSchema,
  role: GetStudentsForSchoolRoleEnum$inboundSchema,
  org: z.lazy(() => GetStudentsForSchoolOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetStudentsForSchoolRole$Outbound = {
  roleType: string;
  role: string;
  org: GetStudentsForSchoolOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetStudentsForSchoolRole$outboundSchema: z.ZodType<
  GetStudentsForSchoolRole$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolRole
> = z.object({
  roleType: GetStudentsForSchoolRoleType$outboundSchema,
  role: GetStudentsForSchoolRoleEnum$outboundSchema,
  org: z.lazy(() => GetStudentsForSchoolOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolRole$ {
  /** @deprecated use `GetStudentsForSchoolRole$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolRole$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolRole$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolRole$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolRole$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolRole$Outbound;
}

export function getStudentsForSchoolRoleToJSON(
  getStudentsForSchoolRole: GetStudentsForSchoolRole,
): string {
  return JSON.stringify(
    GetStudentsForSchoolRole$outboundSchema.parse(getStudentsForSchoolRole),
  );
}

export function getStudentsForSchoolRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolRole' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolType$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolType
> = z.nativeEnum(GetStudentsForSchoolType);

/** @internal */
export const GetStudentsForSchoolType$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentsForSchoolType
> = GetStudentsForSchoolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolType$ {
  /** @deprecated use `GetStudentsForSchoolType$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolType$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolType$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolType$outboundSchema;
}

/** @internal */
export const GetStudentsForSchoolAgent$inboundSchema: z.ZodType<
  GetStudentsForSchoolAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetStudentsForSchoolType$inboundSchema,
});

/** @internal */
export type GetStudentsForSchoolAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentsForSchoolAgent$outboundSchema: z.ZodType<
  GetStudentsForSchoolAgent$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetStudentsForSchoolType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolAgent$ {
  /** @deprecated use `GetStudentsForSchoolAgent$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolAgent$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolAgent$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolAgent$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolAgent$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolAgent$Outbound;
}

export function getStudentsForSchoolAgentToJSON(
  getStudentsForSchoolAgent: GetStudentsForSchoolAgent,
): string {
  return JSON.stringify(
    GetStudentsForSchoolAgent$outboundSchema.parse(getStudentsForSchoolAgent),
  );
}

export function getStudentsForSchoolAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolAgent' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolPrimaryOrg$inboundSchema: z.ZodType<
  GetStudentsForSchoolPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStudentsForSchoolPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentsForSchoolPrimaryOrg$outboundSchema: z.ZodType<
  GetStudentsForSchoolPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolPrimaryOrg$ {
  /** @deprecated use `GetStudentsForSchoolPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolPrimaryOrg$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolPrimaryOrg$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolPrimaryOrg$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolPrimaryOrg$Outbound;
}

export function getStudentsForSchoolPrimaryOrgToJSON(
  getStudentsForSchoolPrimaryOrg: GetStudentsForSchoolPrimaryOrg,
): string {
  return JSON.stringify(
    GetStudentsForSchoolPrimaryOrg$outboundSchema.parse(
      getStudentsForSchoolPrimaryOrg,
    ),
  );
}

export function getStudentsForSchoolPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolUser$inboundSchema: z.ZodType<
  GetStudentsForSchoolUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetStudentsForSchoolStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetStudentsForSchoolUserId$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetStudentsForSchoolRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetStudentsForSchoolAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetStudentsForSchoolPrimaryOrg$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetStudentsForSchoolUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetStudentsForSchoolUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetStudentsForSchoolRole$Outbound>;
  agents: Array<GetStudentsForSchoolAgent$Outbound>;
  primaryOrg?: GetStudentsForSchoolPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetStudentsForSchoolUser$outboundSchema: z.ZodType<
  GetStudentsForSchoolUser$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolUser
> = z.object({
  sourcedId: z.string(),
  status: GetStudentsForSchoolStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetStudentsForSchoolUserId$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetStudentsForSchoolRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetStudentsForSchoolAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetStudentsForSchoolPrimaryOrg$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolUser$ {
  /** @deprecated use `GetStudentsForSchoolUser$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolUser$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolUser$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolUser$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolUser$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolUser$Outbound;
}

export function getStudentsForSchoolUserToJSON(
  getStudentsForSchoolUser: GetStudentsForSchoolUser,
): string {
  return JSON.stringify(
    GetStudentsForSchoolUser$outboundSchema.parse(getStudentsForSchoolUser),
  );
}

export function getStudentsForSchoolUserFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolUser' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolResponseBody$inboundSchema: z.ZodType<
  GetStudentsForSchoolResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(z.lazy(() => GetStudentsForSchoolUser$inboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetStudentsForSchoolResponseBody$Outbound = {
  users: Array<GetStudentsForSchoolUser$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetStudentsForSchoolResponseBody$outboundSchema: z.ZodType<
  GetStudentsForSchoolResponseBody$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolResponseBody
> = z.object({
  users: z.array(z.lazy(() => GetStudentsForSchoolUser$outboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolResponseBody$ {
  /** @deprecated use `GetStudentsForSchoolResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolResponseBody$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolResponseBody$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolResponseBody$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolResponseBody$Outbound;
}

export function getStudentsForSchoolResponseBodyToJSON(
  getStudentsForSchoolResponseBody: GetStudentsForSchoolResponseBody,
): string {
  return JSON.stringify(
    GetStudentsForSchoolResponseBody$outboundSchema.parse(
      getStudentsForSchoolResponseBody,
    ),
  );
}

export function getStudentsForSchoolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolResponseBody' from JSON`,
  );
}

/** @internal */
export const GetStudentsForSchoolResponse$inboundSchema: z.ZodType<
  GetStudentsForSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetStudentsForSchoolResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetStudentsForSchoolResponse$Outbound = {
  Result: GetStudentsForSchoolResponseBody$Outbound;
};

/** @internal */
export const GetStudentsForSchoolResponse$outboundSchema: z.ZodType<
  GetStudentsForSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetStudentsForSchoolResponse
> = z.object({
  result: z.lazy(() => GetStudentsForSchoolResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentsForSchoolResponse$ {
  /** @deprecated use `GetStudentsForSchoolResponse$inboundSchema` instead. */
  export const inboundSchema = GetStudentsForSchoolResponse$inboundSchema;
  /** @deprecated use `GetStudentsForSchoolResponse$outboundSchema` instead. */
  export const outboundSchema = GetStudentsForSchoolResponse$outboundSchema;
  /** @deprecated use `GetStudentsForSchoolResponse$Outbound` instead. */
  export type Outbound = GetStudentsForSchoolResponse$Outbound;
}

export function getStudentsForSchoolResponseToJSON(
  getStudentsForSchoolResponse: GetStudentsForSchoolResponse,
): string {
  return JSON.stringify(
    GetStudentsForSchoolResponse$outboundSchema.parse(
      getStudentsForSchoolResponse,
    ),
  );
}

export function getStudentsForSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentsForSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentsForSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentsForSchoolResponse' from JSON`,
  );
}
