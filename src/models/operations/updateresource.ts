/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateResourceStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateResourceStatus = ClosedEnum<typeof UpdateResourceStatus>;

export const UpdateResourceRole = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type UpdateResourceRole = ClosedEnum<typeof UpdateResourceRole>;

export const UpdateResourceImportance = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type UpdateResourceImportance = ClosedEnum<
  typeof UpdateResourceImportance
>;

export type UpdateResourceResource = {
  sourcedId?: string | undefined;
  status?: UpdateResourceStatus | undefined;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<UpdateResourceRole> | undefined;
  importance?: UpdateResourceImportance | undefined;
  vendorResourceId: string;
  vendorId?: string | undefined;
  applicationId?: string | undefined;
};

export type UpdateResourceRequestBody = {
  resource: UpdateResourceResource;
};

export type UpdateResourceRequest = {
  /**
   * The sourcedId of the resource to update
   */
  sourcedId: string;
  requestBody: UpdateResourceRequestBody;
};

/** @internal */
export const UpdateResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceStatus
> = z.nativeEnum(UpdateResourceStatus);

/** @internal */
export const UpdateResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceStatus
> = UpdateResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceStatus$ {
  /** @deprecated use `UpdateResourceStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceStatus$inboundSchema;
  /** @deprecated use `UpdateResourceStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceStatus$outboundSchema;
}

/** @internal */
export const UpdateResourceRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceRole
> = z.nativeEnum(UpdateResourceRole);

/** @internal */
export const UpdateResourceRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceRole
> = UpdateResourceRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceRole$ {
  /** @deprecated use `UpdateResourceRole$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceRole$inboundSchema;
  /** @deprecated use `UpdateResourceRole$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceRole$outboundSchema;
}

/** @internal */
export const UpdateResourceImportance$inboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceImportance
> = z.nativeEnum(UpdateResourceImportance);

/** @internal */
export const UpdateResourceImportance$outboundSchema: z.ZodNativeEnum<
  typeof UpdateResourceImportance
> = UpdateResourceImportance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceImportance$ {
  /** @deprecated use `UpdateResourceImportance$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceImportance$inboundSchema;
  /** @deprecated use `UpdateResourceImportance$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceImportance$outboundSchema;
}

/** @internal */
export const UpdateResourceResource$inboundSchema: z.ZodType<
  UpdateResourceResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateResourceStatus$inboundSchema.optional(),
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(UpdateResourceRole$inboundSchema).optional(),
  importance: UpdateResourceImportance$inboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.string().optional(),
  applicationId: z.string().optional(),
});

/** @internal */
export type UpdateResourceResource$Outbound = {
  sourcedId?: string | undefined;
  status?: string | undefined;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<string> | undefined;
  importance?: string | undefined;
  vendorResourceId: string;
  vendorId?: string | undefined;
  applicationId?: string | undefined;
};

/** @internal */
export const UpdateResourceResource$outboundSchema: z.ZodType<
  UpdateResourceResource$Outbound,
  z.ZodTypeDef,
  UpdateResourceResource
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateResourceStatus$outboundSchema.optional(),
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(UpdateResourceRole$outboundSchema).optional(),
  importance: UpdateResourceImportance$outboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.string().optional(),
  applicationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceResource$ {
  /** @deprecated use `UpdateResourceResource$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceResource$inboundSchema;
  /** @deprecated use `UpdateResourceResource$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceResource$outboundSchema;
  /** @deprecated use `UpdateResourceResource$Outbound` instead. */
  export type Outbound = UpdateResourceResource$Outbound;
}

export function updateResourceResourceToJSON(
  updateResourceResource: UpdateResourceResource,
): string {
  return JSON.stringify(
    UpdateResourceResource$outboundSchema.parse(updateResourceResource),
  );
}

export function updateResourceResourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceResource' from JSON`,
  );
}

/** @internal */
export const UpdateResourceRequestBody$inboundSchema: z.ZodType<
  UpdateResourceRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.lazy(() => UpdateResourceResource$inboundSchema),
});

/** @internal */
export type UpdateResourceRequestBody$Outbound = {
  resource: UpdateResourceResource$Outbound;
};

/** @internal */
export const UpdateResourceRequestBody$outboundSchema: z.ZodType<
  UpdateResourceRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResourceRequestBody
> = z.object({
  resource: z.lazy(() => UpdateResourceResource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceRequestBody$ {
  /** @deprecated use `UpdateResourceRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceRequestBody$inboundSchema;
  /** @deprecated use `UpdateResourceRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceRequestBody$outboundSchema;
  /** @deprecated use `UpdateResourceRequestBody$Outbound` instead. */
  export type Outbound = UpdateResourceRequestBody$Outbound;
}

export function updateResourceRequestBodyToJSON(
  updateResourceRequestBody: UpdateResourceRequestBody,
): string {
  return JSON.stringify(
    UpdateResourceRequestBody$outboundSchema.parse(updateResourceRequestBody),
  );
}

export function updateResourceRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResourceRequest$inboundSchema: z.ZodType<
  UpdateResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateResourceRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResourceRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateResourceRequestBody$Outbound;
};

/** @internal */
export const UpdateResourceRequest$outboundSchema: z.ZodType<
  UpdateResourceRequest$Outbound,
  z.ZodTypeDef,
  UpdateResourceRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateResourceRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResourceRequest$ {
  /** @deprecated use `UpdateResourceRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResourceRequest$inboundSchema;
  /** @deprecated use `UpdateResourceRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResourceRequest$outboundSchema;
  /** @deprecated use `UpdateResourceRequest$Outbound` instead. */
  export type Outbound = UpdateResourceRequest$Outbound;
}

export function updateResourceRequestToJSON(
  updateResourceRequest: UpdateResourceRequest,
): string {
  return JSON.stringify(
    UpdateResourceRequest$outboundSchema.parse(updateResourceRequest),
  );
}

export function updateResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResourceRequest' from JSON`,
  );
}
