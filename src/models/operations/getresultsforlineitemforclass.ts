/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetResultsForLineItemForClassOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetResultsForLineItemForClassOrderBy = ClosedEnum<
  typeof GetResultsForLineItemForClassOrderBy
>;

export type GetResultsForLineItemForClassRequest = {
  /**
   * The sourcedId of the class
   */
  classSourcedId: string;
  /**
   * The sourcedId of the line item
   */
  lineItemSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetResultsForLineItemForClassOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Successful response containing a collection of results for the specified line item in the class
 */
export type GetResultsForLineItemForClassResponseBody = {
  results: Array<components.Result>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetResultsForLineItemForClassResponse = {
  result: GetResultsForLineItemForClassResponseBody;
};

/** @internal */
export const GetResultsForLineItemForClassOrderBy$inboundSchema:
  z.ZodNativeEnum<typeof GetResultsForLineItemForClassOrderBy> = z.nativeEnum(
    GetResultsForLineItemForClassOrderBy,
  );

/** @internal */
export const GetResultsForLineItemForClassOrderBy$outboundSchema:
  z.ZodNativeEnum<typeof GetResultsForLineItemForClassOrderBy> =
    GetResultsForLineItemForClassOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForLineItemForClassOrderBy$ {
  /** @deprecated use `GetResultsForLineItemForClassOrderBy$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForLineItemForClassOrderBy$inboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassOrderBy$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForLineItemForClassOrderBy$outboundSchema;
}

/** @internal */
export const GetResultsForLineItemForClassRequest$inboundSchema: z.ZodType<
  GetResultsForLineItemForClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  classSourcedId: z.string(),
  lineItemSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResultsForLineItemForClassOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetResultsForLineItemForClassRequest$Outbound = {
  classSourcedId: string;
  lineItemSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetResultsForLineItemForClassRequest$outboundSchema: z.ZodType<
  GetResultsForLineItemForClassRequest$Outbound,
  z.ZodTypeDef,
  GetResultsForLineItemForClassRequest
> = z.object({
  classSourcedId: z.string(),
  lineItemSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResultsForLineItemForClassOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForLineItemForClassRequest$ {
  /** @deprecated use `GetResultsForLineItemForClassRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForLineItemForClassRequest$inboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForLineItemForClassRequest$outboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassRequest$Outbound` instead. */
  export type Outbound = GetResultsForLineItemForClassRequest$Outbound;
}

export function getResultsForLineItemForClassRequestToJSON(
  getResultsForLineItemForClassRequest: GetResultsForLineItemForClassRequest,
): string {
  return JSON.stringify(
    GetResultsForLineItemForClassRequest$outboundSchema.parse(
      getResultsForLineItemForClassRequest,
    ),
  );
}

export function getResultsForLineItemForClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForLineItemForClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForLineItemForClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForLineItemForClassRequest' from JSON`,
  );
}

/** @internal */
export const GetResultsForLineItemForClassResponseBody$inboundSchema: z.ZodType<
  GetResultsForLineItemForClassResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(components.Result$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetResultsForLineItemForClassResponseBody$Outbound = {
  results: Array<components.Result$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetResultsForLineItemForClassResponseBody$outboundSchema:
  z.ZodType<
    GetResultsForLineItemForClassResponseBody$Outbound,
    z.ZodTypeDef,
    GetResultsForLineItemForClassResponseBody
  > = z.object({
    results: z.array(components.Result$outboundSchema),
    totalCount: z.number(),
    pageCount: z.number(),
    pageNumber: z.number(),
    offset: z.number(),
    limit: z.number(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForLineItemForClassResponseBody$ {
  /** @deprecated use `GetResultsForLineItemForClassResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForLineItemForClassResponseBody$inboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForLineItemForClassResponseBody$outboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassResponseBody$Outbound` instead. */
  export type Outbound = GetResultsForLineItemForClassResponseBody$Outbound;
}

export function getResultsForLineItemForClassResponseBodyToJSON(
  getResultsForLineItemForClassResponseBody:
    GetResultsForLineItemForClassResponseBody,
): string {
  return JSON.stringify(
    GetResultsForLineItemForClassResponseBody$outboundSchema.parse(
      getResultsForLineItemForClassResponseBody,
    ),
  );
}

export function getResultsForLineItemForClassResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetResultsForLineItemForClassResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForLineItemForClassResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetResultsForLineItemForClassResponseBody' from JSON`,
  );
}

/** @internal */
export const GetResultsForLineItemForClassResponse$inboundSchema: z.ZodType<
  GetResultsForLineItemForClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetResultsForLineItemForClassResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetResultsForLineItemForClassResponse$Outbound = {
  Result: GetResultsForLineItemForClassResponseBody$Outbound;
};

/** @internal */
export const GetResultsForLineItemForClassResponse$outboundSchema: z.ZodType<
  GetResultsForLineItemForClassResponse$Outbound,
  z.ZodTypeDef,
  GetResultsForLineItemForClassResponse
> = z.object({
  result: z.lazy(() =>
    GetResultsForLineItemForClassResponseBody$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForLineItemForClassResponse$ {
  /** @deprecated use `GetResultsForLineItemForClassResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForLineItemForClassResponse$inboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForLineItemForClassResponse$outboundSchema;
  /** @deprecated use `GetResultsForLineItemForClassResponse$Outbound` instead. */
  export type Outbound = GetResultsForLineItemForClassResponse$Outbound;
}

export function getResultsForLineItemForClassResponseToJSON(
  getResultsForLineItemForClassResponse: GetResultsForLineItemForClassResponse,
): string {
  return JSON.stringify(
    GetResultsForLineItemForClassResponse$outboundSchema.parse(
      getResultsForLineItemForClassResponse,
    ),
  );
}

export function getResultsForLineItemForClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForLineItemForClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForLineItemForClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForLineItemForClassResponse' from JSON`,
  );
}
