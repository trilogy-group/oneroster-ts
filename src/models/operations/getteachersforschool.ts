/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetTeachersForSchoolOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetTeachersForSchoolOrderBy = ClosedEnum<
  typeof GetTeachersForSchoolOrderBy
>;

export type GetTeachersForSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetTeachersForSchoolOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetTeachersForSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetTeachersForSchoolStatus = ClosedEnum<
  typeof GetTeachersForSchoolStatus
>;

export type GetTeachersForSchoolUserId = {
  type: string;
  identifier: string;
};

export const GetTeachersForSchoolRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetTeachersForSchoolRoleType = ClosedEnum<
  typeof GetTeachersForSchoolRoleType
>;

export const GetTeachersForSchoolRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetTeachersForSchoolRoleEnum = ClosedEnum<
  typeof GetTeachersForSchoolRoleEnum
>;

export type GetTeachersForSchoolOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeachersForSchoolRole = {
  roleType: GetTeachersForSchoolRoleType;
  role: GetTeachersForSchoolRoleEnum;
  org: GetTeachersForSchoolOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetTeachersForSchoolType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetTeachersForSchoolType = ClosedEnum<
  typeof GetTeachersForSchoolType
>;

export type GetTeachersForSchoolAgent = {
  href: string;
  sourcedId: string;
  type: GetTeachersForSchoolType;
};

export type GetTeachersForSchoolPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeachersForSchoolUser = {
  sourcedId: string;
  status: GetTeachersForSchoolStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeachersForSchoolUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeachersForSchoolRole>;
  agents: Array<GetTeachersForSchoolAgent>;
  primaryOrg?: GetTeachersForSchoolPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Collection of teachers successfully retrieved
 */
export type GetTeachersForSchoolResponseBody = {
  users: Array<GetTeachersForSchoolUser>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetTeachersForSchoolResponse = {
  result: GetTeachersForSchoolResponseBody;
};

/** @internal */
export const GetTeachersForSchoolOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolOrderBy
> = z.nativeEnum(GetTeachersForSchoolOrderBy);

/** @internal */
export const GetTeachersForSchoolOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolOrderBy
> = GetTeachersForSchoolOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolOrderBy$ {
  /** @deprecated use `GetTeachersForSchoolOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolOrderBy$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolOrderBy$outboundSchema;
}

/** @internal */
export const GetTeachersForSchoolRequest$inboundSchema: z.ZodType<
  GetTeachersForSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetTeachersForSchoolOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetTeachersForSchoolRequest$Outbound = {
  schoolSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetTeachersForSchoolRequest$outboundSchema: z.ZodType<
  GetTeachersForSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetTeachersForSchoolOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolRequest$ {
  /** @deprecated use `GetTeachersForSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolRequest$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolRequest$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolRequest$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolRequest$Outbound;
}

export function getTeachersForSchoolRequestToJSON(
  getTeachersForSchoolRequest: GetTeachersForSchoolRequest,
): string {
  return JSON.stringify(
    GetTeachersForSchoolRequest$outboundSchema.parse(
      getTeachersForSchoolRequest,
    ),
  );
}

export function getTeachersForSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolStatus
> = z.nativeEnum(GetTeachersForSchoolStatus);

/** @internal */
export const GetTeachersForSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolStatus
> = GetTeachersForSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolStatus$ {
  /** @deprecated use `GetTeachersForSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolStatus$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolStatus$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolStatus$outboundSchema;
}

/** @internal */
export const GetTeachersForSchoolUserId$inboundSchema: z.ZodType<
  GetTeachersForSchoolUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetTeachersForSchoolUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetTeachersForSchoolUserId$outboundSchema: z.ZodType<
  GetTeachersForSchoolUserId$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolUserId$ {
  /** @deprecated use `GetTeachersForSchoolUserId$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolUserId$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolUserId$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolUserId$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolUserId$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolUserId$Outbound;
}

export function getTeachersForSchoolUserIdToJSON(
  getTeachersForSchoolUserId: GetTeachersForSchoolUserId,
): string {
  return JSON.stringify(
    GetTeachersForSchoolUserId$outboundSchema.parse(getTeachersForSchoolUserId),
  );
}

export function getTeachersForSchoolUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolUserId' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolRoleType
> = z.nativeEnum(GetTeachersForSchoolRoleType);

/** @internal */
export const GetTeachersForSchoolRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolRoleType
> = GetTeachersForSchoolRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolRoleType$ {
  /** @deprecated use `GetTeachersForSchoolRoleType$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolRoleType$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolRoleType$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolRoleType$outboundSchema;
}

/** @internal */
export const GetTeachersForSchoolRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolRoleEnum
> = z.nativeEnum(GetTeachersForSchoolRoleEnum);

/** @internal */
export const GetTeachersForSchoolRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolRoleEnum
> = GetTeachersForSchoolRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolRoleEnum$ {
  /** @deprecated use `GetTeachersForSchoolRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolRoleEnum$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolRoleEnum$outboundSchema;
}

/** @internal */
export const GetTeachersForSchoolOrg$inboundSchema: z.ZodType<
  GetTeachersForSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeachersForSchoolOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForSchoolOrg$outboundSchema: z.ZodType<
  GetTeachersForSchoolOrg$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolOrg$ {
  /** @deprecated use `GetTeachersForSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolOrg$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolOrg$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolOrg$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolOrg$Outbound;
}

export function getTeachersForSchoolOrgToJSON(
  getTeachersForSchoolOrg: GetTeachersForSchoolOrg,
): string {
  return JSON.stringify(
    GetTeachersForSchoolOrg$outboundSchema.parse(getTeachersForSchoolOrg),
  );
}

export function getTeachersForSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolOrg' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolRole$inboundSchema: z.ZodType<
  GetTeachersForSchoolRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetTeachersForSchoolRoleType$inboundSchema,
  role: GetTeachersForSchoolRoleEnum$inboundSchema,
  org: z.lazy(() => GetTeachersForSchoolOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetTeachersForSchoolRole$Outbound = {
  roleType: string;
  role: string;
  org: GetTeachersForSchoolOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetTeachersForSchoolRole$outboundSchema: z.ZodType<
  GetTeachersForSchoolRole$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolRole
> = z.object({
  roleType: GetTeachersForSchoolRoleType$outboundSchema,
  role: GetTeachersForSchoolRoleEnum$outboundSchema,
  org: z.lazy(() => GetTeachersForSchoolOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolRole$ {
  /** @deprecated use `GetTeachersForSchoolRole$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolRole$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolRole$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolRole$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolRole$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolRole$Outbound;
}

export function getTeachersForSchoolRoleToJSON(
  getTeachersForSchoolRole: GetTeachersForSchoolRole,
): string {
  return JSON.stringify(
    GetTeachersForSchoolRole$outboundSchema.parse(getTeachersForSchoolRole),
  );
}

export function getTeachersForSchoolRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolRole' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolType
> = z.nativeEnum(GetTeachersForSchoolType);

/** @internal */
export const GetTeachersForSchoolType$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForSchoolType
> = GetTeachersForSchoolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolType$ {
  /** @deprecated use `GetTeachersForSchoolType$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolType$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolType$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolType$outboundSchema;
}

/** @internal */
export const GetTeachersForSchoolAgent$inboundSchema: z.ZodType<
  GetTeachersForSchoolAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeachersForSchoolType$inboundSchema,
});

/** @internal */
export type GetTeachersForSchoolAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForSchoolAgent$outboundSchema: z.ZodType<
  GetTeachersForSchoolAgent$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeachersForSchoolType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolAgent$ {
  /** @deprecated use `GetTeachersForSchoolAgent$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolAgent$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolAgent$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolAgent$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolAgent$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolAgent$Outbound;
}

export function getTeachersForSchoolAgentToJSON(
  getTeachersForSchoolAgent: GetTeachersForSchoolAgent,
): string {
  return JSON.stringify(
    GetTeachersForSchoolAgent$outboundSchema.parse(getTeachersForSchoolAgent),
  );
}

export function getTeachersForSchoolAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolAgent' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolPrimaryOrg$inboundSchema: z.ZodType<
  GetTeachersForSchoolPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeachersForSchoolPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForSchoolPrimaryOrg$outboundSchema: z.ZodType<
  GetTeachersForSchoolPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolPrimaryOrg$ {
  /** @deprecated use `GetTeachersForSchoolPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolPrimaryOrg$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolPrimaryOrg$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolPrimaryOrg$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolPrimaryOrg$Outbound;
}

export function getTeachersForSchoolPrimaryOrgToJSON(
  getTeachersForSchoolPrimaryOrg: GetTeachersForSchoolPrimaryOrg,
): string {
  return JSON.stringify(
    GetTeachersForSchoolPrimaryOrg$outboundSchema.parse(
      getTeachersForSchoolPrimaryOrg,
    ),
  );
}

export function getTeachersForSchoolPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolUser$inboundSchema: z.ZodType<
  GetTeachersForSchoolUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetTeachersForSchoolStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetTeachersForSchoolUserId$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeachersForSchoolRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetTeachersForSchoolAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetTeachersForSchoolPrimaryOrg$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetTeachersForSchoolUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeachersForSchoolUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeachersForSchoolRole$Outbound>;
  agents: Array<GetTeachersForSchoolAgent$Outbound>;
  primaryOrg?: GetTeachersForSchoolPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetTeachersForSchoolUser$outboundSchema: z.ZodType<
  GetTeachersForSchoolUser$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolUser
> = z.object({
  sourcedId: z.string(),
  status: GetTeachersForSchoolStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetTeachersForSchoolUserId$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeachersForSchoolRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetTeachersForSchoolAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetTeachersForSchoolPrimaryOrg$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolUser$ {
  /** @deprecated use `GetTeachersForSchoolUser$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolUser$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolUser$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolUser$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolUser$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolUser$Outbound;
}

export function getTeachersForSchoolUserToJSON(
  getTeachersForSchoolUser: GetTeachersForSchoolUser,
): string {
  return JSON.stringify(
    GetTeachersForSchoolUser$outboundSchema.parse(getTeachersForSchoolUser),
  );
}

export function getTeachersForSchoolUserFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolUser' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolResponseBody$inboundSchema: z.ZodType<
  GetTeachersForSchoolResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(z.lazy(() => GetTeachersForSchoolUser$inboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetTeachersForSchoolResponseBody$Outbound = {
  users: Array<GetTeachersForSchoolUser$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetTeachersForSchoolResponseBody$outboundSchema: z.ZodType<
  GetTeachersForSchoolResponseBody$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolResponseBody
> = z.object({
  users: z.array(z.lazy(() => GetTeachersForSchoolUser$outboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolResponseBody$ {
  /** @deprecated use `GetTeachersForSchoolResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolResponseBody$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolResponseBody$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolResponseBody$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolResponseBody$Outbound;
}

export function getTeachersForSchoolResponseBodyToJSON(
  getTeachersForSchoolResponseBody: GetTeachersForSchoolResponseBody,
): string {
  return JSON.stringify(
    GetTeachersForSchoolResponseBody$outboundSchema.parse(
      getTeachersForSchoolResponseBody,
    ),
  );
}

export function getTeachersForSchoolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolResponseBody' from JSON`,
  );
}

/** @internal */
export const GetTeachersForSchoolResponse$inboundSchema: z.ZodType<
  GetTeachersForSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetTeachersForSchoolResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetTeachersForSchoolResponse$Outbound = {
  Result: GetTeachersForSchoolResponseBody$Outbound;
};

/** @internal */
export const GetTeachersForSchoolResponse$outboundSchema: z.ZodType<
  GetTeachersForSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetTeachersForSchoolResponse
> = z.object({
  result: z.lazy(() => GetTeachersForSchoolResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForSchoolResponse$ {
  /** @deprecated use `GetTeachersForSchoolResponse$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForSchoolResponse$inboundSchema;
  /** @deprecated use `GetTeachersForSchoolResponse$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForSchoolResponse$outboundSchema;
  /** @deprecated use `GetTeachersForSchoolResponse$Outbound` instead. */
  export type Outbound = GetTeachersForSchoolResponse$Outbound;
}

export function getTeachersForSchoolResponseToJSON(
  getTeachersForSchoolResponse: GetTeachersForSchoolResponse,
): string {
  return JSON.stringify(
    GetTeachersForSchoolResponse$outboundSchema.parse(
      getTeachersForSchoolResponse,
    ),
  );
}

export function getTeachersForSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForSchoolResponse' from JSON`,
  );
}
