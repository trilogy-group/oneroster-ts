/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateUserStatusRequest = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateUserStatusRequest = ClosedEnum<
  typeof CreateUserStatusRequest
>;

export type CreateUserUserIdRequest = {
  type: string;
  identifier: string;
};

export const CreateUserRoleTypeRequest = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type CreateUserRoleTypeRequest = ClosedEnum<
  typeof CreateUserRoleTypeRequest
>;

export const CreateUserRoleRequestEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type CreateUserRoleRequestEnum = ClosedEnum<
  typeof CreateUserRoleRequestEnum
>;

export type CreateUserOrgRequest = {
  sourcedId: string;
};

export type CreateUserRoleRequest = {
  roleType: CreateUserRoleTypeRequest;
  role: CreateUserRoleRequestEnum;
  org: CreateUserOrgRequest;
  userProfile?: string | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

export type CreateUserPrimaryOrgRequest = {
  sourcedId: string;
};

export type CreateUserAgentRequest = {
  sourcedId: string;
};

export type CreateUserUserRequest = {
  sourcedId?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: CreateUserStatusRequest | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<CreateUserUserIdRequest> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<CreateUserRoleRequest>;
  primaryOrg?: CreateUserPrimaryOrgRequest | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
  agents?: Array<CreateUserAgentRequest> | undefined;
};

export type CreateUserRequest = {
  user: CreateUserUserRequest;
};

export const CreateUserStatusResponse = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateUserStatusResponse = ClosedEnum<
  typeof CreateUserStatusResponse
>;

export type CreateUserUserIdResponse = {
  type: string;
  identifier: string;
};

export const CreateUserRoleTypeResponse = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type CreateUserRoleTypeResponse = ClosedEnum<
  typeof CreateUserRoleTypeResponse
>;

export const CreateUserRoleResponseEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type CreateUserRoleResponseEnum = ClosedEnum<
  typeof CreateUserRoleResponseEnum
>;

export type CreateUserOrgResponse = {
  href: string;
  sourcedId: string;
  type: string;
};

export type CreateUserRoleResponse = {
  roleType: CreateUserRoleTypeResponse;
  role: CreateUserRoleResponseEnum;
  org: CreateUserOrgResponse;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const CreateUserType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type CreateUserType = ClosedEnum<typeof CreateUserType>;

export type CreateUserAgentResponse = {
  href: string;
  sourcedId: string;
  type: CreateUserType;
};

export type CreateUserPrimaryOrgResponse = {
  href: string;
  sourcedId: string;
  type: string;
};

export type CreateUserUserResponse = {
  sourcedId: string;
  status: CreateUserStatusResponse;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<CreateUserUserIdResponse> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<CreateUserRoleResponse>;
  agents: Array<CreateUserAgentResponse>;
  primaryOrg?: CreateUserPrimaryOrgResponse | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * User successfully created
 */
export type CreateUserResponse = {
  user: CreateUserUserResponse;
};

/** @internal */
export const CreateUserStatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserStatusRequest
> = z.nativeEnum(CreateUserStatusRequest);

/** @internal */
export const CreateUserStatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserStatusRequest
> = CreateUserStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserStatusRequest$ {
  /** @deprecated use `CreateUserStatusRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserStatusRequest$inboundSchema;
  /** @deprecated use `CreateUserStatusRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserStatusRequest$outboundSchema;
}

/** @internal */
export const CreateUserUserIdRequest$inboundSchema: z.ZodType<
  CreateUserUserIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type CreateUserUserIdRequest$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const CreateUserUserIdRequest$outboundSchema: z.ZodType<
  CreateUserUserIdRequest$Outbound,
  z.ZodTypeDef,
  CreateUserUserIdRequest
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserUserIdRequest$ {
  /** @deprecated use `CreateUserUserIdRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserUserIdRequest$inboundSchema;
  /** @deprecated use `CreateUserUserIdRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserUserIdRequest$outboundSchema;
  /** @deprecated use `CreateUserUserIdRequest$Outbound` instead. */
  export type Outbound = CreateUserUserIdRequest$Outbound;
}

export function createUserUserIdRequestToJSON(
  createUserUserIdRequest: CreateUserUserIdRequest,
): string {
  return JSON.stringify(
    CreateUserUserIdRequest$outboundSchema.parse(createUserUserIdRequest),
  );
}

export function createUserUserIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserUserIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserUserIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserUserIdRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserRoleTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleTypeRequest
> = z.nativeEnum(CreateUserRoleTypeRequest);

/** @internal */
export const CreateUserRoleTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleTypeRequest
> = CreateUserRoleTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleTypeRequest$ {
  /** @deprecated use `CreateUserRoleTypeRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleTypeRequest$inboundSchema;
  /** @deprecated use `CreateUserRoleTypeRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleTypeRequest$outboundSchema;
}

/** @internal */
export const CreateUserRoleRequestEnum$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleRequestEnum
> = z.nativeEnum(CreateUserRoleRequestEnum);

/** @internal */
export const CreateUserRoleRequestEnum$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleRequestEnum
> = CreateUserRoleRequestEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleRequestEnum$ {
  /** @deprecated use `CreateUserRoleRequestEnum$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleRequestEnum$inboundSchema;
  /** @deprecated use `CreateUserRoleRequestEnum$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleRequestEnum$outboundSchema;
}

/** @internal */
export const CreateUserOrgRequest$inboundSchema: z.ZodType<
  CreateUserOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateUserOrgRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateUserOrgRequest$outboundSchema: z.ZodType<
  CreateUserOrgRequest$Outbound,
  z.ZodTypeDef,
  CreateUserOrgRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserOrgRequest$ {
  /** @deprecated use `CreateUserOrgRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserOrgRequest$inboundSchema;
  /** @deprecated use `CreateUserOrgRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserOrgRequest$outboundSchema;
  /** @deprecated use `CreateUserOrgRequest$Outbound` instead. */
  export type Outbound = CreateUserOrgRequest$Outbound;
}

export function createUserOrgRequestToJSON(
  createUserOrgRequest: CreateUserOrgRequest,
): string {
  return JSON.stringify(
    CreateUserOrgRequest$outboundSchema.parse(createUserOrgRequest),
  );
}

export function createUserOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserOrgRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserRoleRequest$inboundSchema: z.ZodType<
  CreateUserRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: CreateUserRoleTypeRequest$inboundSchema,
  role: CreateUserRoleRequestEnum$inboundSchema,
  org: z.lazy(() => CreateUserOrgRequest$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/** @internal */
export type CreateUserRoleRequest$Outbound = {
  roleType: string;
  role: string;
  org: CreateUserOrgRequest$Outbound;
  userProfile?: string | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

/** @internal */
export const CreateUserRoleRequest$outboundSchema: z.ZodType<
  CreateUserRoleRequest$Outbound,
  z.ZodTypeDef,
  CreateUserRoleRequest
> = z.object({
  roleType: CreateUserRoleTypeRequest$outboundSchema,
  role: CreateUserRoleRequestEnum$outboundSchema,
  org: z.lazy(() => CreateUserOrgRequest$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleRequest$ {
  /** @deprecated use `CreateUserRoleRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleRequest$inboundSchema;
  /** @deprecated use `CreateUserRoleRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleRequest$outboundSchema;
  /** @deprecated use `CreateUserRoleRequest$Outbound` instead. */
  export type Outbound = CreateUserRoleRequest$Outbound;
}

export function createUserRoleRequestToJSON(
  createUserRoleRequest: CreateUserRoleRequest,
): string {
  return JSON.stringify(
    CreateUserRoleRequest$outboundSchema.parse(createUserRoleRequest),
  );
}

export function createUserRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserRoleRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserPrimaryOrgRequest$inboundSchema: z.ZodType<
  CreateUserPrimaryOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateUserPrimaryOrgRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateUserPrimaryOrgRequest$outboundSchema: z.ZodType<
  CreateUserPrimaryOrgRequest$Outbound,
  z.ZodTypeDef,
  CreateUserPrimaryOrgRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserPrimaryOrgRequest$ {
  /** @deprecated use `CreateUserPrimaryOrgRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserPrimaryOrgRequest$inboundSchema;
  /** @deprecated use `CreateUserPrimaryOrgRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserPrimaryOrgRequest$outboundSchema;
  /** @deprecated use `CreateUserPrimaryOrgRequest$Outbound` instead. */
  export type Outbound = CreateUserPrimaryOrgRequest$Outbound;
}

export function createUserPrimaryOrgRequestToJSON(
  createUserPrimaryOrgRequest: CreateUserPrimaryOrgRequest,
): string {
  return JSON.stringify(
    CreateUserPrimaryOrgRequest$outboundSchema.parse(
      createUserPrimaryOrgRequest,
    ),
  );
}

export function createUserPrimaryOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserPrimaryOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserPrimaryOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserPrimaryOrgRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserAgentRequest$inboundSchema: z.ZodType<
  CreateUserAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateUserAgentRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateUserAgentRequest$outboundSchema: z.ZodType<
  CreateUserAgentRequest$Outbound,
  z.ZodTypeDef,
  CreateUserAgentRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserAgentRequest$ {
  /** @deprecated use `CreateUserAgentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserAgentRequest$inboundSchema;
  /** @deprecated use `CreateUserAgentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserAgentRequest$outboundSchema;
  /** @deprecated use `CreateUserAgentRequest$Outbound` instead. */
  export type Outbound = CreateUserAgentRequest$Outbound;
}

export function createUserAgentRequestToJSON(
  createUserAgentRequest: CreateUserAgentRequest,
): string {
  return JSON.stringify(
    CreateUserAgentRequest$outboundSchema.parse(createUserAgentRequest),
  );
}

export function createUserAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserAgentRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserUserRequest$inboundSchema: z.ZodType<
  CreateUserUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  status: CreateUserStatusRequest$inboundSchema.default("active"),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => CreateUserUserIdRequest$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => CreateUserRoleRequest$inboundSchema)),
  primaryOrg: z.lazy(() => CreateUserPrimaryOrgRequest$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  agents: z.array(z.lazy(() => CreateUserAgentRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type CreateUserUserRequest$Outbound = {
  sourcedId?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  status: string;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<CreateUserUserIdRequest$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<CreateUserRoleRequest$Outbound>;
  primaryOrg?: CreateUserPrimaryOrgRequest$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
  agents?: Array<CreateUserAgentRequest$Outbound> | undefined;
};

/** @internal */
export const CreateUserUserRequest$outboundSchema: z.ZodType<
  CreateUserUserRequest$Outbound,
  z.ZodTypeDef,
  CreateUserUserRequest
> = z.object({
  sourcedId: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  status: CreateUserStatusRequest$outboundSchema.default("active"),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => CreateUserUserIdRequest$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => CreateUserRoleRequest$outboundSchema)),
  primaryOrg: z.lazy(() => CreateUserPrimaryOrgRequest$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  agents: z.array(z.lazy(() => CreateUserAgentRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserUserRequest$ {
  /** @deprecated use `CreateUserUserRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserUserRequest$inboundSchema;
  /** @deprecated use `CreateUserUserRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserUserRequest$outboundSchema;
  /** @deprecated use `CreateUserUserRequest$Outbound` instead. */
  export type Outbound = CreateUserUserRequest$Outbound;
}

export function createUserUserRequestToJSON(
  createUserUserRequest: CreateUserUserRequest,
): string {
  return JSON.stringify(
    CreateUserUserRequest$outboundSchema.parse(createUserUserRequest),
  );
}

export function createUserUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserUserRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserRequest$inboundSchema: z.ZodType<
  CreateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => CreateUserUserRequest$inboundSchema),
});

/** @internal */
export type CreateUserRequest$Outbound = {
  user: CreateUserUserRequest$Outbound;
};

/** @internal */
export const CreateUserRequest$outboundSchema: z.ZodType<
  CreateUserRequest$Outbound,
  z.ZodTypeDef,
  CreateUserRequest
> = z.object({
  user: z.lazy(() => CreateUserUserRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRequest$ {
  /** @deprecated use `CreateUserRequest$inboundSchema` instead. */
  export const inboundSchema = CreateUserRequest$inboundSchema;
  /** @deprecated use `CreateUserRequest$outboundSchema` instead. */
  export const outboundSchema = CreateUserRequest$outboundSchema;
  /** @deprecated use `CreateUserRequest$Outbound` instead. */
  export type Outbound = CreateUserRequest$Outbound;
}

export function createUserRequestToJSON(
  createUserRequest: CreateUserRequest,
): string {
  return JSON.stringify(
    CreateUserRequest$outboundSchema.parse(createUserRequest),
  );
}

export function createUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserRequest' from JSON`,
  );
}

/** @internal */
export const CreateUserStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserStatusResponse
> = z.nativeEnum(CreateUserStatusResponse);

/** @internal */
export const CreateUserStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserStatusResponse
> = CreateUserStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserStatusResponse$ {
  /** @deprecated use `CreateUserStatusResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserStatusResponse$inboundSchema;
  /** @deprecated use `CreateUserStatusResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserStatusResponse$outboundSchema;
}

/** @internal */
export const CreateUserUserIdResponse$inboundSchema: z.ZodType<
  CreateUserUserIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type CreateUserUserIdResponse$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const CreateUserUserIdResponse$outboundSchema: z.ZodType<
  CreateUserUserIdResponse$Outbound,
  z.ZodTypeDef,
  CreateUserUserIdResponse
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserUserIdResponse$ {
  /** @deprecated use `CreateUserUserIdResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserUserIdResponse$inboundSchema;
  /** @deprecated use `CreateUserUserIdResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserUserIdResponse$outboundSchema;
  /** @deprecated use `CreateUserUserIdResponse$Outbound` instead. */
  export type Outbound = CreateUserUserIdResponse$Outbound;
}

export function createUserUserIdResponseToJSON(
  createUserUserIdResponse: CreateUserUserIdResponse,
): string {
  return JSON.stringify(
    CreateUserUserIdResponse$outboundSchema.parse(createUserUserIdResponse),
  );
}

export function createUserUserIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserUserIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserUserIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserUserIdResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserRoleTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleTypeResponse
> = z.nativeEnum(CreateUserRoleTypeResponse);

/** @internal */
export const CreateUserRoleTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleTypeResponse
> = CreateUserRoleTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleTypeResponse$ {
  /** @deprecated use `CreateUserRoleTypeResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleTypeResponse$inboundSchema;
  /** @deprecated use `CreateUserRoleTypeResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleTypeResponse$outboundSchema;
}

/** @internal */
export const CreateUserRoleResponseEnum$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleResponseEnum
> = z.nativeEnum(CreateUserRoleResponseEnum);

/** @internal */
export const CreateUserRoleResponseEnum$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserRoleResponseEnum
> = CreateUserRoleResponseEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleResponseEnum$ {
  /** @deprecated use `CreateUserRoleResponseEnum$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleResponseEnum$inboundSchema;
  /** @deprecated use `CreateUserRoleResponseEnum$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleResponseEnum$outboundSchema;
}

/** @internal */
export const CreateUserOrgResponse$inboundSchema: z.ZodType<
  CreateUserOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateUserOrgResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const CreateUserOrgResponse$outboundSchema: z.ZodType<
  CreateUserOrgResponse$Outbound,
  z.ZodTypeDef,
  CreateUserOrgResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserOrgResponse$ {
  /** @deprecated use `CreateUserOrgResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserOrgResponse$inboundSchema;
  /** @deprecated use `CreateUserOrgResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserOrgResponse$outboundSchema;
  /** @deprecated use `CreateUserOrgResponse$Outbound` instead. */
  export type Outbound = CreateUserOrgResponse$Outbound;
}

export function createUserOrgResponseToJSON(
  createUserOrgResponse: CreateUserOrgResponse,
): string {
  return JSON.stringify(
    CreateUserOrgResponse$outboundSchema.parse(createUserOrgResponse),
  );
}

export function createUserOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserOrgResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserRoleResponse$inboundSchema: z.ZodType<
  CreateUserRoleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: CreateUserRoleTypeResponse$inboundSchema,
  role: CreateUserRoleResponseEnum$inboundSchema,
  org: z.lazy(() => CreateUserOrgResponse$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type CreateUserRoleResponse$Outbound = {
  roleType: string;
  role: string;
  org: CreateUserOrgResponse$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const CreateUserRoleResponse$outboundSchema: z.ZodType<
  CreateUserRoleResponse$Outbound,
  z.ZodTypeDef,
  CreateUserRoleResponse
> = z.object({
  roleType: CreateUserRoleTypeResponse$outboundSchema,
  role: CreateUserRoleResponseEnum$outboundSchema,
  org: z.lazy(() => CreateUserOrgResponse$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserRoleResponse$ {
  /** @deprecated use `CreateUserRoleResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserRoleResponse$inboundSchema;
  /** @deprecated use `CreateUserRoleResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserRoleResponse$outboundSchema;
  /** @deprecated use `CreateUserRoleResponse$Outbound` instead. */
  export type Outbound = CreateUserRoleResponse$Outbound;
}

export function createUserRoleResponseToJSON(
  createUserRoleResponse: CreateUserRoleResponse,
): string {
  return JSON.stringify(
    CreateUserRoleResponse$outboundSchema.parse(createUserRoleResponse),
  );
}

export function createUserRoleResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserRoleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserRoleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserRoleResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserType$inboundSchema: z.ZodNativeEnum<
  typeof CreateUserType
> = z.nativeEnum(CreateUserType);

/** @internal */
export const CreateUserType$outboundSchema: z.ZodNativeEnum<
  typeof CreateUserType
> = CreateUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserType$ {
  /** @deprecated use `CreateUserType$inboundSchema` instead. */
  export const inboundSchema = CreateUserType$inboundSchema;
  /** @deprecated use `CreateUserType$outboundSchema` instead. */
  export const outboundSchema = CreateUserType$outboundSchema;
}

/** @internal */
export const CreateUserAgentResponse$inboundSchema: z.ZodType<
  CreateUserAgentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: CreateUserType$inboundSchema,
});

/** @internal */
export type CreateUserAgentResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const CreateUserAgentResponse$outboundSchema: z.ZodType<
  CreateUserAgentResponse$Outbound,
  z.ZodTypeDef,
  CreateUserAgentResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: CreateUserType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserAgentResponse$ {
  /** @deprecated use `CreateUserAgentResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserAgentResponse$inboundSchema;
  /** @deprecated use `CreateUserAgentResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserAgentResponse$outboundSchema;
  /** @deprecated use `CreateUserAgentResponse$Outbound` instead. */
  export type Outbound = CreateUserAgentResponse$Outbound;
}

export function createUserAgentResponseToJSON(
  createUserAgentResponse: CreateUserAgentResponse,
): string {
  return JSON.stringify(
    CreateUserAgentResponse$outboundSchema.parse(createUserAgentResponse),
  );
}

export function createUserAgentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserAgentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserAgentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserAgentResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserPrimaryOrgResponse$inboundSchema: z.ZodType<
  CreateUserPrimaryOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type CreateUserPrimaryOrgResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const CreateUserPrimaryOrgResponse$outboundSchema: z.ZodType<
  CreateUserPrimaryOrgResponse$Outbound,
  z.ZodTypeDef,
  CreateUserPrimaryOrgResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserPrimaryOrgResponse$ {
  /** @deprecated use `CreateUserPrimaryOrgResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserPrimaryOrgResponse$inboundSchema;
  /** @deprecated use `CreateUserPrimaryOrgResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserPrimaryOrgResponse$outboundSchema;
  /** @deprecated use `CreateUserPrimaryOrgResponse$Outbound` instead. */
  export type Outbound = CreateUserPrimaryOrgResponse$Outbound;
}

export function createUserPrimaryOrgResponseToJSON(
  createUserPrimaryOrgResponse: CreateUserPrimaryOrgResponse,
): string {
  return JSON.stringify(
    CreateUserPrimaryOrgResponse$outboundSchema.parse(
      createUserPrimaryOrgResponse,
    ),
  );
}

export function createUserPrimaryOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserPrimaryOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserPrimaryOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserPrimaryOrgResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserUserResponse$inboundSchema: z.ZodType<
  CreateUserUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: CreateUserStatusResponse$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => CreateUserUserIdResponse$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => CreateUserRoleResponse$inboundSchema)),
  agents: z.array(z.lazy(() => CreateUserAgentResponse$inboundSchema)),
  primaryOrg: z.lazy(() => CreateUserPrimaryOrgResponse$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateUserUserResponse$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<CreateUserUserIdResponse$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<CreateUserRoleResponse$Outbound>;
  agents: Array<CreateUserAgentResponse$Outbound>;
  primaryOrg?: CreateUserPrimaryOrgResponse$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const CreateUserUserResponse$outboundSchema: z.ZodType<
  CreateUserUserResponse$Outbound,
  z.ZodTypeDef,
  CreateUserUserResponse
> = z.object({
  sourcedId: z.string(),
  status: CreateUserStatusResponse$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => CreateUserUserIdResponse$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => CreateUserRoleResponse$outboundSchema)),
  agents: z.array(z.lazy(() => CreateUserAgentResponse$outboundSchema)),
  primaryOrg: z.lazy(() => CreateUserPrimaryOrgResponse$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserUserResponse$ {
  /** @deprecated use `CreateUserUserResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserUserResponse$inboundSchema;
  /** @deprecated use `CreateUserUserResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserUserResponse$outboundSchema;
  /** @deprecated use `CreateUserUserResponse$Outbound` instead. */
  export type Outbound = CreateUserUserResponse$Outbound;
}

export function createUserUserResponseToJSON(
  createUserUserResponse: CreateUserUserResponse,
): string {
  return JSON.stringify(
    CreateUserUserResponse$outboundSchema.parse(createUserUserResponse),
  );
}

export function createUserUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserUserResponse' from JSON`,
  );
}

/** @internal */
export const CreateUserResponse$inboundSchema: z.ZodType<
  CreateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => CreateUserUserResponse$inboundSchema),
});

/** @internal */
export type CreateUserResponse$Outbound = {
  user: CreateUserUserResponse$Outbound;
};

/** @internal */
export const CreateUserResponse$outboundSchema: z.ZodType<
  CreateUserResponse$Outbound,
  z.ZodTypeDef,
  CreateUserResponse
> = z.object({
  user: z.lazy(() => CreateUserUserResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserResponse$ {
  /** @deprecated use `CreateUserResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserResponse$inboundSchema;
  /** @deprecated use `CreateUserResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserResponse$outboundSchema;
  /** @deprecated use `CreateUserResponse$Outbound` instead. */
  export type Outbound = CreateUserResponse$Outbound;
}

export function createUserResponseToJSON(
  createUserResponse: CreateUserResponse,
): string {
  return JSON.stringify(
    CreateUserResponse$outboundSchema.parse(createUserResponse),
  );
}

export function createUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserResponse' from JSON`,
  );
}
