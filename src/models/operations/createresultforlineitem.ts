/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateResultForLineItemRequestBody = {
  results: Array<components.Result>;
};

export type CreateResultForLineItemRequest = {
  /**
   * The sourcedId of the line item
   */
  sourcedId: string;
  requestBody: CreateResultForLineItemRequestBody;
};

export type CreateResultForLineItemSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Result successfully created
 */
export type CreateResultForLineItemResponse = {
  sourcedIdPairs: CreateResultForLineItemSourcedIdPairs;
};

/** @internal */
export const CreateResultForLineItemRequestBody$inboundSchema: z.ZodType<
  CreateResultForLineItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(components.Result$inboundSchema),
});

/** @internal */
export type CreateResultForLineItemRequestBody$Outbound = {
  results: Array<components.Result$Outbound>;
};

/** @internal */
export const CreateResultForLineItemRequestBody$outboundSchema: z.ZodType<
  CreateResultForLineItemRequestBody$Outbound,
  z.ZodTypeDef,
  CreateResultForLineItemRequestBody
> = z.object({
  results: z.array(components.Result$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultForLineItemRequestBody$ {
  /** @deprecated use `CreateResultForLineItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateResultForLineItemRequestBody$inboundSchema;
  /** @deprecated use `CreateResultForLineItemRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateResultForLineItemRequestBody$outboundSchema;
  /** @deprecated use `CreateResultForLineItemRequestBody$Outbound` instead. */
  export type Outbound = CreateResultForLineItemRequestBody$Outbound;
}

export function createResultForLineItemRequestBodyToJSON(
  createResultForLineItemRequestBody: CreateResultForLineItemRequestBody,
): string {
  return JSON.stringify(
    CreateResultForLineItemRequestBody$outboundSchema.parse(
      createResultForLineItemRequestBody,
    ),
  );
}

export function createResultForLineItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultForLineItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateResultForLineItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultForLineItemRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateResultForLineItemRequest$inboundSchema: z.ZodType<
  CreateResultForLineItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => CreateResultForLineItemRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type CreateResultForLineItemRequest$Outbound = {
  sourcedId: string;
  RequestBody: CreateResultForLineItemRequestBody$Outbound;
};

/** @internal */
export const CreateResultForLineItemRequest$outboundSchema: z.ZodType<
  CreateResultForLineItemRequest$Outbound,
  z.ZodTypeDef,
  CreateResultForLineItemRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => CreateResultForLineItemRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultForLineItemRequest$ {
  /** @deprecated use `CreateResultForLineItemRequest$inboundSchema` instead. */
  export const inboundSchema = CreateResultForLineItemRequest$inboundSchema;
  /** @deprecated use `CreateResultForLineItemRequest$outboundSchema` instead. */
  export const outboundSchema = CreateResultForLineItemRequest$outboundSchema;
  /** @deprecated use `CreateResultForLineItemRequest$Outbound` instead. */
  export type Outbound = CreateResultForLineItemRequest$Outbound;
}

export function createResultForLineItemRequestToJSON(
  createResultForLineItemRequest: CreateResultForLineItemRequest,
): string {
  return JSON.stringify(
    CreateResultForLineItemRequest$outboundSchema.parse(
      createResultForLineItemRequest,
    ),
  );
}

export function createResultForLineItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultForLineItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResultForLineItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultForLineItemRequest' from JSON`,
  );
}

/** @internal */
export const CreateResultForLineItemSourcedIdPairs$inboundSchema: z.ZodType<
  CreateResultForLineItemSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateResultForLineItemSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateResultForLineItemSourcedIdPairs$outboundSchema: z.ZodType<
  CreateResultForLineItemSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateResultForLineItemSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultForLineItemSourcedIdPairs$ {
  /** @deprecated use `CreateResultForLineItemSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema =
    CreateResultForLineItemSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateResultForLineItemSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema =
    CreateResultForLineItemSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateResultForLineItemSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateResultForLineItemSourcedIdPairs$Outbound;
}

export function createResultForLineItemSourcedIdPairsToJSON(
  createResultForLineItemSourcedIdPairs: CreateResultForLineItemSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateResultForLineItemSourcedIdPairs$outboundSchema.parse(
      createResultForLineItemSourcedIdPairs,
    ),
  );
}

export function createResultForLineItemSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultForLineItemSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateResultForLineItemSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultForLineItemSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateResultForLineItemResponse$inboundSchema: z.ZodType<
  CreateResultForLineItemResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() =>
    CreateResultForLineItemSourcedIdPairs$inboundSchema
  ),
});

/** @internal */
export type CreateResultForLineItemResponse$Outbound = {
  sourcedIdPairs: CreateResultForLineItemSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateResultForLineItemResponse$outboundSchema: z.ZodType<
  CreateResultForLineItemResponse$Outbound,
  z.ZodTypeDef,
  CreateResultForLineItemResponse
> = z.object({
  sourcedIdPairs: z.lazy(() =>
    CreateResultForLineItemSourcedIdPairs$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultForLineItemResponse$ {
  /** @deprecated use `CreateResultForLineItemResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResultForLineItemResponse$inboundSchema;
  /** @deprecated use `CreateResultForLineItemResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResultForLineItemResponse$outboundSchema;
  /** @deprecated use `CreateResultForLineItemResponse$Outbound` instead. */
  export type Outbound = CreateResultForLineItemResponse$Outbound;
}

export function createResultForLineItemResponseToJSON(
  createResultForLineItemResponse: CreateResultForLineItemResponse,
): string {
  return JSON.stringify(
    CreateResultForLineItemResponse$outboundSchema.parse(
      createResultForLineItemResponse,
    ),
  );
}

export function createResultForLineItemResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultForLineItemResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResultForLineItemResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultForLineItemResponse' from JSON`,
  );
}
