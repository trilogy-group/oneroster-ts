/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllCoursesOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllCoursesOrderBy = ClosedEnum<typeof GetAllCoursesOrderBy>;

export type GetAllCoursesRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllCoursesOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetAllCoursesStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetAllCoursesStatus = ClosedEnum<typeof GetAllCoursesStatus>;

export type GetAllCoursesAcademicSession = {
  sourcedId: string;
};

export type GetAllCoursesOrg = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type GetAllCoursesCourse = {
  sourcedId?: string | undefined;
  status: GetAllCoursesStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: GetAllCoursesAcademicSession | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetAllCoursesOrg;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/**
 * Collection of Courses
 */
export type GetAllCoursesResponseBody = {
  courses: Array<GetAllCoursesCourse>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetAllCoursesResponse = {
  result: GetAllCoursesResponseBody;
};

/** @internal */
export const GetAllCoursesOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllCoursesOrderBy
> = z.nativeEnum(GetAllCoursesOrderBy);

/** @internal */
export const GetAllCoursesOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllCoursesOrderBy
> = GetAllCoursesOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesOrderBy$ {
  /** @deprecated use `GetAllCoursesOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesOrderBy$inboundSchema;
  /** @deprecated use `GetAllCoursesOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesOrderBy$outboundSchema;
}

/** @internal */
export const GetAllCoursesRequest$inboundSchema: z.ZodType<
  GetAllCoursesRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllCoursesOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllCoursesRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllCoursesRequest$outboundSchema: z.ZodType<
  GetAllCoursesRequest$Outbound,
  z.ZodTypeDef,
  GetAllCoursesRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllCoursesOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesRequest$ {
  /** @deprecated use `GetAllCoursesRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesRequest$inboundSchema;
  /** @deprecated use `GetAllCoursesRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesRequest$outboundSchema;
  /** @deprecated use `GetAllCoursesRequest$Outbound` instead. */
  export type Outbound = GetAllCoursesRequest$Outbound;
}

export function getAllCoursesRequestToJSON(
  getAllCoursesRequest: GetAllCoursesRequest,
): string {
  return JSON.stringify(
    GetAllCoursesRequest$outboundSchema.parse(getAllCoursesRequest),
  );
}

export function getAllCoursesRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesRequest' from JSON`,
  );
}

/** @internal */
export const GetAllCoursesStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAllCoursesStatus
> = z.nativeEnum(GetAllCoursesStatus);

/** @internal */
export const GetAllCoursesStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAllCoursesStatus
> = GetAllCoursesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesStatus$ {
  /** @deprecated use `GetAllCoursesStatus$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesStatus$inboundSchema;
  /** @deprecated use `GetAllCoursesStatus$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesStatus$outboundSchema;
}

/** @internal */
export const GetAllCoursesAcademicSession$inboundSchema: z.ZodType<
  GetAllCoursesAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetAllCoursesAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetAllCoursesAcademicSession$outboundSchema: z.ZodType<
  GetAllCoursesAcademicSession$Outbound,
  z.ZodTypeDef,
  GetAllCoursesAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesAcademicSession$ {
  /** @deprecated use `GetAllCoursesAcademicSession$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesAcademicSession$inboundSchema;
  /** @deprecated use `GetAllCoursesAcademicSession$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesAcademicSession$outboundSchema;
  /** @deprecated use `GetAllCoursesAcademicSession$Outbound` instead. */
  export type Outbound = GetAllCoursesAcademicSession$Outbound;
}

export function getAllCoursesAcademicSessionToJSON(
  getAllCoursesAcademicSession: GetAllCoursesAcademicSession,
): string {
  return JSON.stringify(
    GetAllCoursesAcademicSession$outboundSchema.parse(
      getAllCoursesAcademicSession,
    ),
  );
}

export function getAllCoursesAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesAcademicSession' from JSON`,
  );
}

/** @internal */
export const GetAllCoursesOrg$inboundSchema: z.ZodType<
  GetAllCoursesOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetAllCoursesOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetAllCoursesOrg$outboundSchema: z.ZodType<
  GetAllCoursesOrg$Outbound,
  z.ZodTypeDef,
  GetAllCoursesOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesOrg$ {
  /** @deprecated use `GetAllCoursesOrg$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesOrg$inboundSchema;
  /** @deprecated use `GetAllCoursesOrg$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesOrg$outboundSchema;
  /** @deprecated use `GetAllCoursesOrg$Outbound` instead. */
  export type Outbound = GetAllCoursesOrg$Outbound;
}

export function getAllCoursesOrgToJSON(
  getAllCoursesOrg: GetAllCoursesOrg,
): string {
  return JSON.stringify(
    GetAllCoursesOrg$outboundSchema.parse(getAllCoursesOrg),
  );
}

export function getAllCoursesOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesOrg' from JSON`,
  );
}

/** @internal */
export const GetAllCoursesCourse$inboundSchema: z.ZodType<
  GetAllCoursesCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetAllCoursesStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetAllCoursesAcademicSession$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetAllCoursesOrg$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAllCoursesCourse$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: GetAllCoursesAcademicSession$Outbound | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetAllCoursesOrg$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const GetAllCoursesCourse$outboundSchema: z.ZodType<
  GetAllCoursesCourse$Outbound,
  z.ZodTypeDef,
  GetAllCoursesCourse
> = z.object({
  sourcedId: z.string().optional(),
  status: GetAllCoursesStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetAllCoursesAcademicSession$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetAllCoursesOrg$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesCourse$ {
  /** @deprecated use `GetAllCoursesCourse$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesCourse$inboundSchema;
  /** @deprecated use `GetAllCoursesCourse$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesCourse$outboundSchema;
  /** @deprecated use `GetAllCoursesCourse$Outbound` instead. */
  export type Outbound = GetAllCoursesCourse$Outbound;
}

export function getAllCoursesCourseToJSON(
  getAllCoursesCourse: GetAllCoursesCourse,
): string {
  return JSON.stringify(
    GetAllCoursesCourse$outboundSchema.parse(getAllCoursesCourse),
  );
}

export function getAllCoursesCourseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesCourse' from JSON`,
  );
}

/** @internal */
export const GetAllCoursesResponseBody$inboundSchema: z.ZodType<
  GetAllCoursesResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  courses: z.array(z.lazy(() => GetAllCoursesCourse$inboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetAllCoursesResponseBody$Outbound = {
  courses: Array<GetAllCoursesCourse$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetAllCoursesResponseBody$outboundSchema: z.ZodType<
  GetAllCoursesResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllCoursesResponseBody
> = z.object({
  courses: z.array(z.lazy(() => GetAllCoursesCourse$outboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesResponseBody$ {
  /** @deprecated use `GetAllCoursesResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesResponseBody$inboundSchema;
  /** @deprecated use `GetAllCoursesResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesResponseBody$outboundSchema;
  /** @deprecated use `GetAllCoursesResponseBody$Outbound` instead. */
  export type Outbound = GetAllCoursesResponseBody$Outbound;
}

export function getAllCoursesResponseBodyToJSON(
  getAllCoursesResponseBody: GetAllCoursesResponseBody,
): string {
  return JSON.stringify(
    GetAllCoursesResponseBody$outboundSchema.parse(getAllCoursesResponseBody),
  );
}

export function getAllCoursesResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllCoursesResponse$inboundSchema: z.ZodType<
  GetAllCoursesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllCoursesResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllCoursesResponse$Outbound = {
  Result: GetAllCoursesResponseBody$Outbound;
};

/** @internal */
export const GetAllCoursesResponse$outboundSchema: z.ZodType<
  GetAllCoursesResponse$Outbound,
  z.ZodTypeDef,
  GetAllCoursesResponse
> = z.object({
  result: z.lazy(() => GetAllCoursesResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCoursesResponse$ {
  /** @deprecated use `GetAllCoursesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllCoursesResponse$inboundSchema;
  /** @deprecated use `GetAllCoursesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllCoursesResponse$outboundSchema;
  /** @deprecated use `GetAllCoursesResponse$Outbound` instead. */
  export type Outbound = GetAllCoursesResponse$Outbound;
}

export function getAllCoursesResponseToJSON(
  getAllCoursesResponse: GetAllCoursesResponse,
): string {
  return JSON.stringify(
    GetAllCoursesResponse$outboundSchema.parse(getAllCoursesResponse),
  );
}

export function getAllCoursesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCoursesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCoursesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCoursesResponse' from JSON`,
  );
}
