/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateClassStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateClassStatus = ClosedEnum<typeof UpdateClassStatus>;

export const UpdateClassClassType = {
  Homeroom: "homeroom",
  Scheduled: "scheduled",
} as const;
export type UpdateClassClassType = ClosedEnum<typeof UpdateClassClassType>;

export type UpdateClassResource = {
  sourcedId: string;
};

export type UpdateClassTerm = {
  sourcedId: string;
};

export type UpdateClassClass = {
  status?: UpdateClassStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  title?: string | undefined;
  classCode?: string | undefined;
  classType?: UpdateClassClassType | undefined;
  location?: string | undefined;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<UpdateClassResource> | undefined;
  terms?: Array<UpdateClassTerm> | undefined;
};

export type UpdateClassRequestBody = {
  class: UpdateClassClass;
};

export type UpdateClassRequest = {
  /**
   * Class sourcedId
   */
  sourcedId: string;
  requestBody?: UpdateClassRequestBody | undefined;
};

/** @internal */
export const UpdateClassStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateClassStatus
> = z.nativeEnum(UpdateClassStatus);

/** @internal */
export const UpdateClassStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateClassStatus
> = UpdateClassStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassStatus$ {
  /** @deprecated use `UpdateClassStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateClassStatus$inboundSchema;
  /** @deprecated use `UpdateClassStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateClassStatus$outboundSchema;
}

/** @internal */
export const UpdateClassClassType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateClassClassType
> = z.nativeEnum(UpdateClassClassType);

/** @internal */
export const UpdateClassClassType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateClassClassType
> = UpdateClassClassType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassClassType$ {
  /** @deprecated use `UpdateClassClassType$inboundSchema` instead. */
  export const inboundSchema = UpdateClassClassType$inboundSchema;
  /** @deprecated use `UpdateClassClassType$outboundSchema` instead. */
  export const outboundSchema = UpdateClassClassType$outboundSchema;
}

/** @internal */
export const UpdateClassResource$inboundSchema: z.ZodType<
  UpdateClassResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateClassResource$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateClassResource$outboundSchema: z.ZodType<
  UpdateClassResource$Outbound,
  z.ZodTypeDef,
  UpdateClassResource
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassResource$ {
  /** @deprecated use `UpdateClassResource$inboundSchema` instead. */
  export const inboundSchema = UpdateClassResource$inboundSchema;
  /** @deprecated use `UpdateClassResource$outboundSchema` instead. */
  export const outboundSchema = UpdateClassResource$outboundSchema;
  /** @deprecated use `UpdateClassResource$Outbound` instead. */
  export type Outbound = UpdateClassResource$Outbound;
}

export function updateClassResourceToJSON(
  updateClassResource: UpdateClassResource,
): string {
  return JSON.stringify(
    UpdateClassResource$outboundSchema.parse(updateClassResource),
  );
}

export function updateClassResourceFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClassResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClassResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClassResource' from JSON`,
  );
}

/** @internal */
export const UpdateClassTerm$inboundSchema: z.ZodType<
  UpdateClassTerm,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateClassTerm$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateClassTerm$outboundSchema: z.ZodType<
  UpdateClassTerm$Outbound,
  z.ZodTypeDef,
  UpdateClassTerm
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassTerm$ {
  /** @deprecated use `UpdateClassTerm$inboundSchema` instead. */
  export const inboundSchema = UpdateClassTerm$inboundSchema;
  /** @deprecated use `UpdateClassTerm$outboundSchema` instead. */
  export const outboundSchema = UpdateClassTerm$outboundSchema;
  /** @deprecated use `UpdateClassTerm$Outbound` instead. */
  export type Outbound = UpdateClassTerm$Outbound;
}

export function updateClassTermToJSON(
  updateClassTerm: UpdateClassTerm,
): string {
  return JSON.stringify(UpdateClassTerm$outboundSchema.parse(updateClassTerm));
}

export function updateClassTermFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClassTerm, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClassTerm$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClassTerm' from JSON`,
  );
}

/** @internal */
export const UpdateClassClass$inboundSchema: z.ZodType<
  UpdateClassClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: UpdateClassStatus$inboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
  title: z.string().optional(),
  classCode: z.string().optional(),
  classType: UpdateClassClassType$inboundSchema.optional(),
  location: z.string().optional(),
  grades: z.array(z.string()).optional(),
  subjects: z.array(z.string()).optional(),
  subjectCodes: z.array(z.string()).optional(),
  periods: z.array(z.string()).optional(),
  resources: z.array(z.lazy(() => UpdateClassResource$inboundSchema))
    .optional(),
  terms: z.array(z.lazy(() => UpdateClassTerm$inboundSchema)).optional(),
});

/** @internal */
export type UpdateClassClass$Outbound = {
  status?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  title?: string | undefined;
  classCode?: string | undefined;
  classType?: string | undefined;
  location?: string | undefined;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<UpdateClassResource$Outbound> | undefined;
  terms?: Array<UpdateClassTerm$Outbound> | undefined;
};

/** @internal */
export const UpdateClassClass$outboundSchema: z.ZodType<
  UpdateClassClass$Outbound,
  z.ZodTypeDef,
  UpdateClassClass
> = z.object({
  status: UpdateClassStatus$outboundSchema.optional(),
  metadata: z.record(z.any()).optional(),
  title: z.string().optional(),
  classCode: z.string().optional(),
  classType: UpdateClassClassType$outboundSchema.optional(),
  location: z.string().optional(),
  grades: z.array(z.string()).optional(),
  subjects: z.array(z.string()).optional(),
  subjectCodes: z.array(z.string()).optional(),
  periods: z.array(z.string()).optional(),
  resources: z.array(z.lazy(() => UpdateClassResource$outboundSchema))
    .optional(),
  terms: z.array(z.lazy(() => UpdateClassTerm$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassClass$ {
  /** @deprecated use `UpdateClassClass$inboundSchema` instead. */
  export const inboundSchema = UpdateClassClass$inboundSchema;
  /** @deprecated use `UpdateClassClass$outboundSchema` instead. */
  export const outboundSchema = UpdateClassClass$outboundSchema;
  /** @deprecated use `UpdateClassClass$Outbound` instead. */
  export type Outbound = UpdateClassClass$Outbound;
}

export function updateClassClassToJSON(
  updateClassClass: UpdateClassClass,
): string {
  return JSON.stringify(
    UpdateClassClass$outboundSchema.parse(updateClassClass),
  );
}

export function updateClassClassFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClassClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClassClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClassClass' from JSON`,
  );
}

/** @internal */
export const UpdateClassRequestBody$inboundSchema: z.ZodType<
  UpdateClassRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  class: z.lazy(() => UpdateClassClass$inboundSchema),
});

/** @internal */
export type UpdateClassRequestBody$Outbound = {
  class: UpdateClassClass$Outbound;
};

/** @internal */
export const UpdateClassRequestBody$outboundSchema: z.ZodType<
  UpdateClassRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateClassRequestBody
> = z.object({
  class: z.lazy(() => UpdateClassClass$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassRequestBody$ {
  /** @deprecated use `UpdateClassRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateClassRequestBody$inboundSchema;
  /** @deprecated use `UpdateClassRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateClassRequestBody$outboundSchema;
  /** @deprecated use `UpdateClassRequestBody$Outbound` instead. */
  export type Outbound = UpdateClassRequestBody$Outbound;
}

export function updateClassRequestBodyToJSON(
  updateClassRequestBody: UpdateClassRequestBody,
): string {
  return JSON.stringify(
    UpdateClassRequestBody$outboundSchema.parse(updateClassRequestBody),
  );
}

export function updateClassRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClassRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClassRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClassRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateClassRequest$inboundSchema: z.ZodType<
  UpdateClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateClassRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateClassRequest$Outbound = {
  sourcedId: string;
  RequestBody?: UpdateClassRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateClassRequest$outboundSchema: z.ZodType<
  UpdateClassRequest$Outbound,
  z.ZodTypeDef,
  UpdateClassRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateClassRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateClassRequest$ {
  /** @deprecated use `UpdateClassRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateClassRequest$inboundSchema;
  /** @deprecated use `UpdateClassRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateClassRequest$outboundSchema;
  /** @deprecated use `UpdateClassRequest$Outbound` instead. */
  export type Outbound = UpdateClassRequest$Outbound;
}

export function updateClassRequestToJSON(
  updateClassRequest: UpdateClassRequest,
): string {
  return JSON.stringify(
    UpdateClassRequest$outboundSchema.parse(updateClassRequest),
  );
}

export function updateClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateClassRequest' from JSON`,
  );
}
