/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type RemoveResourceFromUserRequest = {
  /**
   * The sourcedId of the user
   */
  userSourcedId: string;
  /**
   * The sourcedId of the resource to remove
   */
  resourceSourcedId: string;
};

/** @internal */
export const RemoveResourceFromUserRequest$inboundSchema: z.ZodType<
  RemoveResourceFromUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userSourcedId: z.string(),
  resourceSourcedId: z.string(),
});

/** @internal */
export type RemoveResourceFromUserRequest$Outbound = {
  userSourcedId: string;
  resourceSourcedId: string;
};

/** @internal */
export const RemoveResourceFromUserRequest$outboundSchema: z.ZodType<
  RemoveResourceFromUserRequest$Outbound,
  z.ZodTypeDef,
  RemoveResourceFromUserRequest
> = z.object({
  userSourcedId: z.string(),
  resourceSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RemoveResourceFromUserRequest$ {
  /** @deprecated use `RemoveResourceFromUserRequest$inboundSchema` instead. */
  export const inboundSchema = RemoveResourceFromUserRequest$inboundSchema;
  /** @deprecated use `RemoveResourceFromUserRequest$outboundSchema` instead. */
  export const outboundSchema = RemoveResourceFromUserRequest$outboundSchema;
  /** @deprecated use `RemoveResourceFromUserRequest$Outbound` instead. */
  export type Outbound = RemoveResourceFromUserRequest$Outbound;
}

export function removeResourceFromUserRequestToJSON(
  removeResourceFromUserRequest: RemoveResourceFromUserRequest,
): string {
  return JSON.stringify(
    RemoveResourceFromUserRequest$outboundSchema.parse(
      removeResourceFromUserRequest,
    ),
  );
}

export function removeResourceFromUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<RemoveResourceFromUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RemoveResourceFromUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RemoveResourceFromUserRequest' from JSON`,
  );
}
