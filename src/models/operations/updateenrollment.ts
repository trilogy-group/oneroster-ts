/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateEnrollmentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateEnrollmentStatus = ClosedEnum<typeof UpdateEnrollmentStatus>;

export const UpdateEnrollmentRole = {
  Administrator: "administrator",
  Proctor: "proctor",
  Student: "student",
  Teacher: "teacher",
} as const;
export type UpdateEnrollmentRole = ClosedEnum<typeof UpdateEnrollmentRole>;

export type UpdateEnrollmentUser = {
  sourcedId: string;
};

export type UpdateEnrollmentClass = {
  sourcedId: string;
};

export type UpdateEnrollmentEnrollment = {
  sourcedId: string;
  status: UpdateEnrollmentStatus;
  metadata?: { [k: string]: any } | undefined;
  role: UpdateEnrollmentRole;
  primary?: boolean | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
  user: UpdateEnrollmentUser;
  class: UpdateEnrollmentClass;
};

export type UpdateEnrollmentRequestBody = {
  enrollment: UpdateEnrollmentEnrollment;
};

export type UpdateEnrollmentRequest = {
  /**
   * The unique identifier for the enrollment to update
   */
  sourcedId: string;
  requestBody?: UpdateEnrollmentRequestBody | undefined;
};

/** @internal */
export const UpdateEnrollmentStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateEnrollmentStatus
> = z.nativeEnum(UpdateEnrollmentStatus);

/** @internal */
export const UpdateEnrollmentStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateEnrollmentStatus
> = UpdateEnrollmentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentStatus$ {
  /** @deprecated use `UpdateEnrollmentStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentStatus$inboundSchema;
  /** @deprecated use `UpdateEnrollmentStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentStatus$outboundSchema;
}

/** @internal */
export const UpdateEnrollmentRole$inboundSchema: z.ZodNativeEnum<
  typeof UpdateEnrollmentRole
> = z.nativeEnum(UpdateEnrollmentRole);

/** @internal */
export const UpdateEnrollmentRole$outboundSchema: z.ZodNativeEnum<
  typeof UpdateEnrollmentRole
> = UpdateEnrollmentRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentRole$ {
  /** @deprecated use `UpdateEnrollmentRole$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentRole$inboundSchema;
  /** @deprecated use `UpdateEnrollmentRole$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentRole$outboundSchema;
}

/** @internal */
export const UpdateEnrollmentUser$inboundSchema: z.ZodType<
  UpdateEnrollmentUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateEnrollmentUser$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateEnrollmentUser$outboundSchema: z.ZodType<
  UpdateEnrollmentUser$Outbound,
  z.ZodTypeDef,
  UpdateEnrollmentUser
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentUser$ {
  /** @deprecated use `UpdateEnrollmentUser$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentUser$inboundSchema;
  /** @deprecated use `UpdateEnrollmentUser$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentUser$outboundSchema;
  /** @deprecated use `UpdateEnrollmentUser$Outbound` instead. */
  export type Outbound = UpdateEnrollmentUser$Outbound;
}

export function updateEnrollmentUserToJSON(
  updateEnrollmentUser: UpdateEnrollmentUser,
): string {
  return JSON.stringify(
    UpdateEnrollmentUser$outboundSchema.parse(updateEnrollmentUser),
  );
}

export function updateEnrollmentUserFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnrollmentUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnrollmentUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnrollmentUser' from JSON`,
  );
}

/** @internal */
export const UpdateEnrollmentClass$inboundSchema: z.ZodType<
  UpdateEnrollmentClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateEnrollmentClass$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateEnrollmentClass$outboundSchema: z.ZodType<
  UpdateEnrollmentClass$Outbound,
  z.ZodTypeDef,
  UpdateEnrollmentClass
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentClass$ {
  /** @deprecated use `UpdateEnrollmentClass$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentClass$inboundSchema;
  /** @deprecated use `UpdateEnrollmentClass$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentClass$outboundSchema;
  /** @deprecated use `UpdateEnrollmentClass$Outbound` instead. */
  export type Outbound = UpdateEnrollmentClass$Outbound;
}

export function updateEnrollmentClassToJSON(
  updateEnrollmentClass: UpdateEnrollmentClass,
): string {
  return JSON.stringify(
    UpdateEnrollmentClass$outboundSchema.parse(updateEnrollmentClass),
  );
}

export function updateEnrollmentClassFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnrollmentClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnrollmentClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnrollmentClass' from JSON`,
  );
}

/** @internal */
export const UpdateEnrollmentEnrollment$inboundSchema: z.ZodType<
  UpdateEnrollmentEnrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: UpdateEnrollmentStatus$inboundSchema,
  metadata: z.record(z.any()).optional(),
  role: UpdateEnrollmentRole$inboundSchema,
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
  user: z.lazy(() => UpdateEnrollmentUser$inboundSchema),
  class: z.lazy(() => UpdateEnrollmentClass$inboundSchema),
});

/** @internal */
export type UpdateEnrollmentEnrollment$Outbound = {
  sourcedId: string;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  role: string;
  primary: boolean;
  beginDate?: string | undefined;
  endDate?: string | undefined;
  user: UpdateEnrollmentUser$Outbound;
  class: UpdateEnrollmentClass$Outbound;
};

/** @internal */
export const UpdateEnrollmentEnrollment$outboundSchema: z.ZodType<
  UpdateEnrollmentEnrollment$Outbound,
  z.ZodTypeDef,
  UpdateEnrollmentEnrollment
> = z.object({
  sourcedId: z.string(),
  status: UpdateEnrollmentStatus$outboundSchema,
  metadata: z.record(z.any()).optional(),
  role: UpdateEnrollmentRole$outboundSchema,
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
  user: z.lazy(() => UpdateEnrollmentUser$outboundSchema),
  class: z.lazy(() => UpdateEnrollmentClass$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentEnrollment$ {
  /** @deprecated use `UpdateEnrollmentEnrollment$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentEnrollment$inboundSchema;
  /** @deprecated use `UpdateEnrollmentEnrollment$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentEnrollment$outboundSchema;
  /** @deprecated use `UpdateEnrollmentEnrollment$Outbound` instead. */
  export type Outbound = UpdateEnrollmentEnrollment$Outbound;
}

export function updateEnrollmentEnrollmentToJSON(
  updateEnrollmentEnrollment: UpdateEnrollmentEnrollment,
): string {
  return JSON.stringify(
    UpdateEnrollmentEnrollment$outboundSchema.parse(updateEnrollmentEnrollment),
  );
}

export function updateEnrollmentEnrollmentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnrollmentEnrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnrollmentEnrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnrollmentEnrollment' from JSON`,
  );
}

/** @internal */
export const UpdateEnrollmentRequestBody$inboundSchema: z.ZodType<
  UpdateEnrollmentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollment: z.lazy(() => UpdateEnrollmentEnrollment$inboundSchema),
});

/** @internal */
export type UpdateEnrollmentRequestBody$Outbound = {
  enrollment: UpdateEnrollmentEnrollment$Outbound;
};

/** @internal */
export const UpdateEnrollmentRequestBody$outboundSchema: z.ZodType<
  UpdateEnrollmentRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateEnrollmentRequestBody
> = z.object({
  enrollment: z.lazy(() => UpdateEnrollmentEnrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentRequestBody$ {
  /** @deprecated use `UpdateEnrollmentRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentRequestBody$inboundSchema;
  /** @deprecated use `UpdateEnrollmentRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentRequestBody$outboundSchema;
  /** @deprecated use `UpdateEnrollmentRequestBody$Outbound` instead. */
  export type Outbound = UpdateEnrollmentRequestBody$Outbound;
}

export function updateEnrollmentRequestBodyToJSON(
  updateEnrollmentRequestBody: UpdateEnrollmentRequestBody,
): string {
  return JSON.stringify(
    UpdateEnrollmentRequestBody$outboundSchema.parse(
      updateEnrollmentRequestBody,
    ),
  );
}

export function updateEnrollmentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnrollmentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnrollmentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnrollmentRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateEnrollmentRequest$inboundSchema: z.ZodType<
  UpdateEnrollmentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateEnrollmentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateEnrollmentRequest$Outbound = {
  sourcedId: string;
  RequestBody?: UpdateEnrollmentRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateEnrollmentRequest$outboundSchema: z.ZodType<
  UpdateEnrollmentRequest$Outbound,
  z.ZodTypeDef,
  UpdateEnrollmentRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateEnrollmentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateEnrollmentRequest$ {
  /** @deprecated use `UpdateEnrollmentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateEnrollmentRequest$inboundSchema;
  /** @deprecated use `UpdateEnrollmentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateEnrollmentRequest$outboundSchema;
  /** @deprecated use `UpdateEnrollmentRequest$Outbound` instead. */
  export type Outbound = UpdateEnrollmentRequest$Outbound;
}

export function updateEnrollmentRequestToJSON(
  updateEnrollmentRequest: UpdateEnrollmentRequest,
): string {
  return JSON.stringify(
    UpdateEnrollmentRequest$outboundSchema.parse(updateEnrollmentRequest),
  );
}

export function updateEnrollmentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateEnrollmentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateEnrollmentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateEnrollmentRequest' from JSON`,
  );
}
