/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResultRequest = {
  /**
   * The sourcedId of the result
   */
  sourcedId: string;
};

/**
 * Successful response with the result
 */
export type GetResultResponse = {
  /**
   * Represents a result.
   */
  result: components.Result;
};

/** @internal */
export const GetResultRequest$inboundSchema: z.ZodType<
  GetResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetResultRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetResultRequest$outboundSchema: z.ZodType<
  GetResultRequest$Outbound,
  z.ZodTypeDef,
  GetResultRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultRequest$ {
  /** @deprecated use `GetResultRequest$inboundSchema` instead. */
  export const inboundSchema = GetResultRequest$inboundSchema;
  /** @deprecated use `GetResultRequest$outboundSchema` instead. */
  export const outboundSchema = GetResultRequest$outboundSchema;
  /** @deprecated use `GetResultRequest$Outbound` instead. */
  export type Outbound = GetResultRequest$Outbound;
}

export function getResultRequestToJSON(
  getResultRequest: GetResultRequest,
): string {
  return JSON.stringify(
    GetResultRequest$outboundSchema.parse(getResultRequest),
  );
}

export function getResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultRequest' from JSON`,
  );
}

/** @internal */
export const GetResultResponse$inboundSchema: z.ZodType<
  GetResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: components.Result$inboundSchema,
});

/** @internal */
export type GetResultResponse$Outbound = {
  result: components.Result$Outbound;
};

/** @internal */
export const GetResultResponse$outboundSchema: z.ZodType<
  GetResultResponse$Outbound,
  z.ZodTypeDef,
  GetResultResponse
> = z.object({
  result: components.Result$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultResponse$ {
  /** @deprecated use `GetResultResponse$inboundSchema` instead. */
  export const inboundSchema = GetResultResponse$inboundSchema;
  /** @deprecated use `GetResultResponse$outboundSchema` instead. */
  export const outboundSchema = GetResultResponse$outboundSchema;
  /** @deprecated use `GetResultResponse$Outbound` instead. */
  export type Outbound = GetResultResponse$Outbound;
}

export function getResultResponseToJSON(
  getResultResponse: GetResultResponse,
): string {
  return JSON.stringify(
    GetResultResponse$outboundSchema.parse(getResultResponse),
  );
}

export function getResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultResponse' from JSON`,
  );
}
