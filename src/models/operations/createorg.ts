/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateOrgStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateOrgStatus = ClosedEnum<typeof CreateOrgStatus>;

export const CreateOrgType = {
  Department: "department",
  School: "school",
  District: "district",
  Local: "local",
  State: "state",
  National: "national",
} as const;
export type CreateOrgType = ClosedEnum<typeof CreateOrgType>;

export type CreateOrgParent = {
  sourcedId: string;
};

export type CreateOrgOrg = {
  sourcedId?: string | undefined;
  status?: CreateOrgStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: CreateOrgType;
  identifier?: string | undefined;
  parent?: CreateOrgParent | null | undefined;
};

export type CreateOrgRequest = {
  org: CreateOrgOrg;
};

export type CreateOrgSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Organization created successfully
 */
export type CreateOrgResponse = {
  sourcedIdPairs: CreateOrgSourcedIdPairs;
};

/** @internal */
export const CreateOrgStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateOrgStatus
> = z.nativeEnum(CreateOrgStatus);

/** @internal */
export const CreateOrgStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateOrgStatus
> = CreateOrgStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgStatus$ {
  /** @deprecated use `CreateOrgStatus$inboundSchema` instead. */
  export const inboundSchema = CreateOrgStatus$inboundSchema;
  /** @deprecated use `CreateOrgStatus$outboundSchema` instead. */
  export const outboundSchema = CreateOrgStatus$outboundSchema;
}

/** @internal */
export const CreateOrgType$inboundSchema: z.ZodNativeEnum<
  typeof CreateOrgType
> = z.nativeEnum(CreateOrgType);

/** @internal */
export const CreateOrgType$outboundSchema: z.ZodNativeEnum<
  typeof CreateOrgType
> = CreateOrgType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgType$ {
  /** @deprecated use `CreateOrgType$inboundSchema` instead. */
  export const inboundSchema = CreateOrgType$inboundSchema;
  /** @deprecated use `CreateOrgType$outboundSchema` instead. */
  export const outboundSchema = CreateOrgType$outboundSchema;
}

/** @internal */
export const CreateOrgParent$inboundSchema: z.ZodType<
  CreateOrgParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateOrgParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateOrgParent$outboundSchema: z.ZodType<
  CreateOrgParent$Outbound,
  z.ZodTypeDef,
  CreateOrgParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgParent$ {
  /** @deprecated use `CreateOrgParent$inboundSchema` instead. */
  export const inboundSchema = CreateOrgParent$inboundSchema;
  /** @deprecated use `CreateOrgParent$outboundSchema` instead. */
  export const outboundSchema = CreateOrgParent$outboundSchema;
  /** @deprecated use `CreateOrgParent$Outbound` instead. */
  export type Outbound = CreateOrgParent$Outbound;
}

export function createOrgParentToJSON(
  createOrgParent: CreateOrgParent,
): string {
  return JSON.stringify(CreateOrgParent$outboundSchema.parse(createOrgParent));
}

export function createOrgParentFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgParent' from JSON`,
  );
}

/** @internal */
export const CreateOrgOrg$inboundSchema: z.ZodType<
  CreateOrgOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateOrgStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: CreateOrgType$inboundSchema,
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => CreateOrgParent$inboundSchema)).optional(),
});

/** @internal */
export type CreateOrgOrg$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: string;
  identifier?: string | undefined;
  parent?: CreateOrgParent$Outbound | null | undefined;
};

/** @internal */
export const CreateOrgOrg$outboundSchema: z.ZodType<
  CreateOrgOrg$Outbound,
  z.ZodTypeDef,
  CreateOrgOrg
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateOrgStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: CreateOrgType$outboundSchema,
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => CreateOrgParent$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgOrg$ {
  /** @deprecated use `CreateOrgOrg$inboundSchema` instead. */
  export const inboundSchema = CreateOrgOrg$inboundSchema;
  /** @deprecated use `CreateOrgOrg$outboundSchema` instead. */
  export const outboundSchema = CreateOrgOrg$outboundSchema;
  /** @deprecated use `CreateOrgOrg$Outbound` instead. */
  export type Outbound = CreateOrgOrg$Outbound;
}

export function createOrgOrgToJSON(createOrgOrg: CreateOrgOrg): string {
  return JSON.stringify(CreateOrgOrg$outboundSchema.parse(createOrgOrg));
}

export function createOrgOrgFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgOrg' from JSON`,
  );
}

/** @internal */
export const CreateOrgRequest$inboundSchema: z.ZodType<
  CreateOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.lazy(() => CreateOrgOrg$inboundSchema),
});

/** @internal */
export type CreateOrgRequest$Outbound = {
  org: CreateOrgOrg$Outbound;
};

/** @internal */
export const CreateOrgRequest$outboundSchema: z.ZodType<
  CreateOrgRequest$Outbound,
  z.ZodTypeDef,
  CreateOrgRequest
> = z.object({
  org: z.lazy(() => CreateOrgOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgRequest$ {
  /** @deprecated use `CreateOrgRequest$inboundSchema` instead. */
  export const inboundSchema = CreateOrgRequest$inboundSchema;
  /** @deprecated use `CreateOrgRequest$outboundSchema` instead. */
  export const outboundSchema = CreateOrgRequest$outboundSchema;
  /** @deprecated use `CreateOrgRequest$Outbound` instead. */
  export type Outbound = CreateOrgRequest$Outbound;
}

export function createOrgRequestToJSON(
  createOrgRequest: CreateOrgRequest,
): string {
  return JSON.stringify(
    CreateOrgRequest$outboundSchema.parse(createOrgRequest),
  );
}

export function createOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgRequest' from JSON`,
  );
}

/** @internal */
export const CreateOrgSourcedIdPairs$inboundSchema: z.ZodType<
  CreateOrgSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateOrgSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateOrgSourcedIdPairs$outboundSchema: z.ZodType<
  CreateOrgSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateOrgSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgSourcedIdPairs$ {
  /** @deprecated use `CreateOrgSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateOrgSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateOrgSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateOrgSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateOrgSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateOrgSourcedIdPairs$Outbound;
}

export function createOrgSourcedIdPairsToJSON(
  createOrgSourcedIdPairs: CreateOrgSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateOrgSourcedIdPairs$outboundSchema.parse(createOrgSourcedIdPairs),
  );
}

export function createOrgSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateOrgResponse$inboundSchema: z.ZodType<
  CreateOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateOrgSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateOrgResponse$Outbound = {
  sourcedIdPairs: CreateOrgSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateOrgResponse$outboundSchema: z.ZodType<
  CreateOrgResponse$Outbound,
  z.ZodTypeDef,
  CreateOrgResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateOrgSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateOrgResponse$ {
  /** @deprecated use `CreateOrgResponse$inboundSchema` instead. */
  export const inboundSchema = CreateOrgResponse$inboundSchema;
  /** @deprecated use `CreateOrgResponse$outboundSchema` instead. */
  export const outboundSchema = CreateOrgResponse$outboundSchema;
  /** @deprecated use `CreateOrgResponse$Outbound` instead. */
  export type Outbound = CreateOrgResponse$Outbound;
}

export function createOrgResponseToJSON(
  createOrgResponse: CreateOrgResponse,
): string {
  return JSON.stringify(
    CreateOrgResponse$outboundSchema.parse(createOrgResponse),
  );
}

export function createOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateOrgResponse' from JSON`,
  );
}
