/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateResourceStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateResourceStatus = ClosedEnum<typeof CreateResourceStatus>;

export const CreateResourceRole = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type CreateResourceRole = ClosedEnum<typeof CreateResourceRole>;

export const CreateResourceImportance = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type CreateResourceImportance = ClosedEnum<
  typeof CreateResourceImportance
>;

export type CreateResourceResource = {
  sourcedId?: string | undefined;
  status?: CreateResourceStatus | undefined;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<CreateResourceRole> | undefined;
  importance?: CreateResourceImportance | undefined;
  vendorResourceId: string;
  vendorId?: string | undefined;
  applicationId?: string | undefined;
};

export type CreateResourceRequest = {
  resource: CreateResourceResource;
};

export type CreateResourceSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Resource successfully created
 */
export type CreateResourceResponse = {
  sourcedIdPairs: CreateResourceSourcedIdPairs;
};

/** @internal */
export const CreateResourceStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateResourceStatus
> = z.nativeEnum(CreateResourceStatus);

/** @internal */
export const CreateResourceStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateResourceStatus
> = CreateResourceStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceStatus$ {
  /** @deprecated use `CreateResourceStatus$inboundSchema` instead. */
  export const inboundSchema = CreateResourceStatus$inboundSchema;
  /** @deprecated use `CreateResourceStatus$outboundSchema` instead. */
  export const outboundSchema = CreateResourceStatus$outboundSchema;
}

/** @internal */
export const CreateResourceRole$inboundSchema: z.ZodNativeEnum<
  typeof CreateResourceRole
> = z.nativeEnum(CreateResourceRole);

/** @internal */
export const CreateResourceRole$outboundSchema: z.ZodNativeEnum<
  typeof CreateResourceRole
> = CreateResourceRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceRole$ {
  /** @deprecated use `CreateResourceRole$inboundSchema` instead. */
  export const inboundSchema = CreateResourceRole$inboundSchema;
  /** @deprecated use `CreateResourceRole$outboundSchema` instead. */
  export const outboundSchema = CreateResourceRole$outboundSchema;
}

/** @internal */
export const CreateResourceImportance$inboundSchema: z.ZodNativeEnum<
  typeof CreateResourceImportance
> = z.nativeEnum(CreateResourceImportance);

/** @internal */
export const CreateResourceImportance$outboundSchema: z.ZodNativeEnum<
  typeof CreateResourceImportance
> = CreateResourceImportance$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceImportance$ {
  /** @deprecated use `CreateResourceImportance$inboundSchema` instead. */
  export const inboundSchema = CreateResourceImportance$inboundSchema;
  /** @deprecated use `CreateResourceImportance$outboundSchema` instead. */
  export const outboundSchema = CreateResourceImportance$outboundSchema;
}

/** @internal */
export const CreateResourceResource$inboundSchema: z.ZodType<
  CreateResourceResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateResourceStatus$inboundSchema.optional(),
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(CreateResourceRole$inboundSchema).optional(),
  importance: CreateResourceImportance$inboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.string().optional(),
  applicationId: z.string().optional(),
});

/** @internal */
export type CreateResourceResource$Outbound = {
  sourcedId?: string | undefined;
  status?: string | undefined;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  roles?: Array<string> | undefined;
  importance?: string | undefined;
  vendorResourceId: string;
  vendorId?: string | undefined;
  applicationId?: string | undefined;
};

/** @internal */
export const CreateResourceResource$outboundSchema: z.ZodType<
  CreateResourceResource$Outbound,
  z.ZodTypeDef,
  CreateResourceResource
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateResourceStatus$outboundSchema.optional(),
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  roles: z.array(CreateResourceRole$outboundSchema).optional(),
  importance: CreateResourceImportance$outboundSchema.optional(),
  vendorResourceId: z.string(),
  vendorId: z.string().optional(),
  applicationId: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceResource$ {
  /** @deprecated use `CreateResourceResource$inboundSchema` instead. */
  export const inboundSchema = CreateResourceResource$inboundSchema;
  /** @deprecated use `CreateResourceResource$outboundSchema` instead. */
  export const outboundSchema = CreateResourceResource$outboundSchema;
  /** @deprecated use `CreateResourceResource$Outbound` instead. */
  export type Outbound = CreateResourceResource$Outbound;
}

export function createResourceResourceToJSON(
  createResourceResource: CreateResourceResource,
): string {
  return JSON.stringify(
    CreateResourceResource$outboundSchema.parse(createResourceResource),
  );
}

export function createResourceResourceFromJSON(
  jsonString: string,
): SafeParseResult<CreateResourceResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResourceResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResourceResource' from JSON`,
  );
}

/** @internal */
export const CreateResourceRequest$inboundSchema: z.ZodType<
  CreateResourceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.lazy(() => CreateResourceResource$inboundSchema),
});

/** @internal */
export type CreateResourceRequest$Outbound = {
  resource: CreateResourceResource$Outbound;
};

/** @internal */
export const CreateResourceRequest$outboundSchema: z.ZodType<
  CreateResourceRequest$Outbound,
  z.ZodTypeDef,
  CreateResourceRequest
> = z.object({
  resource: z.lazy(() => CreateResourceResource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceRequest$ {
  /** @deprecated use `CreateResourceRequest$inboundSchema` instead. */
  export const inboundSchema = CreateResourceRequest$inboundSchema;
  /** @deprecated use `CreateResourceRequest$outboundSchema` instead. */
  export const outboundSchema = CreateResourceRequest$outboundSchema;
  /** @deprecated use `CreateResourceRequest$Outbound` instead. */
  export type Outbound = CreateResourceRequest$Outbound;
}

export function createResourceRequestToJSON(
  createResourceRequest: CreateResourceRequest,
): string {
  return JSON.stringify(
    CreateResourceRequest$outboundSchema.parse(createResourceRequest),
  );
}

export function createResourceRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateResourceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResourceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResourceRequest' from JSON`,
  );
}

/** @internal */
export const CreateResourceSourcedIdPairs$inboundSchema: z.ZodType<
  CreateResourceSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateResourceSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateResourceSourcedIdPairs$outboundSchema: z.ZodType<
  CreateResourceSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateResourceSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceSourcedIdPairs$ {
  /** @deprecated use `CreateResourceSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateResourceSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateResourceSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateResourceSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateResourceSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateResourceSourcedIdPairs$Outbound;
}

export function createResourceSourcedIdPairsToJSON(
  createResourceSourcedIdPairs: CreateResourceSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateResourceSourcedIdPairs$outboundSchema.parse(
      createResourceSourcedIdPairs,
    ),
  );
}

export function createResourceSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResourceSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResourceSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResourceSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateResourceResponse$inboundSchema: z.ZodType<
  CreateResourceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateResourceSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateResourceResponse$Outbound = {
  sourcedIdPairs: CreateResourceSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateResourceResponse$outboundSchema: z.ZodType<
  CreateResourceResponse$Outbound,
  z.ZodTypeDef,
  CreateResourceResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateResourceSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResourceResponse$ {
  /** @deprecated use `CreateResourceResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResourceResponse$inboundSchema;
  /** @deprecated use `CreateResourceResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResourceResponse$outboundSchema;
  /** @deprecated use `CreateResourceResponse$Outbound` instead. */
  export type Outbound = CreateResourceResponse$Outbound;
}

export function createResourceResponseToJSON(
  createResourceResponse: CreateResourceResponse,
): string {
  return JSON.stringify(
    CreateResourceResponse$outboundSchema.parse(createResourceResponse),
  );
}

export function createResourceResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResourceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResourceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResourceResponse' from JSON`,
  );
}
