/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful response
 */
export type GetAllEnrollmentsResponse = {
  enrollments: Array<components.Enrollment>;
};

/** @internal */
export const GetAllEnrollmentsResponse$inboundSchema: z.ZodType<
  GetAllEnrollmentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollments: z.array(components.Enrollment$inboundSchema),
});

/** @internal */
export type GetAllEnrollmentsResponse$Outbound = {
  enrollments: Array<components.Enrollment$Outbound>;
};

/** @internal */
export const GetAllEnrollmentsResponse$outboundSchema: z.ZodType<
  GetAllEnrollmentsResponse$Outbound,
  z.ZodTypeDef,
  GetAllEnrollmentsResponse
> = z.object({
  enrollments: z.array(components.Enrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllEnrollmentsResponse$ {
  /** @deprecated use `GetAllEnrollmentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllEnrollmentsResponse$inboundSchema;
  /** @deprecated use `GetAllEnrollmentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllEnrollmentsResponse$outboundSchema;
  /** @deprecated use `GetAllEnrollmentsResponse$Outbound` instead. */
  export type Outbound = GetAllEnrollmentsResponse$Outbound;
}

export function getAllEnrollmentsResponseToJSON(
  getAllEnrollmentsResponse: GetAllEnrollmentsResponse,
): string {
  return JSON.stringify(
    GetAllEnrollmentsResponse$outboundSchema.parse(getAllEnrollmentsResponse),
  );
}

export function getAllEnrollmentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllEnrollmentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllEnrollmentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllEnrollmentsResponse' from JSON`,
  );
}
