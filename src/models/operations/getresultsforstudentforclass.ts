/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetResultsForStudentForClassOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetResultsForStudentForClassOrderBy = ClosedEnum<
  typeof GetResultsForStudentForClassOrderBy
>;

export type GetResultsForStudentForClassRequest = {
  /**
   * The sourcedId of the class
   */
  classSourcedId: string;
  /**
   * The sourcedId of the student
   */
  studentSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetResultsForStudentForClassOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Successful response containing a collection of results for the specified student in the class
 */
export type GetResultsForStudentForClassResponseBody = {
  results: Array<components.Result>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetResultsForStudentForClassResponse = {
  result: GetResultsForStudentForClassResponseBody;
};

/** @internal */
export const GetResultsForStudentForClassOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetResultsForStudentForClassOrderBy
> = z.nativeEnum(GetResultsForStudentForClassOrderBy);

/** @internal */
export const GetResultsForStudentForClassOrderBy$outboundSchema:
  z.ZodNativeEnum<typeof GetResultsForStudentForClassOrderBy> =
    GetResultsForStudentForClassOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassOrderBy$ {
  /** @deprecated use `GetResultsForStudentForClassOrderBy$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassOrderBy$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassOrderBy$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassOrderBy$outboundSchema;
}

/** @internal */
export const GetResultsForStudentForClassRequest$inboundSchema: z.ZodType<
  GetResultsForStudentForClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  classSourcedId: z.string(),
  studentSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResultsForStudentForClassOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetResultsForStudentForClassRequest$Outbound = {
  classSourcedId: string;
  studentSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetResultsForStudentForClassRequest$outboundSchema: z.ZodType<
  GetResultsForStudentForClassRequest$Outbound,
  z.ZodTypeDef,
  GetResultsForStudentForClassRequest
> = z.object({
  classSourcedId: z.string(),
  studentSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetResultsForStudentForClassOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassRequest$ {
  /** @deprecated use `GetResultsForStudentForClassRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassRequest$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassRequest$outboundSchema;
  /** @deprecated use `GetResultsForStudentForClassRequest$Outbound` instead. */
  export type Outbound = GetResultsForStudentForClassRequest$Outbound;
}

export function getResultsForStudentForClassRequestToJSON(
  getResultsForStudentForClassRequest: GetResultsForStudentForClassRequest,
): string {
  return JSON.stringify(
    GetResultsForStudentForClassRequest$outboundSchema.parse(
      getResultsForStudentForClassRequest,
    ),
  );
}

export function getResultsForStudentForClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForStudentForClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForStudentForClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForStudentForClassRequest' from JSON`,
  );
}

/** @internal */
export const GetResultsForStudentForClassResponseBody$inboundSchema: z.ZodType<
  GetResultsForStudentForClassResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(components.Result$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetResultsForStudentForClassResponseBody$Outbound = {
  results: Array<components.Result$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetResultsForStudentForClassResponseBody$outboundSchema: z.ZodType<
  GetResultsForStudentForClassResponseBody$Outbound,
  z.ZodTypeDef,
  GetResultsForStudentForClassResponseBody
> = z.object({
  results: z.array(components.Result$outboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassResponseBody$ {
  /** @deprecated use `GetResultsForStudentForClassResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassResponseBody$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassResponseBody$outboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponseBody$Outbound` instead. */
  export type Outbound = GetResultsForStudentForClassResponseBody$Outbound;
}

export function getResultsForStudentForClassResponseBodyToJSON(
  getResultsForStudentForClassResponseBody:
    GetResultsForStudentForClassResponseBody,
): string {
  return JSON.stringify(
    GetResultsForStudentForClassResponseBody$outboundSchema.parse(
      getResultsForStudentForClassResponseBody,
    ),
  );
}

export function getResultsForStudentForClassResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetResultsForStudentForClassResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForStudentForClassResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetResultsForStudentForClassResponseBody' from JSON`,
  );
}

/** @internal */
export const GetResultsForStudentForClassResponse$inboundSchema: z.ZodType<
  GetResultsForStudentForClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetResultsForStudentForClassResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetResultsForStudentForClassResponse$Outbound = {
  Result: GetResultsForStudentForClassResponseBody$Outbound;
};

/** @internal */
export const GetResultsForStudentForClassResponse$outboundSchema: z.ZodType<
  GetResultsForStudentForClassResponse$Outbound,
  z.ZodTypeDef,
  GetResultsForStudentForClassResponse
> = z.object({
  result: z.lazy(() => GetResultsForStudentForClassResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassResponse$ {
  /** @deprecated use `GetResultsForStudentForClassResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassResponse$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassResponse$outboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponse$Outbound` instead. */
  export type Outbound = GetResultsForStudentForClassResponse$Outbound;
}

export function getResultsForStudentForClassResponseToJSON(
  getResultsForStudentForClassResponse: GetResultsForStudentForClassResponse,
): string {
  return JSON.stringify(
    GetResultsForStudentForClassResponse$outboundSchema.parse(
      getResultsForStudentForClassResponse,
    ),
  );
}

export function getResultsForStudentForClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForStudentForClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForStudentForClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForStudentForClassResponse' from JSON`,
  );
}
