/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetResultsForStudentForClassRequest = {
  /**
   * The sourcedId of the class
   */
  classSourcedId: string;
  /**
   * The sourcedId of the student
   */
  studentSourcedId: string;
};

/**
 * Successful response containing a collection of results for the specified student in the class
 */
export type GetResultsForStudentForClassResponse = {
  results: Array<components.Result>;
};

/** @internal */
export const GetResultsForStudentForClassRequest$inboundSchema: z.ZodType<
  GetResultsForStudentForClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  classSourcedId: z.string(),
  studentSourcedId: z.string(),
});

/** @internal */
export type GetResultsForStudentForClassRequest$Outbound = {
  classSourcedId: string;
  studentSourcedId: string;
};

/** @internal */
export const GetResultsForStudentForClassRequest$outboundSchema: z.ZodType<
  GetResultsForStudentForClassRequest$Outbound,
  z.ZodTypeDef,
  GetResultsForStudentForClassRequest
> = z.object({
  classSourcedId: z.string(),
  studentSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassRequest$ {
  /** @deprecated use `GetResultsForStudentForClassRequest$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassRequest$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassRequest$outboundSchema;
  /** @deprecated use `GetResultsForStudentForClassRequest$Outbound` instead. */
  export type Outbound = GetResultsForStudentForClassRequest$Outbound;
}

export function getResultsForStudentForClassRequestToJSON(
  getResultsForStudentForClassRequest: GetResultsForStudentForClassRequest,
): string {
  return JSON.stringify(
    GetResultsForStudentForClassRequest$outboundSchema.parse(
      getResultsForStudentForClassRequest,
    ),
  );
}

export function getResultsForStudentForClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForStudentForClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForStudentForClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForStudentForClassRequest' from JSON`,
  );
}

/** @internal */
export const GetResultsForStudentForClassResponse$inboundSchema: z.ZodType<
  GetResultsForStudentForClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  results: z.array(components.Result$inboundSchema),
});

/** @internal */
export type GetResultsForStudentForClassResponse$Outbound = {
  results: Array<components.Result$Outbound>;
};

/** @internal */
export const GetResultsForStudentForClassResponse$outboundSchema: z.ZodType<
  GetResultsForStudentForClassResponse$Outbound,
  z.ZodTypeDef,
  GetResultsForStudentForClassResponse
> = z.object({
  results: z.array(components.Result$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetResultsForStudentForClassResponse$ {
  /** @deprecated use `GetResultsForStudentForClassResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetResultsForStudentForClassResponse$inboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetResultsForStudentForClassResponse$outboundSchema;
  /** @deprecated use `GetResultsForStudentForClassResponse$Outbound` instead. */
  export type Outbound = GetResultsForStudentForClassResponse$Outbound;
}

export function getResultsForStudentForClassResponseToJSON(
  getResultsForStudentForClassResponse: GetResultsForStudentForClassResponse,
): string {
  return JSON.stringify(
    GetResultsForStudentForClassResponse$outboundSchema.parse(
      getResultsForStudentForClassResponse,
    ),
  );
}

export function getResultsForStudentForClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetResultsForStudentForClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetResultsForStudentForClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetResultsForStudentForClassResponse' from JSON`,
  );
}
