/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetStudentRequest = {
  /**
   * The sourcedId of the student
   */
  sourcedId: string;
};

export const GetStudentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetStudentStatus = ClosedEnum<typeof GetStudentStatus>;

export type GetStudentUserId = {
  type: string;
  identifier: string;
};

export const GetStudentRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetStudentRoleType = ClosedEnum<typeof GetStudentRoleType>;

export const GetStudentRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetStudentRoleEnum = ClosedEnum<typeof GetStudentRoleEnum>;

export type GetStudentOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetStudentRole = {
  roleType: GetStudentRoleType;
  role: GetStudentRoleEnum;
  org: GetStudentOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetStudentType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetStudentType = ClosedEnum<typeof GetStudentType>;

export type GetStudentAgent = {
  href: string;
  sourcedId: string;
  type: GetStudentType;
};

export type GetStudentPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetStudentUser = {
  sourcedId: string;
  status: GetStudentStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetStudentUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetStudentRole>;
  agents: Array<GetStudentAgent>;
  primaryOrg?: GetStudentPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Successful response with the student
 */
export type GetStudentResponse = {
  user: GetStudentUser;
};

/** @internal */
export const GetStudentRequest$inboundSchema: z.ZodType<
  GetStudentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetStudentRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetStudentRequest$outboundSchema: z.ZodType<
  GetStudentRequest$Outbound,
  z.ZodTypeDef,
  GetStudentRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentRequest$ {
  /** @deprecated use `GetStudentRequest$inboundSchema` instead. */
  export const inboundSchema = GetStudentRequest$inboundSchema;
  /** @deprecated use `GetStudentRequest$outboundSchema` instead. */
  export const outboundSchema = GetStudentRequest$outboundSchema;
  /** @deprecated use `GetStudentRequest$Outbound` instead. */
  export type Outbound = GetStudentRequest$Outbound;
}

export function getStudentRequestToJSON(
  getStudentRequest: GetStudentRequest,
): string {
  return JSON.stringify(
    GetStudentRequest$outboundSchema.parse(getStudentRequest),
  );
}

export function getStudentRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentRequest' from JSON`,
  );
}

/** @internal */
export const GetStudentStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentStatus
> = z.nativeEnum(GetStudentStatus);

/** @internal */
export const GetStudentStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentStatus
> = GetStudentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentStatus$ {
  /** @deprecated use `GetStudentStatus$inboundSchema` instead. */
  export const inboundSchema = GetStudentStatus$inboundSchema;
  /** @deprecated use `GetStudentStatus$outboundSchema` instead. */
  export const outboundSchema = GetStudentStatus$outboundSchema;
}

/** @internal */
export const GetStudentUserId$inboundSchema: z.ZodType<
  GetStudentUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetStudentUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetStudentUserId$outboundSchema: z.ZodType<
  GetStudentUserId$Outbound,
  z.ZodTypeDef,
  GetStudentUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentUserId$ {
  /** @deprecated use `GetStudentUserId$inboundSchema` instead. */
  export const inboundSchema = GetStudentUserId$inboundSchema;
  /** @deprecated use `GetStudentUserId$outboundSchema` instead. */
  export const outboundSchema = GetStudentUserId$outboundSchema;
  /** @deprecated use `GetStudentUserId$Outbound` instead. */
  export type Outbound = GetStudentUserId$Outbound;
}

export function getStudentUserIdToJSON(
  getStudentUserId: GetStudentUserId,
): string {
  return JSON.stringify(
    GetStudentUserId$outboundSchema.parse(getStudentUserId),
  );
}

export function getStudentUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentUserId' from JSON`,
  );
}

/** @internal */
export const GetStudentRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentRoleType
> = z.nativeEnum(GetStudentRoleType);

/** @internal */
export const GetStudentRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentRoleType
> = GetStudentRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentRoleType$ {
  /** @deprecated use `GetStudentRoleType$inboundSchema` instead. */
  export const inboundSchema = GetStudentRoleType$inboundSchema;
  /** @deprecated use `GetStudentRoleType$outboundSchema` instead. */
  export const outboundSchema = GetStudentRoleType$outboundSchema;
}

/** @internal */
export const GetStudentRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentRoleEnum
> = z.nativeEnum(GetStudentRoleEnum);

/** @internal */
export const GetStudentRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentRoleEnum
> = GetStudentRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentRoleEnum$ {
  /** @deprecated use `GetStudentRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetStudentRoleEnum$inboundSchema;
  /** @deprecated use `GetStudentRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetStudentRoleEnum$outboundSchema;
}

/** @internal */
export const GetStudentOrg$inboundSchema: z.ZodType<
  GetStudentOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStudentOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentOrg$outboundSchema: z.ZodType<
  GetStudentOrg$Outbound,
  z.ZodTypeDef,
  GetStudentOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentOrg$ {
  /** @deprecated use `GetStudentOrg$inboundSchema` instead. */
  export const inboundSchema = GetStudentOrg$inboundSchema;
  /** @deprecated use `GetStudentOrg$outboundSchema` instead. */
  export const outboundSchema = GetStudentOrg$outboundSchema;
  /** @deprecated use `GetStudentOrg$Outbound` instead. */
  export type Outbound = GetStudentOrg$Outbound;
}

export function getStudentOrgToJSON(getStudentOrg: GetStudentOrg): string {
  return JSON.stringify(GetStudentOrg$outboundSchema.parse(getStudentOrg));
}

export function getStudentOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentOrg' from JSON`,
  );
}

/** @internal */
export const GetStudentRole$inboundSchema: z.ZodType<
  GetStudentRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetStudentRoleType$inboundSchema,
  role: GetStudentRoleEnum$inboundSchema,
  org: z.lazy(() => GetStudentOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetStudentRole$Outbound = {
  roleType: string;
  role: string;
  org: GetStudentOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetStudentRole$outboundSchema: z.ZodType<
  GetStudentRole$Outbound,
  z.ZodTypeDef,
  GetStudentRole
> = z.object({
  roleType: GetStudentRoleType$outboundSchema,
  role: GetStudentRoleEnum$outboundSchema,
  org: z.lazy(() => GetStudentOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentRole$ {
  /** @deprecated use `GetStudentRole$inboundSchema` instead. */
  export const inboundSchema = GetStudentRole$inboundSchema;
  /** @deprecated use `GetStudentRole$outboundSchema` instead. */
  export const outboundSchema = GetStudentRole$outboundSchema;
  /** @deprecated use `GetStudentRole$Outbound` instead. */
  export type Outbound = GetStudentRole$Outbound;
}

export function getStudentRoleToJSON(getStudentRole: GetStudentRole): string {
  return JSON.stringify(GetStudentRole$outboundSchema.parse(getStudentRole));
}

export function getStudentRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentRole' from JSON`,
  );
}

/** @internal */
export const GetStudentType$inboundSchema: z.ZodNativeEnum<
  typeof GetStudentType
> = z.nativeEnum(GetStudentType);

/** @internal */
export const GetStudentType$outboundSchema: z.ZodNativeEnum<
  typeof GetStudentType
> = GetStudentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentType$ {
  /** @deprecated use `GetStudentType$inboundSchema` instead. */
  export const inboundSchema = GetStudentType$inboundSchema;
  /** @deprecated use `GetStudentType$outboundSchema` instead. */
  export const outboundSchema = GetStudentType$outboundSchema;
}

/** @internal */
export const GetStudentAgent$inboundSchema: z.ZodType<
  GetStudentAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetStudentType$inboundSchema,
});

/** @internal */
export type GetStudentAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentAgent$outboundSchema: z.ZodType<
  GetStudentAgent$Outbound,
  z.ZodTypeDef,
  GetStudentAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetStudentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentAgent$ {
  /** @deprecated use `GetStudentAgent$inboundSchema` instead. */
  export const inboundSchema = GetStudentAgent$inboundSchema;
  /** @deprecated use `GetStudentAgent$outboundSchema` instead. */
  export const outboundSchema = GetStudentAgent$outboundSchema;
  /** @deprecated use `GetStudentAgent$Outbound` instead. */
  export type Outbound = GetStudentAgent$Outbound;
}

export function getStudentAgentToJSON(
  getStudentAgent: GetStudentAgent,
): string {
  return JSON.stringify(GetStudentAgent$outboundSchema.parse(getStudentAgent));
}

export function getStudentAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentAgent' from JSON`,
  );
}

/** @internal */
export const GetStudentPrimaryOrg$inboundSchema: z.ZodType<
  GetStudentPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetStudentPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetStudentPrimaryOrg$outboundSchema: z.ZodType<
  GetStudentPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetStudentPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentPrimaryOrg$ {
  /** @deprecated use `GetStudentPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetStudentPrimaryOrg$inboundSchema;
  /** @deprecated use `GetStudentPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetStudentPrimaryOrg$outboundSchema;
  /** @deprecated use `GetStudentPrimaryOrg$Outbound` instead. */
  export type Outbound = GetStudentPrimaryOrg$Outbound;
}

export function getStudentPrimaryOrgToJSON(
  getStudentPrimaryOrg: GetStudentPrimaryOrg,
): string {
  return JSON.stringify(
    GetStudentPrimaryOrg$outboundSchema.parse(getStudentPrimaryOrg),
  );
}

export function getStudentPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetStudentUser$inboundSchema: z.ZodType<
  GetStudentUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetStudentStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetStudentUserId$inboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetStudentRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetStudentAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetStudentPrimaryOrg$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetStudentUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetStudentUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetStudentRole$Outbound>;
  agents: Array<GetStudentAgent$Outbound>;
  primaryOrg?: GetStudentPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetStudentUser$outboundSchema: z.ZodType<
  GetStudentUser$Outbound,
  z.ZodTypeDef,
  GetStudentUser
> = z.object({
  sourcedId: z.string(),
  status: GetStudentStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetStudentUserId$outboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetStudentRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetStudentAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetStudentPrimaryOrg$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentUser$ {
  /** @deprecated use `GetStudentUser$inboundSchema` instead. */
  export const inboundSchema = GetStudentUser$inboundSchema;
  /** @deprecated use `GetStudentUser$outboundSchema` instead. */
  export const outboundSchema = GetStudentUser$outboundSchema;
  /** @deprecated use `GetStudentUser$Outbound` instead. */
  export type Outbound = GetStudentUser$Outbound;
}

export function getStudentUserToJSON(getStudentUser: GetStudentUser): string {
  return JSON.stringify(GetStudentUser$outboundSchema.parse(getStudentUser));
}

export function getStudentUserFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentUser' from JSON`,
  );
}

/** @internal */
export const GetStudentResponse$inboundSchema: z.ZodType<
  GetStudentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => GetStudentUser$inboundSchema),
});

/** @internal */
export type GetStudentResponse$Outbound = {
  user: GetStudentUser$Outbound;
};

/** @internal */
export const GetStudentResponse$outboundSchema: z.ZodType<
  GetStudentResponse$Outbound,
  z.ZodTypeDef,
  GetStudentResponse
> = z.object({
  user: z.lazy(() => GetStudentUser$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetStudentResponse$ {
  /** @deprecated use `GetStudentResponse$inboundSchema` instead. */
  export const inboundSchema = GetStudentResponse$inboundSchema;
  /** @deprecated use `GetStudentResponse$outboundSchema` instead. */
  export const outboundSchema = GetStudentResponse$outboundSchema;
  /** @deprecated use `GetStudentResponse$Outbound` instead. */
  export type Outbound = GetStudentResponse$Outbound;
}

export function getStudentResponseToJSON(
  getStudentResponse: GetStudentResponse,
): string {
  return JSON.stringify(
    GetStudentResponse$outboundSchema.parse(getStudentResponse),
  );
}

export function getStudentResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetStudentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetStudentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetStudentResponse' from JSON`,
  );
}
