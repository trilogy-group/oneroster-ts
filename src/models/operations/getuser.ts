/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetUserRequest = {
  /**
   * The sourcedId of the user
   */
  sourcedId: string;
};

export const GetUserStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetUserStatus = ClosedEnum<typeof GetUserStatus>;

export type GetUserUserId = {
  type: string;
  identifier: string;
};

export const GetUserRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetUserRoleType = ClosedEnum<typeof GetUserRoleType>;

export const GetUserRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetUserRoleEnum = ClosedEnum<typeof GetUserRoleEnum>;

export type GetUserOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetUserRole = {
  roleType: GetUserRoleType;
  role: GetUserRoleEnum;
  org: GetUserOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetUserType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetUserType = ClosedEnum<typeof GetUserType>;

export type GetUserAgent = {
  href: string;
  sourcedId: string;
  type: GetUserType;
};

export type GetUserPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetUserUser = {
  sourcedId: string;
  status: GetUserStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetUserUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetUserRole>;
  agents: Array<GetUserAgent>;
  primaryOrg?: GetUserPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Successful response with the user
 */
export type GetUserResponse = {
  user: GetUserUser;
};

/** @internal */
export const GetUserRequest$inboundSchema: z.ZodType<
  GetUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetUserRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetUserRequest$outboundSchema: z.ZodType<
  GetUserRequest$Outbound,
  z.ZodTypeDef,
  GetUserRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRequest$ {
  /** @deprecated use `GetUserRequest$inboundSchema` instead. */
  export const inboundSchema = GetUserRequest$inboundSchema;
  /** @deprecated use `GetUserRequest$outboundSchema` instead. */
  export const outboundSchema = GetUserRequest$outboundSchema;
  /** @deprecated use `GetUserRequest$Outbound` instead. */
  export type Outbound = GetUserRequest$Outbound;
}

export function getUserRequestToJSON(getUserRequest: GetUserRequest): string {
  return JSON.stringify(GetUserRequest$outboundSchema.parse(getUserRequest));
}

export function getUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserRequest' from JSON`,
  );
}

/** @internal */
export const GetUserStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetUserStatus
> = z.nativeEnum(GetUserStatus);

/** @internal */
export const GetUserStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetUserStatus
> = GetUserStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserStatus$ {
  /** @deprecated use `GetUserStatus$inboundSchema` instead. */
  export const inboundSchema = GetUserStatus$inboundSchema;
  /** @deprecated use `GetUserStatus$outboundSchema` instead. */
  export const outboundSchema = GetUserStatus$outboundSchema;
}

/** @internal */
export const GetUserUserId$inboundSchema: z.ZodType<
  GetUserUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetUserUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetUserUserId$outboundSchema: z.ZodType<
  GetUserUserId$Outbound,
  z.ZodTypeDef,
  GetUserUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserUserId$ {
  /** @deprecated use `GetUserUserId$inboundSchema` instead. */
  export const inboundSchema = GetUserUserId$inboundSchema;
  /** @deprecated use `GetUserUserId$outboundSchema` instead. */
  export const outboundSchema = GetUserUserId$outboundSchema;
  /** @deprecated use `GetUserUserId$Outbound` instead. */
  export type Outbound = GetUserUserId$Outbound;
}

export function getUserUserIdToJSON(getUserUserId: GetUserUserId): string {
  return JSON.stringify(GetUserUserId$outboundSchema.parse(getUserUserId));
}

export function getUserUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetUserUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserUserId' from JSON`,
  );
}

/** @internal */
export const GetUserRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetUserRoleType
> = z.nativeEnum(GetUserRoleType);

/** @internal */
export const GetUserRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetUserRoleType
> = GetUserRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRoleType$ {
  /** @deprecated use `GetUserRoleType$inboundSchema` instead. */
  export const inboundSchema = GetUserRoleType$inboundSchema;
  /** @deprecated use `GetUserRoleType$outboundSchema` instead. */
  export const outboundSchema = GetUserRoleType$outboundSchema;
}

/** @internal */
export const GetUserRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetUserRoleEnum
> = z.nativeEnum(GetUserRoleEnum);

/** @internal */
export const GetUserRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetUserRoleEnum
> = GetUserRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRoleEnum$ {
  /** @deprecated use `GetUserRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetUserRoleEnum$inboundSchema;
  /** @deprecated use `GetUserRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetUserRoleEnum$outboundSchema;
}

/** @internal */
export const GetUserOrg$inboundSchema: z.ZodType<
  GetUserOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetUserOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetUserOrg$outboundSchema: z.ZodType<
  GetUserOrg$Outbound,
  z.ZodTypeDef,
  GetUserOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserOrg$ {
  /** @deprecated use `GetUserOrg$inboundSchema` instead. */
  export const inboundSchema = GetUserOrg$inboundSchema;
  /** @deprecated use `GetUserOrg$outboundSchema` instead. */
  export const outboundSchema = GetUserOrg$outboundSchema;
  /** @deprecated use `GetUserOrg$Outbound` instead. */
  export type Outbound = GetUserOrg$Outbound;
}

export function getUserOrgToJSON(getUserOrg: GetUserOrg): string {
  return JSON.stringify(GetUserOrg$outboundSchema.parse(getUserOrg));
}

export function getUserOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetUserOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserOrg' from JSON`,
  );
}

/** @internal */
export const GetUserRole$inboundSchema: z.ZodType<
  GetUserRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetUserRoleType$inboundSchema,
  role: GetUserRoleEnum$inboundSchema,
  org: z.lazy(() => GetUserOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetUserRole$Outbound = {
  roleType: string;
  role: string;
  org: GetUserOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetUserRole$outboundSchema: z.ZodType<
  GetUserRole$Outbound,
  z.ZodTypeDef,
  GetUserRole
> = z.object({
  roleType: GetUserRoleType$outboundSchema,
  role: GetUserRoleEnum$outboundSchema,
  org: z.lazy(() => GetUserOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserRole$ {
  /** @deprecated use `GetUserRole$inboundSchema` instead. */
  export const inboundSchema = GetUserRole$inboundSchema;
  /** @deprecated use `GetUserRole$outboundSchema` instead. */
  export const outboundSchema = GetUserRole$outboundSchema;
  /** @deprecated use `GetUserRole$Outbound` instead. */
  export type Outbound = GetUserRole$Outbound;
}

export function getUserRoleToJSON(getUserRole: GetUserRole): string {
  return JSON.stringify(GetUserRole$outboundSchema.parse(getUserRole));
}

export function getUserRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetUserRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserRole' from JSON`,
  );
}

/** @internal */
export const GetUserType$inboundSchema: z.ZodNativeEnum<typeof GetUserType> = z
  .nativeEnum(GetUserType);

/** @internal */
export const GetUserType$outboundSchema: z.ZodNativeEnum<typeof GetUserType> =
  GetUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserType$ {
  /** @deprecated use `GetUserType$inboundSchema` instead. */
  export const inboundSchema = GetUserType$inboundSchema;
  /** @deprecated use `GetUserType$outboundSchema` instead. */
  export const outboundSchema = GetUserType$outboundSchema;
}

/** @internal */
export const GetUserAgent$inboundSchema: z.ZodType<
  GetUserAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetUserType$inboundSchema,
});

/** @internal */
export type GetUserAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetUserAgent$outboundSchema: z.ZodType<
  GetUserAgent$Outbound,
  z.ZodTypeDef,
  GetUserAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetUserType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserAgent$ {
  /** @deprecated use `GetUserAgent$inboundSchema` instead. */
  export const inboundSchema = GetUserAgent$inboundSchema;
  /** @deprecated use `GetUserAgent$outboundSchema` instead. */
  export const outboundSchema = GetUserAgent$outboundSchema;
  /** @deprecated use `GetUserAgent$Outbound` instead. */
  export type Outbound = GetUserAgent$Outbound;
}

export function getUserAgentToJSON(getUserAgent: GetUserAgent): string {
  return JSON.stringify(GetUserAgent$outboundSchema.parse(getUserAgent));
}

export function getUserAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetUserAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserAgent' from JSON`,
  );
}

/** @internal */
export const GetUserPrimaryOrg$inboundSchema: z.ZodType<
  GetUserPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetUserPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetUserPrimaryOrg$outboundSchema: z.ZodType<
  GetUserPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetUserPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserPrimaryOrg$ {
  /** @deprecated use `GetUserPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetUserPrimaryOrg$inboundSchema;
  /** @deprecated use `GetUserPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetUserPrimaryOrg$outboundSchema;
  /** @deprecated use `GetUserPrimaryOrg$Outbound` instead. */
  export type Outbound = GetUserPrimaryOrg$Outbound;
}

export function getUserPrimaryOrgToJSON(
  getUserPrimaryOrg: GetUserPrimaryOrg,
): string {
  return JSON.stringify(
    GetUserPrimaryOrg$outboundSchema.parse(getUserPrimaryOrg),
  );
}

export function getUserPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetUserPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetUserUser$inboundSchema: z.ZodType<
  GetUserUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetUserStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetUserUserId$inboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetUserRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetUserAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetUserPrimaryOrg$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetUserUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetUserUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetUserRole$Outbound>;
  agents: Array<GetUserAgent$Outbound>;
  primaryOrg?: GetUserPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetUserUser$outboundSchema: z.ZodType<
  GetUserUser$Outbound,
  z.ZodTypeDef,
  GetUserUser
> = z.object({
  sourcedId: z.string(),
  status: GetUserStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetUserUserId$outboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetUserRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetUserAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetUserPrimaryOrg$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserUser$ {
  /** @deprecated use `GetUserUser$inboundSchema` instead. */
  export const inboundSchema = GetUserUser$inboundSchema;
  /** @deprecated use `GetUserUser$outboundSchema` instead. */
  export const outboundSchema = GetUserUser$outboundSchema;
  /** @deprecated use `GetUserUser$Outbound` instead. */
  export type Outbound = GetUserUser$Outbound;
}

export function getUserUserToJSON(getUserUser: GetUserUser): string {
  return JSON.stringify(GetUserUser$outboundSchema.parse(getUserUser));
}

export function getUserUserFromJSON(
  jsonString: string,
): SafeParseResult<GetUserUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserUser' from JSON`,
  );
}

/** @internal */
export const GetUserResponse$inboundSchema: z.ZodType<
  GetUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => GetUserUser$inboundSchema),
});

/** @internal */
export type GetUserResponse$Outbound = {
  user: GetUserUser$Outbound;
};

/** @internal */
export const GetUserResponse$outboundSchema: z.ZodType<
  GetUserResponse$Outbound,
  z.ZodTypeDef,
  GetUserResponse
> = z.object({
  user: z.lazy(() => GetUserUser$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetUserResponse$ {
  /** @deprecated use `GetUserResponse$inboundSchema` instead. */
  export const inboundSchema = GetUserResponse$inboundSchema;
  /** @deprecated use `GetUserResponse$outboundSchema` instead. */
  export const outboundSchema = GetUserResponse$outboundSchema;
  /** @deprecated use `GetUserResponse$Outbound` instead. */
  export type Outbound = GetUserResponse$Outbound;
}

export function getUserResponseToJSON(
  getUserResponse: GetUserResponse,
): string {
  return JSON.stringify(GetUserResponse$outboundSchema.parse(getUserResponse));
}

export function getUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetUserResponse' from JSON`,
  );
}
