/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateCourseStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateCourseStatus = ClosedEnum<typeof CreateCourseStatus>;

export type CreateCourseAcademicSession = {
  sourcedId: string;
};

export type CreateCourseOrg = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type CreateCourseCourse = {
  sourcedId?: string | undefined;
  status: CreateCourseStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: CreateCourseAcademicSession | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateCourseOrg;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

export type CreateCourseRequest = {
  /**
   * Represents a course.
   */
  course: CreateCourseCourse;
};

export type CreateCourseSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Created Course Successfully
 */
export type CreateCourseResponse = {
  sourcedIdPairs: CreateCourseSourcedIdPairs;
};

/** @internal */
export const CreateCourseStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateCourseStatus
> = z.nativeEnum(CreateCourseStatus);

/** @internal */
export const CreateCourseStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateCourseStatus
> = CreateCourseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseStatus$ {
  /** @deprecated use `CreateCourseStatus$inboundSchema` instead. */
  export const inboundSchema = CreateCourseStatus$inboundSchema;
  /** @deprecated use `CreateCourseStatus$outboundSchema` instead. */
  export const outboundSchema = CreateCourseStatus$outboundSchema;
}

/** @internal */
export const CreateCourseAcademicSession$inboundSchema: z.ZodType<
  CreateCourseAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateCourseAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateCourseAcademicSession$outboundSchema: z.ZodType<
  CreateCourseAcademicSession$Outbound,
  z.ZodTypeDef,
  CreateCourseAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseAcademicSession$ {
  /** @deprecated use `CreateCourseAcademicSession$inboundSchema` instead. */
  export const inboundSchema = CreateCourseAcademicSession$inboundSchema;
  /** @deprecated use `CreateCourseAcademicSession$outboundSchema` instead. */
  export const outboundSchema = CreateCourseAcademicSession$outboundSchema;
  /** @deprecated use `CreateCourseAcademicSession$Outbound` instead. */
  export type Outbound = CreateCourseAcademicSession$Outbound;
}

export function createCourseAcademicSessionToJSON(
  createCourseAcademicSession: CreateCourseAcademicSession,
): string {
  return JSON.stringify(
    CreateCourseAcademicSession$outboundSchema.parse(
      createCourseAcademicSession,
    ),
  );
}

export function createCourseAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseAcademicSession' from JSON`,
  );
}

/** @internal */
export const CreateCourseOrg$inboundSchema: z.ZodType<
  CreateCourseOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateCourseOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateCourseOrg$outboundSchema: z.ZodType<
  CreateCourseOrg$Outbound,
  z.ZodTypeDef,
  CreateCourseOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseOrg$ {
  /** @deprecated use `CreateCourseOrg$inboundSchema` instead. */
  export const inboundSchema = CreateCourseOrg$inboundSchema;
  /** @deprecated use `CreateCourseOrg$outboundSchema` instead. */
  export const outboundSchema = CreateCourseOrg$outboundSchema;
  /** @deprecated use `CreateCourseOrg$Outbound` instead. */
  export type Outbound = CreateCourseOrg$Outbound;
}

export function createCourseOrgToJSON(
  createCourseOrg: CreateCourseOrg,
): string {
  return JSON.stringify(CreateCourseOrg$outboundSchema.parse(createCourseOrg));
}

export function createCourseOrgFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseOrg' from JSON`,
  );
}

/** @internal */
export const CreateCourseCourse$inboundSchema: z.ZodType<
  CreateCourseCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateCourseStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateCourseAcademicSession$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateCourseOrg$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type CreateCourseCourse$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: CreateCourseAcademicSession$Outbound | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: CreateCourseOrg$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const CreateCourseCourse$outboundSchema: z.ZodType<
  CreateCourseCourse$Outbound,
  z.ZodTypeDef,
  CreateCourseCourse
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateCourseStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => CreateCourseAcademicSession$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => CreateCourseOrg$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseCourse$ {
  /** @deprecated use `CreateCourseCourse$inboundSchema` instead. */
  export const inboundSchema = CreateCourseCourse$inboundSchema;
  /** @deprecated use `CreateCourseCourse$outboundSchema` instead. */
  export const outboundSchema = CreateCourseCourse$outboundSchema;
  /** @deprecated use `CreateCourseCourse$Outbound` instead. */
  export type Outbound = CreateCourseCourse$Outbound;
}

export function createCourseCourseToJSON(
  createCourseCourse: CreateCourseCourse,
): string {
  return JSON.stringify(
    CreateCourseCourse$outboundSchema.parse(createCourseCourse),
  );
}

export function createCourseCourseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseCourse' from JSON`,
  );
}

/** @internal */
export const CreateCourseRequest$inboundSchema: z.ZodType<
  CreateCourseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => CreateCourseCourse$inboundSchema),
});

/** @internal */
export type CreateCourseRequest$Outbound = {
  course: CreateCourseCourse$Outbound;
};

/** @internal */
export const CreateCourseRequest$outboundSchema: z.ZodType<
  CreateCourseRequest$Outbound,
  z.ZodTypeDef,
  CreateCourseRequest
> = z.object({
  course: z.lazy(() => CreateCourseCourse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseRequest$ {
  /** @deprecated use `CreateCourseRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCourseRequest$inboundSchema;
  /** @deprecated use `CreateCourseRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCourseRequest$outboundSchema;
  /** @deprecated use `CreateCourseRequest$Outbound` instead. */
  export type Outbound = CreateCourseRequest$Outbound;
}

export function createCourseRequestToJSON(
  createCourseRequest: CreateCourseRequest,
): string {
  return JSON.stringify(
    CreateCourseRequest$outboundSchema.parse(createCourseRequest),
  );
}

export function createCourseRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseRequest' from JSON`,
  );
}

/** @internal */
export const CreateCourseSourcedIdPairs$inboundSchema: z.ZodType<
  CreateCourseSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateCourseSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateCourseSourcedIdPairs$outboundSchema: z.ZodType<
  CreateCourseSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateCourseSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseSourcedIdPairs$ {
  /** @deprecated use `CreateCourseSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateCourseSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateCourseSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateCourseSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateCourseSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateCourseSourcedIdPairs$Outbound;
}

export function createCourseSourcedIdPairsToJSON(
  createCourseSourcedIdPairs: CreateCourseSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateCourseSourcedIdPairs$outboundSchema.parse(createCourseSourcedIdPairs),
  );
}

export function createCourseSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateCourseResponse$inboundSchema: z.ZodType<
  CreateCourseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateCourseSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateCourseResponse$Outbound = {
  sourcedIdPairs: CreateCourseSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateCourseResponse$outboundSchema: z.ZodType<
  CreateCourseResponse$Outbound,
  z.ZodTypeDef,
  CreateCourseResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateCourseSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseResponse$ {
  /** @deprecated use `CreateCourseResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCourseResponse$inboundSchema;
  /** @deprecated use `CreateCourseResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCourseResponse$outboundSchema;
  /** @deprecated use `CreateCourseResponse$Outbound` instead. */
  export type Outbound = CreateCourseResponse$Outbound;
}

export function createCourseResponseToJSON(
  createCourseResponse: CreateCourseResponse,
): string {
  return JSON.stringify(
    CreateCourseResponse$outboundSchema.parse(createCourseResponse),
  );
}

export function createCourseResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseResponse' from JSON`,
  );
}
