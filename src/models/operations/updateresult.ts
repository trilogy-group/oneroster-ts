/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateResultRequestBody = {
  /**
   * Represents a result.
   */
  result: components.Result;
};

export type UpdateResultRequest = {
  /**
   * The sourcedId of the result to update
   */
  sourcedId: string;
  requestBody: UpdateResultRequestBody;
};

/**
 * Result successfully updated
 */
export type UpdateResultResponse = {
  /**
   * Represents a result.
   */
  result: components.Result;
};

/** @internal */
export const UpdateResultRequestBody$inboundSchema: z.ZodType<
  UpdateResultRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: components.Result$inboundSchema,
});

/** @internal */
export type UpdateResultRequestBody$Outbound = {
  result: components.Result$Outbound;
};

/** @internal */
export const UpdateResultRequestBody$outboundSchema: z.ZodType<
  UpdateResultRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateResultRequestBody
> = z.object({
  result: components.Result$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResultRequestBody$ {
  /** @deprecated use `UpdateResultRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateResultRequestBody$inboundSchema;
  /** @deprecated use `UpdateResultRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateResultRequestBody$outboundSchema;
  /** @deprecated use `UpdateResultRequestBody$Outbound` instead. */
  export type Outbound = UpdateResultRequestBody$Outbound;
}

export function updateResultRequestBodyToJSON(
  updateResultRequestBody: UpdateResultRequestBody,
): string {
  return JSON.stringify(
    UpdateResultRequestBody$outboundSchema.parse(updateResultRequestBody),
  );
}

export function updateResultRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResultRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResultRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResultRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateResultRequest$inboundSchema: z.ZodType<
  UpdateResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateResultRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateResultRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateResultRequestBody$Outbound;
};

/** @internal */
export const UpdateResultRequest$outboundSchema: z.ZodType<
  UpdateResultRequest$Outbound,
  z.ZodTypeDef,
  UpdateResultRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateResultRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResultRequest$ {
  /** @deprecated use `UpdateResultRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateResultRequest$inboundSchema;
  /** @deprecated use `UpdateResultRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateResultRequest$outboundSchema;
  /** @deprecated use `UpdateResultRequest$Outbound` instead. */
  export type Outbound = UpdateResultRequest$Outbound;
}

export function updateResultRequestToJSON(
  updateResultRequest: UpdateResultRequest,
): string {
  return JSON.stringify(
    UpdateResultRequest$outboundSchema.parse(updateResultRequest),
  );
}

export function updateResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResultRequest' from JSON`,
  );
}

/** @internal */
export const UpdateResultResponse$inboundSchema: z.ZodType<
  UpdateResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: components.Result$inboundSchema,
});

/** @internal */
export type UpdateResultResponse$Outbound = {
  result: components.Result$Outbound;
};

/** @internal */
export const UpdateResultResponse$outboundSchema: z.ZodType<
  UpdateResultResponse$Outbound,
  z.ZodTypeDef,
  UpdateResultResponse
> = z.object({
  result: components.Result$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateResultResponse$ {
  /** @deprecated use `UpdateResultResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateResultResponse$inboundSchema;
  /** @deprecated use `UpdateResultResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateResultResponse$outboundSchema;
  /** @deprecated use `UpdateResultResponse$Outbound` instead. */
  export type Outbound = UpdateResultResponse$Outbound;
}

export function updateResultResponseToJSON(
  updateResultResponse: UpdateResultResponse,
): string {
  return JSON.stringify(
    UpdateResultResponse$outboundSchema.parse(updateResultResponse),
  );
}

export function updateResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateResultResponse' from JSON`,
  );
}
