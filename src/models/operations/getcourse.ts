/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetCourseRequest = {
  /**
   * The sourcedId of the course
   */
  sourcedId: string;
};

export const GetCourseStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetCourseStatus = ClosedEnum<typeof GetCourseStatus>;

export type GetCourseAcademicSession = {
  sourcedId: string;
};

export type GetCourseOrg = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type GetCourseCourse = {
  sourcedId?: string | undefined;
  status: GetCourseStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: GetCourseAcademicSession | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetCourseOrg;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/**
 * Single Course
 */
export type GetCourseResponse = {
  /**
   * Represents a course.
   */
  course: GetCourseCourse;
};

/** @internal */
export const GetCourseRequest$inboundSchema: z.ZodType<
  GetCourseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetCourseRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetCourseRequest$outboundSchema: z.ZodType<
  GetCourseRequest$Outbound,
  z.ZodTypeDef,
  GetCourseRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseRequest$ {
  /** @deprecated use `GetCourseRequest$inboundSchema` instead. */
  export const inboundSchema = GetCourseRequest$inboundSchema;
  /** @deprecated use `GetCourseRequest$outboundSchema` instead. */
  export const outboundSchema = GetCourseRequest$outboundSchema;
  /** @deprecated use `GetCourseRequest$Outbound` instead. */
  export type Outbound = GetCourseRequest$Outbound;
}

export function getCourseRequestToJSON(
  getCourseRequest: GetCourseRequest,
): string {
  return JSON.stringify(
    GetCourseRequest$outboundSchema.parse(getCourseRequest),
  );
}

export function getCourseRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseRequest' from JSON`,
  );
}

/** @internal */
export const GetCourseStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetCourseStatus
> = z.nativeEnum(GetCourseStatus);

/** @internal */
export const GetCourseStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetCourseStatus
> = GetCourseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseStatus$ {
  /** @deprecated use `GetCourseStatus$inboundSchema` instead. */
  export const inboundSchema = GetCourseStatus$inboundSchema;
  /** @deprecated use `GetCourseStatus$outboundSchema` instead. */
  export const outboundSchema = GetCourseStatus$outboundSchema;
}

/** @internal */
export const GetCourseAcademicSession$inboundSchema: z.ZodType<
  GetCourseAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetCourseAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetCourseAcademicSession$outboundSchema: z.ZodType<
  GetCourseAcademicSession$Outbound,
  z.ZodTypeDef,
  GetCourseAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseAcademicSession$ {
  /** @deprecated use `GetCourseAcademicSession$inboundSchema` instead. */
  export const inboundSchema = GetCourseAcademicSession$inboundSchema;
  /** @deprecated use `GetCourseAcademicSession$outboundSchema` instead. */
  export const outboundSchema = GetCourseAcademicSession$outboundSchema;
  /** @deprecated use `GetCourseAcademicSession$Outbound` instead. */
  export type Outbound = GetCourseAcademicSession$Outbound;
}

export function getCourseAcademicSessionToJSON(
  getCourseAcademicSession: GetCourseAcademicSession,
): string {
  return JSON.stringify(
    GetCourseAcademicSession$outboundSchema.parse(getCourseAcademicSession),
  );
}

export function getCourseAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseAcademicSession' from JSON`,
  );
}

/** @internal */
export const GetCourseOrg$inboundSchema: z.ZodType<
  GetCourseOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetCourseOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetCourseOrg$outboundSchema: z.ZodType<
  GetCourseOrg$Outbound,
  z.ZodTypeDef,
  GetCourseOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseOrg$ {
  /** @deprecated use `GetCourseOrg$inboundSchema` instead. */
  export const inboundSchema = GetCourseOrg$inboundSchema;
  /** @deprecated use `GetCourseOrg$outboundSchema` instead. */
  export const outboundSchema = GetCourseOrg$outboundSchema;
  /** @deprecated use `GetCourseOrg$Outbound` instead. */
  export type Outbound = GetCourseOrg$Outbound;
}

export function getCourseOrgToJSON(getCourseOrg: GetCourseOrg): string {
  return JSON.stringify(GetCourseOrg$outboundSchema.parse(getCourseOrg));
}

export function getCourseOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseOrg' from JSON`,
  );
}

/** @internal */
export const GetCourseCourse$inboundSchema: z.ZodType<
  GetCourseCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetCourseAcademicSession$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetCourseOrg$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetCourseCourse$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: GetCourseAcademicSession$Outbound | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: GetCourseOrg$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const GetCourseCourse$outboundSchema: z.ZodType<
  GetCourseCourse$Outbound,
  z.ZodTypeDef,
  GetCourseCourse
> = z.object({
  sourcedId: z.string().optional(),
  status: GetCourseStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => GetCourseAcademicSession$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => GetCourseOrg$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseCourse$ {
  /** @deprecated use `GetCourseCourse$inboundSchema` instead. */
  export const inboundSchema = GetCourseCourse$inboundSchema;
  /** @deprecated use `GetCourseCourse$outboundSchema` instead. */
  export const outboundSchema = GetCourseCourse$outboundSchema;
  /** @deprecated use `GetCourseCourse$Outbound` instead. */
  export type Outbound = GetCourseCourse$Outbound;
}

export function getCourseCourseToJSON(
  getCourseCourse: GetCourseCourse,
): string {
  return JSON.stringify(GetCourseCourse$outboundSchema.parse(getCourseCourse));
}

export function getCourseCourseFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseCourse' from JSON`,
  );
}

/** @internal */
export const GetCourseResponse$inboundSchema: z.ZodType<
  GetCourseResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => GetCourseCourse$inboundSchema),
});

/** @internal */
export type GetCourseResponse$Outbound = {
  course: GetCourseCourse$Outbound;
};

/** @internal */
export const GetCourseResponse$outboundSchema: z.ZodType<
  GetCourseResponse$Outbound,
  z.ZodTypeDef,
  GetCourseResponse
> = z.object({
  course: z.lazy(() => GetCourseCourse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetCourseResponse$ {
  /** @deprecated use `GetCourseResponse$inboundSchema` instead. */
  export const inboundSchema = GetCourseResponse$inboundSchema;
  /** @deprecated use `GetCourseResponse$outboundSchema` instead. */
  export const outboundSchema = GetCourseResponse$outboundSchema;
  /** @deprecated use `GetCourseResponse$Outbound` instead. */
  export type Outbound = GetCourseResponse$Outbound;
}

export function getCourseResponseToJSON(
  getCourseResponse: GetCourseResponse,
): string {
  return JSON.stringify(
    GetCourseResponse$outboundSchema.parse(getCourseResponse),
  );
}

export function getCourseResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetCourseResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetCourseResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetCourseResponse' from JSON`,
  );
}
