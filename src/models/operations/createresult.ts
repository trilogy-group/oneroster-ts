/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CreateResultRequest = {
  /**
   * Represents a result.
   */
  result: components.Result;
};

export type CreateResultSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Result successfully created
 */
export type CreateResultResponse = {
  sourcedIdPairs: CreateResultSourcedIdPairs;
};

/** @internal */
export const CreateResultRequest$inboundSchema: z.ZodType<
  CreateResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  result: components.Result$inboundSchema,
});

/** @internal */
export type CreateResultRequest$Outbound = {
  result: components.Result$Outbound;
};

/** @internal */
export const CreateResultRequest$outboundSchema: z.ZodType<
  CreateResultRequest$Outbound,
  z.ZodTypeDef,
  CreateResultRequest
> = z.object({
  result: components.Result$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultRequest$ {
  /** @deprecated use `CreateResultRequest$inboundSchema` instead. */
  export const inboundSchema = CreateResultRequest$inboundSchema;
  /** @deprecated use `CreateResultRequest$outboundSchema` instead. */
  export const outboundSchema = CreateResultRequest$outboundSchema;
  /** @deprecated use `CreateResultRequest$Outbound` instead. */
  export type Outbound = CreateResultRequest$Outbound;
}

export function createResultRequestToJSON(
  createResultRequest: CreateResultRequest,
): string {
  return JSON.stringify(
    CreateResultRequest$outboundSchema.parse(createResultRequest),
  );
}

export function createResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultRequest' from JSON`,
  );
}

/** @internal */
export const CreateResultSourcedIdPairs$inboundSchema: z.ZodType<
  CreateResultSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateResultSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateResultSourcedIdPairs$outboundSchema: z.ZodType<
  CreateResultSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateResultSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultSourcedIdPairs$ {
  /** @deprecated use `CreateResultSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = CreateResultSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateResultSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = CreateResultSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateResultSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateResultSourcedIdPairs$Outbound;
}

export function createResultSourcedIdPairsToJSON(
  createResultSourcedIdPairs: CreateResultSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateResultSourcedIdPairs$outboundSchema.parse(createResultSourcedIdPairs),
  );
}

export function createResultSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResultSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateResultResponse$inboundSchema: z.ZodType<
  CreateResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateResultSourcedIdPairs$inboundSchema),
});

/** @internal */
export type CreateResultResponse$Outbound = {
  sourcedIdPairs: CreateResultSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateResultResponse$outboundSchema: z.ZodType<
  CreateResultResponse$Outbound,
  z.ZodTypeDef,
  CreateResultResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => CreateResultSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateResultResponse$ {
  /** @deprecated use `CreateResultResponse$inboundSchema` instead. */
  export const inboundSchema = CreateResultResponse$inboundSchema;
  /** @deprecated use `CreateResultResponse$outboundSchema` instead. */
  export const outboundSchema = CreateResultResponse$outboundSchema;
  /** @deprecated use `CreateResultResponse$Outbound` instead. */
  export type Outbound = CreateResultResponse$Outbound;
}

export function createResultResponseToJSON(
  createResultResponse: CreateResultResponse,
): string {
  return JSON.stringify(
    CreateResultResponse$outboundSchema.parse(createResultResponse),
  );
}

export function createResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateResultResponse' from JSON`,
  );
}
