/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllOrgsOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllOrgsOrderBy = ClosedEnum<typeof GetAllOrgsOrderBy>;

export type GetAllOrgsRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllOrgsOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Collection of organizations retrieved successfully
 */
export type GetAllOrgsResponseBody = {
  orgs: Array<components.Org>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetAllOrgsResponse = {
  result: GetAllOrgsResponseBody;
};

/** @internal */
export const GetAllOrgsOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllOrgsOrderBy
> = z.nativeEnum(GetAllOrgsOrderBy);

/** @internal */
export const GetAllOrgsOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllOrgsOrderBy
> = GetAllOrgsOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllOrgsOrderBy$ {
  /** @deprecated use `GetAllOrgsOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllOrgsOrderBy$inboundSchema;
  /** @deprecated use `GetAllOrgsOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllOrgsOrderBy$outboundSchema;
}

/** @internal */
export const GetAllOrgsRequest$inboundSchema: z.ZodType<
  GetAllOrgsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllOrgsOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllOrgsRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllOrgsRequest$outboundSchema: z.ZodType<
  GetAllOrgsRequest$Outbound,
  z.ZodTypeDef,
  GetAllOrgsRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllOrgsOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllOrgsRequest$ {
  /** @deprecated use `GetAllOrgsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllOrgsRequest$inboundSchema;
  /** @deprecated use `GetAllOrgsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllOrgsRequest$outboundSchema;
  /** @deprecated use `GetAllOrgsRequest$Outbound` instead. */
  export type Outbound = GetAllOrgsRequest$Outbound;
}

export function getAllOrgsRequestToJSON(
  getAllOrgsRequest: GetAllOrgsRequest,
): string {
  return JSON.stringify(
    GetAllOrgsRequest$outboundSchema.parse(getAllOrgsRequest),
  );
}

export function getAllOrgsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllOrgsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllOrgsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllOrgsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllOrgsResponseBody$inboundSchema: z.ZodType<
  GetAllOrgsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  orgs: z.array(components.Org$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetAllOrgsResponseBody$Outbound = {
  orgs: Array<components.Org$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetAllOrgsResponseBody$outboundSchema: z.ZodType<
  GetAllOrgsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllOrgsResponseBody
> = z.object({
  orgs: z.array(components.Org$outboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllOrgsResponseBody$ {
  /** @deprecated use `GetAllOrgsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllOrgsResponseBody$inboundSchema;
  /** @deprecated use `GetAllOrgsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllOrgsResponseBody$outboundSchema;
  /** @deprecated use `GetAllOrgsResponseBody$Outbound` instead. */
  export type Outbound = GetAllOrgsResponseBody$Outbound;
}

export function getAllOrgsResponseBodyToJSON(
  getAllOrgsResponseBody: GetAllOrgsResponseBody,
): string {
  return JSON.stringify(
    GetAllOrgsResponseBody$outboundSchema.parse(getAllOrgsResponseBody),
  );
}

export function getAllOrgsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllOrgsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllOrgsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllOrgsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllOrgsResponse$inboundSchema: z.ZodType<
  GetAllOrgsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllOrgsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllOrgsResponse$Outbound = {
  Result: GetAllOrgsResponseBody$Outbound;
};

/** @internal */
export const GetAllOrgsResponse$outboundSchema: z.ZodType<
  GetAllOrgsResponse$Outbound,
  z.ZodTypeDef,
  GetAllOrgsResponse
> = z.object({
  result: z.lazy(() => GetAllOrgsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllOrgsResponse$ {
  /** @deprecated use `GetAllOrgsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllOrgsResponse$inboundSchema;
  /** @deprecated use `GetAllOrgsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllOrgsResponse$outboundSchema;
  /** @deprecated use `GetAllOrgsResponse$Outbound` instead. */
  export type Outbound = GetAllOrgsResponse$Outbound;
}

export function getAllOrgsResponseToJSON(
  getAllOrgsResponse: GetAllOrgsResponse,
): string {
  return JSON.stringify(
    GetAllOrgsResponse$outboundSchema.parse(getAllOrgsResponse),
  );
}

export function getAllOrgsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllOrgsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllOrgsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllOrgsResponse' from JSON`,
  );
}
