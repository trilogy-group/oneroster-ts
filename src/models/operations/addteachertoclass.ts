/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddTeacherToClassUser = {
  sourcedId: string;
};

export type AddTeacherToClassEnrollment = {
  user: AddTeacherToClassUser;
  primary?: boolean | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

export type AddTeacherToClassRequestBody = {
  enrollment: AddTeacherToClassEnrollment;
};

export type AddTeacherToClassRequest = {
  /**
   * Class sourcedId
   */
  classSourcedId: string;
  requestBody?: AddTeacherToClassRequestBody | undefined;
};

export type AddTeacherToClassSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Teacher successfully assigned to class
 */
export type AddTeacherToClassResponse = {
  sourcedIdPairs: AddTeacherToClassSourcedIdPairs;
};

/** @internal */
export const AddTeacherToClassUser$inboundSchema: z.ZodType<
  AddTeacherToClassUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type AddTeacherToClassUser$Outbound = {
  sourcedId: string;
};

/** @internal */
export const AddTeacherToClassUser$outboundSchema: z.ZodType<
  AddTeacherToClassUser$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassUser
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassUser$ {
  /** @deprecated use `AddTeacherToClassUser$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassUser$inboundSchema;
  /** @deprecated use `AddTeacherToClassUser$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassUser$outboundSchema;
  /** @deprecated use `AddTeacherToClassUser$Outbound` instead. */
  export type Outbound = AddTeacherToClassUser$Outbound;
}

export function addTeacherToClassUserToJSON(
  addTeacherToClassUser: AddTeacherToClassUser,
): string {
  return JSON.stringify(
    AddTeacherToClassUser$outboundSchema.parse(addTeacherToClassUser),
  );
}

export function addTeacherToClassUserFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassUser' from JSON`,
  );
}

/** @internal */
export const AddTeacherToClassEnrollment$inboundSchema: z.ZodType<
  AddTeacherToClassEnrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => AddTeacherToClassUser$inboundSchema),
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/** @internal */
export type AddTeacherToClassEnrollment$Outbound = {
  user: AddTeacherToClassUser$Outbound;
  primary: boolean;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

/** @internal */
export const AddTeacherToClassEnrollment$outboundSchema: z.ZodType<
  AddTeacherToClassEnrollment$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassEnrollment
> = z.object({
  user: z.lazy(() => AddTeacherToClassUser$outboundSchema),
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassEnrollment$ {
  /** @deprecated use `AddTeacherToClassEnrollment$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassEnrollment$inboundSchema;
  /** @deprecated use `AddTeacherToClassEnrollment$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassEnrollment$outboundSchema;
  /** @deprecated use `AddTeacherToClassEnrollment$Outbound` instead. */
  export type Outbound = AddTeacherToClassEnrollment$Outbound;
}

export function addTeacherToClassEnrollmentToJSON(
  addTeacherToClassEnrollment: AddTeacherToClassEnrollment,
): string {
  return JSON.stringify(
    AddTeacherToClassEnrollment$outboundSchema.parse(
      addTeacherToClassEnrollment,
    ),
  );
}

export function addTeacherToClassEnrollmentFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassEnrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassEnrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassEnrollment' from JSON`,
  );
}

/** @internal */
export const AddTeacherToClassRequestBody$inboundSchema: z.ZodType<
  AddTeacherToClassRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollment: z.lazy(() => AddTeacherToClassEnrollment$inboundSchema),
});

/** @internal */
export type AddTeacherToClassRequestBody$Outbound = {
  enrollment: AddTeacherToClassEnrollment$Outbound;
};

/** @internal */
export const AddTeacherToClassRequestBody$outboundSchema: z.ZodType<
  AddTeacherToClassRequestBody$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassRequestBody
> = z.object({
  enrollment: z.lazy(() => AddTeacherToClassEnrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassRequestBody$ {
  /** @deprecated use `AddTeacherToClassRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassRequestBody$inboundSchema;
  /** @deprecated use `AddTeacherToClassRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassRequestBody$outboundSchema;
  /** @deprecated use `AddTeacherToClassRequestBody$Outbound` instead. */
  export type Outbound = AddTeacherToClassRequestBody$Outbound;
}

export function addTeacherToClassRequestBodyToJSON(
  addTeacherToClassRequestBody: AddTeacherToClassRequestBody,
): string {
  return JSON.stringify(
    AddTeacherToClassRequestBody$outboundSchema.parse(
      addTeacherToClassRequestBody,
    ),
  );
}

export function addTeacherToClassRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassRequestBody' from JSON`,
  );
}

/** @internal */
export const AddTeacherToClassRequest$inboundSchema: z.ZodType<
  AddTeacherToClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  classSourcedId: z.string(),
  RequestBody: z.lazy(() => AddTeacherToClassRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddTeacherToClassRequest$Outbound = {
  classSourcedId: string;
  RequestBody?: AddTeacherToClassRequestBody$Outbound | undefined;
};

/** @internal */
export const AddTeacherToClassRequest$outboundSchema: z.ZodType<
  AddTeacherToClassRequest$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassRequest
> = z.object({
  classSourcedId: z.string(),
  requestBody: z.lazy(() => AddTeacherToClassRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassRequest$ {
  /** @deprecated use `AddTeacherToClassRequest$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassRequest$inboundSchema;
  /** @deprecated use `AddTeacherToClassRequest$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassRequest$outboundSchema;
  /** @deprecated use `AddTeacherToClassRequest$Outbound` instead. */
  export type Outbound = AddTeacherToClassRequest$Outbound;
}

export function addTeacherToClassRequestToJSON(
  addTeacherToClassRequest: AddTeacherToClassRequest,
): string {
  return JSON.stringify(
    AddTeacherToClassRequest$outboundSchema.parse(addTeacherToClassRequest),
  );
}

export function addTeacherToClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassRequest' from JSON`,
  );
}

/** @internal */
export const AddTeacherToClassSourcedIdPairs$inboundSchema: z.ZodType<
  AddTeacherToClassSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type AddTeacherToClassSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const AddTeacherToClassSourcedIdPairs$outboundSchema: z.ZodType<
  AddTeacherToClassSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassSourcedIdPairs$ {
  /** @deprecated use `AddTeacherToClassSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassSourcedIdPairs$inboundSchema;
  /** @deprecated use `AddTeacherToClassSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassSourcedIdPairs$outboundSchema;
  /** @deprecated use `AddTeacherToClassSourcedIdPairs$Outbound` instead. */
  export type Outbound = AddTeacherToClassSourcedIdPairs$Outbound;
}

export function addTeacherToClassSourcedIdPairsToJSON(
  addTeacherToClassSourcedIdPairs: AddTeacherToClassSourcedIdPairs,
): string {
  return JSON.stringify(
    AddTeacherToClassSourcedIdPairs$outboundSchema.parse(
      addTeacherToClassSourcedIdPairs,
    ),
  );
}

export function addTeacherToClassSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const AddTeacherToClassResponse$inboundSchema: z.ZodType<
  AddTeacherToClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => AddTeacherToClassSourcedIdPairs$inboundSchema),
});

/** @internal */
export type AddTeacherToClassResponse$Outbound = {
  sourcedIdPairs: AddTeacherToClassSourcedIdPairs$Outbound;
};

/** @internal */
export const AddTeacherToClassResponse$outboundSchema: z.ZodType<
  AddTeacherToClassResponse$Outbound,
  z.ZodTypeDef,
  AddTeacherToClassResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => AddTeacherToClassSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddTeacherToClassResponse$ {
  /** @deprecated use `AddTeacherToClassResponse$inboundSchema` instead. */
  export const inboundSchema = AddTeacherToClassResponse$inboundSchema;
  /** @deprecated use `AddTeacherToClassResponse$outboundSchema` instead. */
  export const outboundSchema = AddTeacherToClassResponse$outboundSchema;
  /** @deprecated use `AddTeacherToClassResponse$Outbound` instead. */
  export type Outbound = AddTeacherToClassResponse$Outbound;
}

export function addTeacherToClassResponseToJSON(
  addTeacherToClassResponse: AddTeacherToClassResponse,
): string {
  return JSON.stringify(
    AddTeacherToClassResponse$outboundSchema.parse(addTeacherToClassResponse),
  );
}

export function addTeacherToClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddTeacherToClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddTeacherToClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddTeacherToClassResponse' from JSON`,
  );
}
