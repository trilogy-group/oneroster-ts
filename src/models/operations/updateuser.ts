/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateUserStatusRequest = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateUserStatusRequest = ClosedEnum<
  typeof UpdateUserStatusRequest
>;

export type UpdateUserUserIdRequest = {
  type: string;
  identifier: string;
};

export const UpdateUserRoleTypeRequest = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type UpdateUserRoleTypeRequest = ClosedEnum<
  typeof UpdateUserRoleTypeRequest
>;

export const UpdateUserRoleRequestEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type UpdateUserRoleRequestEnum = ClosedEnum<
  typeof UpdateUserRoleRequestEnum
>;

export type UpdateUserOrgRequest = {
  sourcedId: string;
};

export type UpdateUserRoleRequest = {
  roleType: UpdateUserRoleTypeRequest;
  role: UpdateUserRoleRequestEnum;
  org: UpdateUserOrgRequest;
  userProfile?: string | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

export type UpdateUserPrimaryOrgRequest = {
  sourcedId: string;
};

export type UpdateUserAgentRequest = {
  sourcedId: string;
};

export type UpdateUserUserRequest = {
  sourcedId?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  status?: UpdateUserStatusRequest | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<UpdateUserUserIdRequest> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<UpdateUserRoleRequest>;
  primaryOrg?: UpdateUserPrimaryOrgRequest | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
  agents?: Array<UpdateUserAgentRequest> | undefined;
};

export type UpdateUserRequestBody = {
  user: UpdateUserUserRequest;
};

export type UpdateUserRequest = {
  /**
   * The sourcedId of the user to update
   */
  sourcedId: string;
  requestBody: UpdateUserRequestBody;
};

export const UpdateUserStatusResponse = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateUserStatusResponse = ClosedEnum<
  typeof UpdateUserStatusResponse
>;

export type UpdateUserUserIdResponse = {
  type: string;
  identifier: string;
};

export const UpdateUserRoleTypeResponse = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type UpdateUserRoleTypeResponse = ClosedEnum<
  typeof UpdateUserRoleTypeResponse
>;

export const UpdateUserRoleResponseEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type UpdateUserRoleResponseEnum = ClosedEnum<
  typeof UpdateUserRoleResponseEnum
>;

export type UpdateUserOrgResponse = {
  href: string;
  sourcedId: string;
  type: string;
};

export type UpdateUserRoleResponse = {
  roleType: UpdateUserRoleTypeResponse;
  role: UpdateUserRoleResponseEnum;
  org: UpdateUserOrgResponse;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const UpdateUserType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type UpdateUserType = ClosedEnum<typeof UpdateUserType>;

export type UpdateUserAgentResponse = {
  href: string;
  sourcedId: string;
  type: UpdateUserType;
};

export type UpdateUserPrimaryOrgResponse = {
  href: string;
  sourcedId: string;
  type: string;
};

export type UpdateUserUserResponse = {
  sourcedId: string;
  status: UpdateUserStatusResponse;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<UpdateUserUserIdResponse> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<UpdateUserRoleResponse>;
  agents: Array<UpdateUserAgentResponse>;
  primaryOrg?: UpdateUserPrimaryOrgResponse | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * User successfully updated
 */
export type UpdateUserResponse = {
  user: UpdateUserUserResponse;
};

/** @internal */
export const UpdateUserStatusRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserStatusRequest
> = z.nativeEnum(UpdateUserStatusRequest);

/** @internal */
export const UpdateUserStatusRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserStatusRequest
> = UpdateUserStatusRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserStatusRequest$ {
  /** @deprecated use `UpdateUserStatusRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserStatusRequest$inboundSchema;
  /** @deprecated use `UpdateUserStatusRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserStatusRequest$outboundSchema;
}

/** @internal */
export const UpdateUserUserIdRequest$inboundSchema: z.ZodType<
  UpdateUserUserIdRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type UpdateUserUserIdRequest$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const UpdateUserUserIdRequest$outboundSchema: z.ZodType<
  UpdateUserUserIdRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserUserIdRequest
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserUserIdRequest$ {
  /** @deprecated use `UpdateUserUserIdRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserUserIdRequest$inboundSchema;
  /** @deprecated use `UpdateUserUserIdRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserUserIdRequest$outboundSchema;
  /** @deprecated use `UpdateUserUserIdRequest$Outbound` instead. */
  export type Outbound = UpdateUserUserIdRequest$Outbound;
}

export function updateUserUserIdRequestToJSON(
  updateUserUserIdRequest: UpdateUserUserIdRequest,
): string {
  return JSON.stringify(
    UpdateUserUserIdRequest$outboundSchema.parse(updateUserUserIdRequest),
  );
}

export function updateUserUserIdRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserUserIdRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserUserIdRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserUserIdRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserRoleTypeRequest$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleTypeRequest
> = z.nativeEnum(UpdateUserRoleTypeRequest);

/** @internal */
export const UpdateUserRoleTypeRequest$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleTypeRequest
> = UpdateUserRoleTypeRequest$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleTypeRequest$ {
  /** @deprecated use `UpdateUserRoleTypeRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleTypeRequest$inboundSchema;
  /** @deprecated use `UpdateUserRoleTypeRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleTypeRequest$outboundSchema;
}

/** @internal */
export const UpdateUserRoleRequestEnum$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleRequestEnum
> = z.nativeEnum(UpdateUserRoleRequestEnum);

/** @internal */
export const UpdateUserRoleRequestEnum$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleRequestEnum
> = UpdateUserRoleRequestEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleRequestEnum$ {
  /** @deprecated use `UpdateUserRoleRequestEnum$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleRequestEnum$inboundSchema;
  /** @deprecated use `UpdateUserRoleRequestEnum$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleRequestEnum$outboundSchema;
}

/** @internal */
export const UpdateUserOrgRequest$inboundSchema: z.ZodType<
  UpdateUserOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateUserOrgRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateUserOrgRequest$outboundSchema: z.ZodType<
  UpdateUserOrgRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserOrgRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserOrgRequest$ {
  /** @deprecated use `UpdateUserOrgRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserOrgRequest$inboundSchema;
  /** @deprecated use `UpdateUserOrgRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserOrgRequest$outboundSchema;
  /** @deprecated use `UpdateUserOrgRequest$Outbound` instead. */
  export type Outbound = UpdateUserOrgRequest$Outbound;
}

export function updateUserOrgRequestToJSON(
  updateUserOrgRequest: UpdateUserOrgRequest,
): string {
  return JSON.stringify(
    UpdateUserOrgRequest$outboundSchema.parse(updateUserOrgRequest),
  );
}

export function updateUserOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserOrgRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserRoleRequest$inboundSchema: z.ZodType<
  UpdateUserRoleRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: UpdateUserRoleTypeRequest$inboundSchema,
  role: UpdateUserRoleRequestEnum$inboundSchema,
  org: z.lazy(() => UpdateUserOrgRequest$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/** @internal */
export type UpdateUserRoleRequest$Outbound = {
  roleType: string;
  role: string;
  org: UpdateUserOrgRequest$Outbound;
  userProfile?: string | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

/** @internal */
export const UpdateUserRoleRequest$outboundSchema: z.ZodType<
  UpdateUserRoleRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRoleRequest
> = z.object({
  roleType: UpdateUserRoleTypeRequest$outboundSchema,
  role: UpdateUserRoleRequestEnum$outboundSchema,
  org: z.lazy(() => UpdateUserOrgRequest$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleRequest$ {
  /** @deprecated use `UpdateUserRoleRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleRequest$inboundSchema;
  /** @deprecated use `UpdateUserRoleRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleRequest$outboundSchema;
  /** @deprecated use `UpdateUserRoleRequest$Outbound` instead. */
  export type Outbound = UpdateUserRoleRequest$Outbound;
}

export function updateUserRoleRequestToJSON(
  updateUserRoleRequest: UpdateUserRoleRequest,
): string {
  return JSON.stringify(
    UpdateUserRoleRequest$outboundSchema.parse(updateUserRoleRequest),
  );
}

export function updateUserRoleRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRoleRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRoleRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRoleRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserPrimaryOrgRequest$inboundSchema: z.ZodType<
  UpdateUserPrimaryOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateUserPrimaryOrgRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateUserPrimaryOrgRequest$outboundSchema: z.ZodType<
  UpdateUserPrimaryOrgRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserPrimaryOrgRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserPrimaryOrgRequest$ {
  /** @deprecated use `UpdateUserPrimaryOrgRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserPrimaryOrgRequest$inboundSchema;
  /** @deprecated use `UpdateUserPrimaryOrgRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserPrimaryOrgRequest$outboundSchema;
  /** @deprecated use `UpdateUserPrimaryOrgRequest$Outbound` instead. */
  export type Outbound = UpdateUserPrimaryOrgRequest$Outbound;
}

export function updateUserPrimaryOrgRequestToJSON(
  updateUserPrimaryOrgRequest: UpdateUserPrimaryOrgRequest,
): string {
  return JSON.stringify(
    UpdateUserPrimaryOrgRequest$outboundSchema.parse(
      updateUserPrimaryOrgRequest,
    ),
  );
}

export function updateUserPrimaryOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserPrimaryOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserPrimaryOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserPrimaryOrgRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserAgentRequest$inboundSchema: z.ZodType<
  UpdateUserAgentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateUserAgentRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateUserAgentRequest$outboundSchema: z.ZodType<
  UpdateUserAgentRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserAgentRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserAgentRequest$ {
  /** @deprecated use `UpdateUserAgentRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserAgentRequest$inboundSchema;
  /** @deprecated use `UpdateUserAgentRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserAgentRequest$outboundSchema;
  /** @deprecated use `UpdateUserAgentRequest$Outbound` instead. */
  export type Outbound = UpdateUserAgentRequest$Outbound;
}

export function updateUserAgentRequestToJSON(
  updateUserAgentRequest: UpdateUserAgentRequest,
): string {
  return JSON.stringify(
    UpdateUserAgentRequest$outboundSchema.parse(updateUserAgentRequest),
  );
}

export function updateUserAgentRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserAgentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserAgentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserAgentRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserUserRequest$inboundSchema: z.ZodType<
  UpdateUserUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  status: UpdateUserStatusRequest$inboundSchema.default("active"),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => UpdateUserUserIdRequest$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => UpdateUserRoleRequest$inboundSchema)),
  primaryOrg: z.lazy(() => UpdateUserPrimaryOrgRequest$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  agents: z.array(z.lazy(() => UpdateUserAgentRequest$inboundSchema))
    .optional(),
});

/** @internal */
export type UpdateUserUserRequest$Outbound = {
  sourcedId?: string | undefined;
  metadata?: { [k: string]: any } | undefined;
  status: string;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<UpdateUserUserIdRequest$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<UpdateUserRoleRequest$Outbound>;
  primaryOrg?: UpdateUserPrimaryOrgRequest$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
  agents?: Array<UpdateUserAgentRequest$Outbound> | undefined;
};

/** @internal */
export const UpdateUserUserRequest$outboundSchema: z.ZodType<
  UpdateUserUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserUserRequest
> = z.object({
  sourcedId: z.string().optional(),
  metadata: z.record(z.any()).optional(),
  status: UpdateUserStatusRequest$outboundSchema.default("active"),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => UpdateUserUserIdRequest$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => UpdateUserRoleRequest$outboundSchema)),
  primaryOrg: z.lazy(() => UpdateUserPrimaryOrgRequest$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
  agents: z.array(z.lazy(() => UpdateUserAgentRequest$outboundSchema))
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserUserRequest$ {
  /** @deprecated use `UpdateUserUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserUserRequest$inboundSchema;
  /** @deprecated use `UpdateUserUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserUserRequest$outboundSchema;
  /** @deprecated use `UpdateUserUserRequest$Outbound` instead. */
  export type Outbound = UpdateUserUserRequest$Outbound;
}

export function updateUserUserRequestToJSON(
  updateUserUserRequest: UpdateUserUserRequest,
): string {
  return JSON.stringify(
    UpdateUserUserRequest$outboundSchema.parse(updateUserUserRequest),
  );
}

export function updateUserUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserUserRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequestBody$inboundSchema: z.ZodType<
  UpdateUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => UpdateUserUserRequest$inboundSchema),
});

/** @internal */
export type UpdateUserRequestBody$Outbound = {
  user: UpdateUserUserRequest$Outbound;
};

/** @internal */
export const UpdateUserRequestBody$outboundSchema: z.ZodType<
  UpdateUserRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateUserRequestBody
> = z.object({
  user: z.lazy(() => UpdateUserUserRequest$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequestBody$ {
  /** @deprecated use `UpdateUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequestBody$inboundSchema;
  /** @deprecated use `UpdateUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequestBody$outboundSchema;
  /** @deprecated use `UpdateUserRequestBody$Outbound` instead. */
  export type Outbound = UpdateUserRequestBody$Outbound;
}

export function updateUserRequestBodyToJSON(
  updateUserRequestBody: UpdateUserRequestBody,
): string {
  return JSON.stringify(
    UpdateUserRequestBody$outboundSchema.parse(updateUserRequestBody),
  );
}

export function updateUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateUserRequest$inboundSchema: z.ZodType<
  UpdateUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateUserRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateUserRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateUserRequestBody$Outbound;
};

/** @internal */
export const UpdateUserRequest$outboundSchema: z.ZodType<
  UpdateUserRequest$Outbound,
  z.ZodTypeDef,
  UpdateUserRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateUserRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRequest$ {
  /** @deprecated use `UpdateUserRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRequest$inboundSchema;
  /** @deprecated use `UpdateUserRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRequest$outboundSchema;
  /** @deprecated use `UpdateUserRequest$Outbound` instead. */
  export type Outbound = UpdateUserRequest$Outbound;
}

export function updateUserRequestToJSON(
  updateUserRequest: UpdateUserRequest,
): string {
  return JSON.stringify(
    UpdateUserRequest$outboundSchema.parse(updateUserRequest),
  );
}

export function updateUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRequest' from JSON`,
  );
}

/** @internal */
export const UpdateUserStatusResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserStatusResponse
> = z.nativeEnum(UpdateUserStatusResponse);

/** @internal */
export const UpdateUserStatusResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserStatusResponse
> = UpdateUserStatusResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserStatusResponse$ {
  /** @deprecated use `UpdateUserStatusResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserStatusResponse$inboundSchema;
  /** @deprecated use `UpdateUserStatusResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserStatusResponse$outboundSchema;
}

/** @internal */
export const UpdateUserUserIdResponse$inboundSchema: z.ZodType<
  UpdateUserUserIdResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type UpdateUserUserIdResponse$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const UpdateUserUserIdResponse$outboundSchema: z.ZodType<
  UpdateUserUserIdResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserUserIdResponse
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserUserIdResponse$ {
  /** @deprecated use `UpdateUserUserIdResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserUserIdResponse$inboundSchema;
  /** @deprecated use `UpdateUserUserIdResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserUserIdResponse$outboundSchema;
  /** @deprecated use `UpdateUserUserIdResponse$Outbound` instead. */
  export type Outbound = UpdateUserUserIdResponse$Outbound;
}

export function updateUserUserIdResponseToJSON(
  updateUserUserIdResponse: UpdateUserUserIdResponse,
): string {
  return JSON.stringify(
    UpdateUserUserIdResponse$outboundSchema.parse(updateUserUserIdResponse),
  );
}

export function updateUserUserIdResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserUserIdResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserUserIdResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserUserIdResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserRoleTypeResponse$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleTypeResponse
> = z.nativeEnum(UpdateUserRoleTypeResponse);

/** @internal */
export const UpdateUserRoleTypeResponse$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleTypeResponse
> = UpdateUserRoleTypeResponse$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleTypeResponse$ {
  /** @deprecated use `UpdateUserRoleTypeResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleTypeResponse$inboundSchema;
  /** @deprecated use `UpdateUserRoleTypeResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleTypeResponse$outboundSchema;
}

/** @internal */
export const UpdateUserRoleResponseEnum$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleResponseEnum
> = z.nativeEnum(UpdateUserRoleResponseEnum);

/** @internal */
export const UpdateUserRoleResponseEnum$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserRoleResponseEnum
> = UpdateUserRoleResponseEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleResponseEnum$ {
  /** @deprecated use `UpdateUserRoleResponseEnum$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleResponseEnum$inboundSchema;
  /** @deprecated use `UpdateUserRoleResponseEnum$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleResponseEnum$outboundSchema;
}

/** @internal */
export const UpdateUserOrgResponse$inboundSchema: z.ZodType<
  UpdateUserOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateUserOrgResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const UpdateUserOrgResponse$outboundSchema: z.ZodType<
  UpdateUserOrgResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserOrgResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserOrgResponse$ {
  /** @deprecated use `UpdateUserOrgResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserOrgResponse$inboundSchema;
  /** @deprecated use `UpdateUserOrgResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserOrgResponse$outboundSchema;
  /** @deprecated use `UpdateUserOrgResponse$Outbound` instead. */
  export type Outbound = UpdateUserOrgResponse$Outbound;
}

export function updateUserOrgResponseToJSON(
  updateUserOrgResponse: UpdateUserOrgResponse,
): string {
  return JSON.stringify(
    UpdateUserOrgResponse$outboundSchema.parse(updateUserOrgResponse),
  );
}

export function updateUserOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserOrgResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserRoleResponse$inboundSchema: z.ZodType<
  UpdateUserRoleResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: UpdateUserRoleTypeResponse$inboundSchema,
  role: UpdateUserRoleResponseEnum$inboundSchema,
  org: z.lazy(() => UpdateUserOrgResponse$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type UpdateUserRoleResponse$Outbound = {
  roleType: string;
  role: string;
  org: UpdateUserOrgResponse$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const UpdateUserRoleResponse$outboundSchema: z.ZodType<
  UpdateUserRoleResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserRoleResponse
> = z.object({
  roleType: UpdateUserRoleTypeResponse$outboundSchema,
  role: UpdateUserRoleResponseEnum$outboundSchema,
  org: z.lazy(() => UpdateUserOrgResponse$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserRoleResponse$ {
  /** @deprecated use `UpdateUserRoleResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserRoleResponse$inboundSchema;
  /** @deprecated use `UpdateUserRoleResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserRoleResponse$outboundSchema;
  /** @deprecated use `UpdateUserRoleResponse$Outbound` instead. */
  export type Outbound = UpdateUserRoleResponse$Outbound;
}

export function updateUserRoleResponseToJSON(
  updateUserRoleResponse: UpdateUserRoleResponse,
): string {
  return JSON.stringify(
    UpdateUserRoleResponse$outboundSchema.parse(updateUserRoleResponse),
  );
}

export function updateUserRoleResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserRoleResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserRoleResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserRoleResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateUserType
> = z.nativeEnum(UpdateUserType);

/** @internal */
export const UpdateUserType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateUserType
> = UpdateUserType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserType$ {
  /** @deprecated use `UpdateUserType$inboundSchema` instead. */
  export const inboundSchema = UpdateUserType$inboundSchema;
  /** @deprecated use `UpdateUserType$outboundSchema` instead. */
  export const outboundSchema = UpdateUserType$outboundSchema;
}

/** @internal */
export const UpdateUserAgentResponse$inboundSchema: z.ZodType<
  UpdateUserAgentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: UpdateUserType$inboundSchema,
});

/** @internal */
export type UpdateUserAgentResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const UpdateUserAgentResponse$outboundSchema: z.ZodType<
  UpdateUserAgentResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserAgentResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: UpdateUserType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserAgentResponse$ {
  /** @deprecated use `UpdateUserAgentResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserAgentResponse$inboundSchema;
  /** @deprecated use `UpdateUserAgentResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserAgentResponse$outboundSchema;
  /** @deprecated use `UpdateUserAgentResponse$Outbound` instead. */
  export type Outbound = UpdateUserAgentResponse$Outbound;
}

export function updateUserAgentResponseToJSON(
  updateUserAgentResponse: UpdateUserAgentResponse,
): string {
  return JSON.stringify(
    UpdateUserAgentResponse$outboundSchema.parse(updateUserAgentResponse),
  );
}

export function updateUserAgentResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserAgentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserAgentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserAgentResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserPrimaryOrgResponse$inboundSchema: z.ZodType<
  UpdateUserPrimaryOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type UpdateUserPrimaryOrgResponse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const UpdateUserPrimaryOrgResponse$outboundSchema: z.ZodType<
  UpdateUserPrimaryOrgResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserPrimaryOrgResponse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserPrimaryOrgResponse$ {
  /** @deprecated use `UpdateUserPrimaryOrgResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserPrimaryOrgResponse$inboundSchema;
  /** @deprecated use `UpdateUserPrimaryOrgResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserPrimaryOrgResponse$outboundSchema;
  /** @deprecated use `UpdateUserPrimaryOrgResponse$Outbound` instead. */
  export type Outbound = UpdateUserPrimaryOrgResponse$Outbound;
}

export function updateUserPrimaryOrgResponseToJSON(
  updateUserPrimaryOrgResponse: UpdateUserPrimaryOrgResponse,
): string {
  return JSON.stringify(
    UpdateUserPrimaryOrgResponse$outboundSchema.parse(
      updateUserPrimaryOrgResponse,
    ),
  );
}

export function updateUserPrimaryOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserPrimaryOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserPrimaryOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserPrimaryOrgResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserUserResponse$inboundSchema: z.ZodType<
  UpdateUserUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: UpdateUserStatusResponse$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => UpdateUserUserIdResponse$inboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => UpdateUserRoleResponse$inboundSchema)),
  agents: z.array(z.lazy(() => UpdateUserAgentResponse$inboundSchema)),
  primaryOrg: z.lazy(() => UpdateUserPrimaryOrgResponse$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type UpdateUserUserResponse$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<UpdateUserUserIdResponse$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<UpdateUserRoleResponse$Outbound>;
  agents: Array<UpdateUserAgentResponse$Outbound>;
  primaryOrg?: UpdateUserPrimaryOrgResponse$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const UpdateUserUserResponse$outboundSchema: z.ZodType<
  UpdateUserUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserUserResponse
> = z.object({
  sourcedId: z.string(),
  status: UpdateUserStatusResponse$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => UpdateUserUserIdResponse$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => UpdateUserRoleResponse$outboundSchema)),
  agents: z.array(z.lazy(() => UpdateUserAgentResponse$outboundSchema)),
  primaryOrg: z.lazy(() => UpdateUserPrimaryOrgResponse$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserUserResponse$ {
  /** @deprecated use `UpdateUserUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserUserResponse$inboundSchema;
  /** @deprecated use `UpdateUserUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserUserResponse$outboundSchema;
  /** @deprecated use `UpdateUserUserResponse$Outbound` instead. */
  export type Outbound = UpdateUserUserResponse$Outbound;
}

export function updateUserUserResponseToJSON(
  updateUserUserResponse: UpdateUserUserResponse,
): string {
  return JSON.stringify(
    UpdateUserUserResponse$outboundSchema.parse(updateUserUserResponse),
  );
}

export function updateUserUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserUserResponse' from JSON`,
  );
}

/** @internal */
export const UpdateUserResponse$inboundSchema: z.ZodType<
  UpdateUserResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => UpdateUserUserResponse$inboundSchema),
});

/** @internal */
export type UpdateUserResponse$Outbound = {
  user: UpdateUserUserResponse$Outbound;
};

/** @internal */
export const UpdateUserResponse$outboundSchema: z.ZodType<
  UpdateUserResponse$Outbound,
  z.ZodTypeDef,
  UpdateUserResponse
> = z.object({
  user: z.lazy(() => UpdateUserUserResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateUserResponse$ {
  /** @deprecated use `UpdateUserResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateUserResponse$inboundSchema;
  /** @deprecated use `UpdateUserResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateUserResponse$outboundSchema;
  /** @deprecated use `UpdateUserResponse$Outbound` instead. */
  export type Outbound = UpdateUserResponse$Outbound;
}

export function updateUserResponseToJSON(
  updateUserResponse: UpdateUserResponse,
): string {
  return JSON.stringify(
    UpdateUserResponse$outboundSchema.parse(updateUserResponse),
  );
}

export function updateUserResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateUserResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateUserResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateUserResponse' from JSON`,
  );
}
