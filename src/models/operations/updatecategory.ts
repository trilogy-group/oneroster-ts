/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateCategoryRequestBody = {
  /**
   * Represents a category.
   */
  category: components.Category;
};

export type UpdateCategoryRequest = {
  /**
   * The sourcedId of the category to update
   */
  sourcedId: string;
  requestBody: UpdateCategoryRequestBody;
};

/**
 * Category successfully updated
 */
export type UpdateCategoryResponse = {
  /**
   * Represents a category.
   */
  category: components.Category;
};

/** @internal */
export const UpdateCategoryRequestBody$inboundSchema: z.ZodType<
  UpdateCategoryRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: components.Category$inboundSchema,
});

/** @internal */
export type UpdateCategoryRequestBody$Outbound = {
  category: components.Category$Outbound;
};

/** @internal */
export const UpdateCategoryRequestBody$outboundSchema: z.ZodType<
  UpdateCategoryRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateCategoryRequestBody
> = z.object({
  category: components.Category$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCategoryRequestBody$ {
  /** @deprecated use `UpdateCategoryRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateCategoryRequestBody$inboundSchema;
  /** @deprecated use `UpdateCategoryRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateCategoryRequestBody$outboundSchema;
  /** @deprecated use `UpdateCategoryRequestBody$Outbound` instead. */
  export type Outbound = UpdateCategoryRequestBody$Outbound;
}

export function updateCategoryRequestBodyToJSON(
  updateCategoryRequestBody: UpdateCategoryRequestBody,
): string {
  return JSON.stringify(
    UpdateCategoryRequestBody$outboundSchema.parse(updateCategoryRequestBody),
  );
}

export function updateCategoryRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCategoryRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCategoryRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCategoryRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateCategoryRequest$inboundSchema: z.ZodType<
  UpdateCategoryRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateCategoryRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateCategoryRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateCategoryRequestBody$Outbound;
};

/** @internal */
export const UpdateCategoryRequest$outboundSchema: z.ZodType<
  UpdateCategoryRequest$Outbound,
  z.ZodTypeDef,
  UpdateCategoryRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateCategoryRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCategoryRequest$ {
  /** @deprecated use `UpdateCategoryRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateCategoryRequest$inboundSchema;
  /** @deprecated use `UpdateCategoryRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateCategoryRequest$outboundSchema;
  /** @deprecated use `UpdateCategoryRequest$Outbound` instead. */
  export type Outbound = UpdateCategoryRequest$Outbound;
}

export function updateCategoryRequestToJSON(
  updateCategoryRequest: UpdateCategoryRequest,
): string {
  return JSON.stringify(
    UpdateCategoryRequest$outboundSchema.parse(updateCategoryRequest),
  );
}

export function updateCategoryRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCategoryRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCategoryRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCategoryRequest' from JSON`,
  );
}

/** @internal */
export const UpdateCategoryResponse$inboundSchema: z.ZodType<
  UpdateCategoryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  category: components.Category$inboundSchema,
});

/** @internal */
export type UpdateCategoryResponse$Outbound = {
  category: components.Category$Outbound;
};

/** @internal */
export const UpdateCategoryResponse$outboundSchema: z.ZodType<
  UpdateCategoryResponse$Outbound,
  z.ZodTypeDef,
  UpdateCategoryResponse
> = z.object({
  category: components.Category$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateCategoryResponse$ {
  /** @deprecated use `UpdateCategoryResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateCategoryResponse$inboundSchema;
  /** @deprecated use `UpdateCategoryResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateCategoryResponse$outboundSchema;
  /** @deprecated use `UpdateCategoryResponse$Outbound` instead. */
  export type Outbound = UpdateCategoryResponse$Outbound;
}

export function updateCategoryResponseToJSON(
  updateCategoryResponse: UpdateCategoryResponse,
): string {
  return JSON.stringify(
    UpdateCategoryResponse$outboundSchema.parse(updateCategoryResponse),
  );
}

export function updateCategoryResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateCategoryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateCategoryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateCategoryResponse' from JSON`,
  );
}
