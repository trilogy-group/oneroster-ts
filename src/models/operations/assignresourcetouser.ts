/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignResourceToUserResource = {
  sourcedId: string;
  dateAssigned?: string | undefined;
};

export type AssignResourceToUserRequestBody = {
  resource: AssignResourceToUserResource;
};

export type AssignResourceToUserRequest = {
  /**
   * The sourcedId of the user
   */
  userSourcedId: string;
  requestBody: AssignResourceToUserRequestBody;
};

/** @internal */
export const AssignResourceToUserResource$inboundSchema: z.ZodType<
  AssignResourceToUserResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  dateAssigned: z.string().optional(),
});

/** @internal */
export type AssignResourceToUserResource$Outbound = {
  sourcedId: string;
  dateAssigned?: string | undefined;
};

/** @internal */
export const AssignResourceToUserResource$outboundSchema: z.ZodType<
  AssignResourceToUserResource$Outbound,
  z.ZodTypeDef,
  AssignResourceToUserResource
> = z.object({
  sourcedId: z.string(),
  dateAssigned: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToUserResource$ {
  /** @deprecated use `AssignResourceToUserResource$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToUserResource$inboundSchema;
  /** @deprecated use `AssignResourceToUserResource$outboundSchema` instead. */
  export const outboundSchema = AssignResourceToUserResource$outboundSchema;
  /** @deprecated use `AssignResourceToUserResource$Outbound` instead. */
  export type Outbound = AssignResourceToUserResource$Outbound;
}

export function assignResourceToUserResourceToJSON(
  assignResourceToUserResource: AssignResourceToUserResource,
): string {
  return JSON.stringify(
    AssignResourceToUserResource$outboundSchema.parse(
      assignResourceToUserResource,
    ),
  );
}

export function assignResourceToUserResourceFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToUserResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToUserResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToUserResource' from JSON`,
  );
}

/** @internal */
export const AssignResourceToUserRequestBody$inboundSchema: z.ZodType<
  AssignResourceToUserRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.lazy(() => AssignResourceToUserResource$inboundSchema),
});

/** @internal */
export type AssignResourceToUserRequestBody$Outbound = {
  resource: AssignResourceToUserResource$Outbound;
};

/** @internal */
export const AssignResourceToUserRequestBody$outboundSchema: z.ZodType<
  AssignResourceToUserRequestBody$Outbound,
  z.ZodTypeDef,
  AssignResourceToUserRequestBody
> = z.object({
  resource: z.lazy(() => AssignResourceToUserResource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToUserRequestBody$ {
  /** @deprecated use `AssignResourceToUserRequestBody$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToUserRequestBody$inboundSchema;
  /** @deprecated use `AssignResourceToUserRequestBody$outboundSchema` instead. */
  export const outboundSchema = AssignResourceToUserRequestBody$outboundSchema;
  /** @deprecated use `AssignResourceToUserRequestBody$Outbound` instead. */
  export type Outbound = AssignResourceToUserRequestBody$Outbound;
}

export function assignResourceToUserRequestBodyToJSON(
  assignResourceToUserRequestBody: AssignResourceToUserRequestBody,
): string {
  return JSON.stringify(
    AssignResourceToUserRequestBody$outboundSchema.parse(
      assignResourceToUserRequestBody,
    ),
  );
}

export function assignResourceToUserRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToUserRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToUserRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToUserRequestBody' from JSON`,
  );
}

/** @internal */
export const AssignResourceToUserRequest$inboundSchema: z.ZodType<
  AssignResourceToUserRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  userSourcedId: z.string(),
  RequestBody: z.lazy(() => AssignResourceToUserRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AssignResourceToUserRequest$Outbound = {
  userSourcedId: string;
  RequestBody: AssignResourceToUserRequestBody$Outbound;
};

/** @internal */
export const AssignResourceToUserRequest$outboundSchema: z.ZodType<
  AssignResourceToUserRequest$Outbound,
  z.ZodTypeDef,
  AssignResourceToUserRequest
> = z.object({
  userSourcedId: z.string(),
  requestBody: z.lazy(() => AssignResourceToUserRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToUserRequest$ {
  /** @deprecated use `AssignResourceToUserRequest$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToUserRequest$inboundSchema;
  /** @deprecated use `AssignResourceToUserRequest$outboundSchema` instead. */
  export const outboundSchema = AssignResourceToUserRequest$outboundSchema;
  /** @deprecated use `AssignResourceToUserRequest$Outbound` instead. */
  export type Outbound = AssignResourceToUserRequest$Outbound;
}

export function assignResourceToUserRequestToJSON(
  assignResourceToUserRequest: AssignResourceToUserRequest,
): string {
  return JSON.stringify(
    AssignResourceToUserRequest$outboundSchema.parse(
      assignResourceToUserRequest,
    ),
  );
}

export function assignResourceToUserRequestFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToUserRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToUserRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToUserRequest' from JSON`,
  );
}
