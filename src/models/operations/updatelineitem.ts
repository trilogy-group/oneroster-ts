/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateLineItemRequestBody = {
  /**
   * Represents a line item.
   */
  lineItem: components.LineItem;
};

export type UpdateLineItemRequest = {
  /**
   * The sourcedId of the line item to update
   */
  sourcedId: string;
  requestBody: UpdateLineItemRequestBody;
};

/** @internal */
export const UpdateLineItemRequestBody$inboundSchema: z.ZodType<
  UpdateLineItemRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  lineItem: components.LineItem$inboundSchema,
});

/** @internal */
export type UpdateLineItemRequestBody$Outbound = {
  lineItem: components.LineItem$Outbound;
};

/** @internal */
export const UpdateLineItemRequestBody$outboundSchema: z.ZodType<
  UpdateLineItemRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateLineItemRequestBody
> = z.object({
  lineItem: components.LineItem$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLineItemRequestBody$ {
  /** @deprecated use `UpdateLineItemRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateLineItemRequestBody$inboundSchema;
  /** @deprecated use `UpdateLineItemRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateLineItemRequestBody$outboundSchema;
  /** @deprecated use `UpdateLineItemRequestBody$Outbound` instead. */
  export type Outbound = UpdateLineItemRequestBody$Outbound;
}

export function updateLineItemRequestBodyToJSON(
  updateLineItemRequestBody: UpdateLineItemRequestBody,
): string {
  return JSON.stringify(
    UpdateLineItemRequestBody$outboundSchema.parse(updateLineItemRequestBody),
  );
}

export function updateLineItemRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLineItemRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLineItemRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLineItemRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateLineItemRequest$inboundSchema: z.ZodType<
  UpdateLineItemRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateLineItemRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateLineItemRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateLineItemRequestBody$Outbound;
};

/** @internal */
export const UpdateLineItemRequest$outboundSchema: z.ZodType<
  UpdateLineItemRequest$Outbound,
  z.ZodTypeDef,
  UpdateLineItemRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateLineItemRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateLineItemRequest$ {
  /** @deprecated use `UpdateLineItemRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateLineItemRequest$inboundSchema;
  /** @deprecated use `UpdateLineItemRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateLineItemRequest$outboundSchema;
  /** @deprecated use `UpdateLineItemRequest$Outbound` instead. */
  export type Outbound = UpdateLineItemRequest$Outbound;
}

export function updateLineItemRequestToJSON(
  updateLineItemRequest: UpdateLineItemRequest,
): string {
  return JSON.stringify(
    UpdateLineItemRequest$outboundSchema.parse(updateLineItemRequest),
  );
}

export function updateLineItemRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateLineItemRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateLineItemRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateLineItemRequest' from JSON`,
  );
}
