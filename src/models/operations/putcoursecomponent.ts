/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutCourseComponentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type PutCourseComponentStatus = ClosedEnum<
  typeof PutCourseComponentStatus
>;

export type PutCourseComponentCourse = {
  sourcedId: string;
};

export type PutCourseComponentCourseComponent2 = {
  sourcedId: string;
};

export type PutCourseComponentParent = {
  sourcedId: string;
};

/**
 * Represents a component of a course.
 */
export type PutCourseComponentCourseComponent1 = {
  sourcedId?: string | undefined;
  status: PutCourseComponentStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: PutCourseComponentCourse;
  courseComponent?: PutCourseComponentCourseComponent2 | null | undefined;
  parent?: PutCourseComponentParent | null | undefined;
  title: string;
  sortOrder?: number | undefined;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  /**
   * The date the component is unlocked for the student
   */
  unlockDate?: string | undefined;
};

export type PutCourseComponentRequestBody = {
  /**
   * Represents a component of a course.
   */
  courseComponent: PutCourseComponentCourseComponent1;
};

export type PutCourseComponentRequest = {
  /**
   * The sourcedId of the course component to update
   */
  sourcedId: string;
  requestBody?: PutCourseComponentRequestBody | undefined;
};

/** @internal */
export const PutCourseComponentStatus$inboundSchema: z.ZodNativeEnum<
  typeof PutCourseComponentStatus
> = z.nativeEnum(PutCourseComponentStatus);

/** @internal */
export const PutCourseComponentStatus$outboundSchema: z.ZodNativeEnum<
  typeof PutCourseComponentStatus
> = PutCourseComponentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentStatus$ {
  /** @deprecated use `PutCourseComponentStatus$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentStatus$inboundSchema;
  /** @deprecated use `PutCourseComponentStatus$outboundSchema` instead. */
  export const outboundSchema = PutCourseComponentStatus$outboundSchema;
}

/** @internal */
export const PutCourseComponentCourse$inboundSchema: z.ZodType<
  PutCourseComponentCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutCourseComponentCourse$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutCourseComponentCourse$outboundSchema: z.ZodType<
  PutCourseComponentCourse$Outbound,
  z.ZodTypeDef,
  PutCourseComponentCourse
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentCourse$ {
  /** @deprecated use `PutCourseComponentCourse$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentCourse$inboundSchema;
  /** @deprecated use `PutCourseComponentCourse$outboundSchema` instead. */
  export const outboundSchema = PutCourseComponentCourse$outboundSchema;
  /** @deprecated use `PutCourseComponentCourse$Outbound` instead. */
  export type Outbound = PutCourseComponentCourse$Outbound;
}

export function putCourseComponentCourseToJSON(
  putCourseComponentCourse: PutCourseComponentCourse,
): string {
  return JSON.stringify(
    PutCourseComponentCourse$outboundSchema.parse(putCourseComponentCourse),
  );
}

export function putCourseComponentCourseFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseComponentCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentCourse' from JSON`,
  );
}

/** @internal */
export const PutCourseComponentCourseComponent2$inboundSchema: z.ZodType<
  PutCourseComponentCourseComponent2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutCourseComponentCourseComponent2$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutCourseComponentCourseComponent2$outboundSchema: z.ZodType<
  PutCourseComponentCourseComponent2$Outbound,
  z.ZodTypeDef,
  PutCourseComponentCourseComponent2
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentCourseComponent2$ {
  /** @deprecated use `PutCourseComponentCourseComponent2$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentCourseComponent2$inboundSchema;
  /** @deprecated use `PutCourseComponentCourseComponent2$outboundSchema` instead. */
  export const outboundSchema =
    PutCourseComponentCourseComponent2$outboundSchema;
  /** @deprecated use `PutCourseComponentCourseComponent2$Outbound` instead. */
  export type Outbound = PutCourseComponentCourseComponent2$Outbound;
}

export function putCourseComponentCourseComponent2ToJSON(
  putCourseComponentCourseComponent2: PutCourseComponentCourseComponent2,
): string {
  return JSON.stringify(
    PutCourseComponentCourseComponent2$outboundSchema.parse(
      putCourseComponentCourseComponent2,
    ),
  );
}

export function putCourseComponentCourseComponent2FromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentCourseComponent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutCourseComponentCourseComponent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentCourseComponent2' from JSON`,
  );
}

/** @internal */
export const PutCourseComponentParent$inboundSchema: z.ZodType<
  PutCourseComponentParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutCourseComponentParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutCourseComponentParent$outboundSchema: z.ZodType<
  PutCourseComponentParent$Outbound,
  z.ZodTypeDef,
  PutCourseComponentParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentParent$ {
  /** @deprecated use `PutCourseComponentParent$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentParent$inboundSchema;
  /** @deprecated use `PutCourseComponentParent$outboundSchema` instead. */
  export const outboundSchema = PutCourseComponentParent$outboundSchema;
  /** @deprecated use `PutCourseComponentParent$Outbound` instead. */
  export type Outbound = PutCourseComponentParent$Outbound;
}

export function putCourseComponentParentToJSON(
  putCourseComponentParent: PutCourseComponentParent,
): string {
  return JSON.stringify(
    PutCourseComponentParent$outboundSchema.parse(putCourseComponentParent),
  );
}

export function putCourseComponentParentFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseComponentParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentParent' from JSON`,
  );
}

/** @internal */
export const PutCourseComponentCourseComponent1$inboundSchema: z.ZodType<
  PutCourseComponentCourseComponent1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: PutCourseComponentStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => PutCourseComponentCourse$inboundSchema),
  courseComponent: z.nullable(
    z.lazy(() => PutCourseComponentCourseComponent2$inboundSchema),
  ).optional(),
  parent: z.nullable(z.lazy(() => PutCourseComponentParent$inboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number().optional(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string().optional(),
});

/** @internal */
export type PutCourseComponentCourseComponent1$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: PutCourseComponentCourse$Outbound;
  courseComponent?:
    | PutCourseComponentCourseComponent2$Outbound
    | null
    | undefined;
  parent?: PutCourseComponentParent$Outbound | null | undefined;
  title: string;
  sortOrder?: number | undefined;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  unlockDate?: string | undefined;
};

/** @internal */
export const PutCourseComponentCourseComponent1$outboundSchema: z.ZodType<
  PutCourseComponentCourseComponent1$Outbound,
  z.ZodTypeDef,
  PutCourseComponentCourseComponent1
> = z.object({
  sourcedId: z.string().optional(),
  status: PutCourseComponentStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => PutCourseComponentCourse$outboundSchema),
  courseComponent: z.nullable(
    z.lazy(() => PutCourseComponentCourseComponent2$outboundSchema),
  ).optional(),
  parent: z.nullable(z.lazy(() => PutCourseComponentParent$outboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number().optional(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentCourseComponent1$ {
  /** @deprecated use `PutCourseComponentCourseComponent1$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentCourseComponent1$inboundSchema;
  /** @deprecated use `PutCourseComponentCourseComponent1$outboundSchema` instead. */
  export const outboundSchema =
    PutCourseComponentCourseComponent1$outboundSchema;
  /** @deprecated use `PutCourseComponentCourseComponent1$Outbound` instead. */
  export type Outbound = PutCourseComponentCourseComponent1$Outbound;
}

export function putCourseComponentCourseComponent1ToJSON(
  putCourseComponentCourseComponent1: PutCourseComponentCourseComponent1,
): string {
  return JSON.stringify(
    PutCourseComponentCourseComponent1$outboundSchema.parse(
      putCourseComponentCourseComponent1,
    ),
  );
}

export function putCourseComponentCourseComponent1FromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentCourseComponent1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PutCourseComponentCourseComponent1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentCourseComponent1' from JSON`,
  );
}

/** @internal */
export const PutCourseComponentRequestBody$inboundSchema: z.ZodType<
  PutCourseComponentRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseComponent: z.lazy(() =>
    PutCourseComponentCourseComponent1$inboundSchema
  ),
});

/** @internal */
export type PutCourseComponentRequestBody$Outbound = {
  courseComponent: PutCourseComponentCourseComponent1$Outbound;
};

/** @internal */
export const PutCourseComponentRequestBody$outboundSchema: z.ZodType<
  PutCourseComponentRequestBody$Outbound,
  z.ZodTypeDef,
  PutCourseComponentRequestBody
> = z.object({
  courseComponent: z.lazy(() =>
    PutCourseComponentCourseComponent1$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentRequestBody$ {
  /** @deprecated use `PutCourseComponentRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentRequestBody$inboundSchema;
  /** @deprecated use `PutCourseComponentRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutCourseComponentRequestBody$outboundSchema;
  /** @deprecated use `PutCourseComponentRequestBody$Outbound` instead. */
  export type Outbound = PutCourseComponentRequestBody$Outbound;
}

export function putCourseComponentRequestBodyToJSON(
  putCourseComponentRequestBody: PutCourseComponentRequestBody,
): string {
  return JSON.stringify(
    PutCourseComponentRequestBody$outboundSchema.parse(
      putCourseComponentRequestBody,
    ),
  );
}

export function putCourseComponentRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseComponentRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentRequestBody' from JSON`,
  );
}

/** @internal */
export const PutCourseComponentRequest$inboundSchema: z.ZodType<
  PutCourseComponentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => PutCourseComponentRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutCourseComponentRequest$Outbound = {
  sourcedId: string;
  RequestBody?: PutCourseComponentRequestBody$Outbound | undefined;
};

/** @internal */
export const PutCourseComponentRequest$outboundSchema: z.ZodType<
  PutCourseComponentRequest$Outbound,
  z.ZodTypeDef,
  PutCourseComponentRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => PutCourseComponentRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseComponentRequest$ {
  /** @deprecated use `PutCourseComponentRequest$inboundSchema` instead. */
  export const inboundSchema = PutCourseComponentRequest$inboundSchema;
  /** @deprecated use `PutCourseComponentRequest$outboundSchema` instead. */
  export const outboundSchema = PutCourseComponentRequest$outboundSchema;
  /** @deprecated use `PutCourseComponentRequest$Outbound` instead. */
  export type Outbound = PutCourseComponentRequest$Outbound;
}

export function putCourseComponentRequestToJSON(
  putCourseComponentRequest: PutCourseComponentRequest,
): string {
  return JSON.stringify(
    PutCourseComponentRequest$outboundSchema.parse(putCourseComponentRequest),
  );
}

export function putCourseComponentRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseComponentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseComponentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseComponentRequest' from JSON`,
  );
}
