/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetTeachersForClassInSchoolOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetTeachersForClassInSchoolOrderBy = ClosedEnum<
  typeof GetTeachersForClassInSchoolOrderBy
>;

export type GetTeachersForClassInSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
  /**
   * Class sourced ID
   */
  classSourcedId: string;
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetTeachersForClassInSchoolOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetTeachersForClassInSchoolStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetTeachersForClassInSchoolStatus = ClosedEnum<
  typeof GetTeachersForClassInSchoolStatus
>;

export type GetTeachersForClassInSchoolUserId = {
  type: string;
  identifier: string;
};

export const GetTeachersForClassInSchoolRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetTeachersForClassInSchoolRoleType = ClosedEnum<
  typeof GetTeachersForClassInSchoolRoleType
>;

export const GetTeachersForClassInSchoolRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetTeachersForClassInSchoolRoleEnum = ClosedEnum<
  typeof GetTeachersForClassInSchoolRoleEnum
>;

export type GetTeachersForClassInSchoolOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeachersForClassInSchoolRole = {
  roleType: GetTeachersForClassInSchoolRoleType;
  role: GetTeachersForClassInSchoolRoleEnum;
  org: GetTeachersForClassInSchoolOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetTeachersForClassInSchoolType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetTeachersForClassInSchoolType = ClosedEnum<
  typeof GetTeachersForClassInSchoolType
>;

export type GetTeachersForClassInSchoolAgent = {
  href: string;
  sourcedId: string;
  type: GetTeachersForClassInSchoolType;
};

export type GetTeachersForClassInSchoolPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeachersForClassInSchoolUser = {
  sourcedId: string;
  status: GetTeachersForClassInSchoolStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeachersForClassInSchoolUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeachersForClassInSchoolRole>;
  agents: Array<GetTeachersForClassInSchoolAgent>;
  primaryOrg?: GetTeachersForClassInSchoolPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Collection of teachers successfully retrieved
 */
export type GetTeachersForClassInSchoolResponseBody = {
  users: Array<GetTeachersForClassInSchoolUser>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetTeachersForClassInSchoolResponse = {
  result: GetTeachersForClassInSchoolResponseBody;
};

/** @internal */
export const GetTeachersForClassInSchoolOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolOrderBy
> = z.nativeEnum(GetTeachersForClassInSchoolOrderBy);

/** @internal */
export const GetTeachersForClassInSchoolOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolOrderBy
> = GetTeachersForClassInSchoolOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolOrderBy$ {
  /** @deprecated use `GetTeachersForClassInSchoolOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolOrderBy$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolOrderBy$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolOrderBy$outboundSchema;
}

/** @internal */
export const GetTeachersForClassInSchoolRequest$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
  classSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetTeachersForClassInSchoolOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetTeachersForClassInSchoolRequest$Outbound = {
  schoolSourcedId: string;
  classSourcedId: string;
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetTeachersForClassInSchoolRequest$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
  classSourcedId: z.string(),
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetTeachersForClassInSchoolOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolRequest$ {
  /** @deprecated use `GetTeachersForClassInSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolRequest$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRequest$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolRequest$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRequest$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolRequest$Outbound;
}

export function getTeachersForClassInSchoolRequestToJSON(
  getTeachersForClassInSchoolRequest: GetTeachersForClassInSchoolRequest,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolRequest$outboundSchema.parse(
      getTeachersForClassInSchoolRequest,
    ),
  );
}

export function getTeachersForClassInSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTeachersForClassInSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolStatus
> = z.nativeEnum(GetTeachersForClassInSchoolStatus);

/** @internal */
export const GetTeachersForClassInSchoolStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolStatus
> = GetTeachersForClassInSchoolStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolStatus$ {
  /** @deprecated use `GetTeachersForClassInSchoolStatus$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolStatus$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolStatus$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolStatus$outboundSchema;
}

/** @internal */
export const GetTeachersForClassInSchoolUserId$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetTeachersForClassInSchoolUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetTeachersForClassInSchoolUserId$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolUserId$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolUserId$ {
  /** @deprecated use `GetTeachersForClassInSchoolUserId$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolUserId$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolUserId$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolUserId$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolUserId$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolUserId$Outbound;
}

export function getTeachersForClassInSchoolUserIdToJSON(
  getTeachersForClassInSchoolUserId: GetTeachersForClassInSchoolUserId,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolUserId$outboundSchema.parse(
      getTeachersForClassInSchoolUserId,
    ),
  );
}

export function getTeachersForClassInSchoolUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForClassInSchoolUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolUserId' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolRoleType
> = z.nativeEnum(GetTeachersForClassInSchoolRoleType);

/** @internal */
export const GetTeachersForClassInSchoolRoleType$outboundSchema:
  z.ZodNativeEnum<typeof GetTeachersForClassInSchoolRoleType> =
    GetTeachersForClassInSchoolRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolRoleType$ {
  /** @deprecated use `GetTeachersForClassInSchoolRoleType$inboundSchema` instead. */
  export const inboundSchema =
    GetTeachersForClassInSchoolRoleType$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRoleType$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolRoleType$outboundSchema;
}

/** @internal */
export const GetTeachersForClassInSchoolRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolRoleEnum
> = z.nativeEnum(GetTeachersForClassInSchoolRoleEnum);

/** @internal */
export const GetTeachersForClassInSchoolRoleEnum$outboundSchema:
  z.ZodNativeEnum<typeof GetTeachersForClassInSchoolRoleEnum> =
    GetTeachersForClassInSchoolRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolRoleEnum$ {
  /** @deprecated use `GetTeachersForClassInSchoolRoleEnum$inboundSchema` instead. */
  export const inboundSchema =
    GetTeachersForClassInSchoolRoleEnum$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRoleEnum$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolRoleEnum$outboundSchema;
}

/** @internal */
export const GetTeachersForClassInSchoolOrg$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeachersForClassInSchoolOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForClassInSchoolOrg$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolOrg$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolOrg$ {
  /** @deprecated use `GetTeachersForClassInSchoolOrg$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolOrg$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolOrg$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForClassInSchoolOrg$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolOrg$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolOrg$Outbound;
}

export function getTeachersForClassInSchoolOrgToJSON(
  getTeachersForClassInSchoolOrg: GetTeachersForClassInSchoolOrg,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolOrg$outboundSchema.parse(
      getTeachersForClassInSchoolOrg,
    ),
  );
}

export function getTeachersForClassInSchoolOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForClassInSchoolOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolOrg' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolRole$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetTeachersForClassInSchoolRoleType$inboundSchema,
  role: GetTeachersForClassInSchoolRoleEnum$inboundSchema,
  org: z.lazy(() => GetTeachersForClassInSchoolOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetTeachersForClassInSchoolRole$Outbound = {
  roleType: string;
  role: string;
  org: GetTeachersForClassInSchoolOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetTeachersForClassInSchoolRole$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolRole$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolRole
> = z.object({
  roleType: GetTeachersForClassInSchoolRoleType$outboundSchema,
  role: GetTeachersForClassInSchoolRoleEnum$outboundSchema,
  org: z.lazy(() => GetTeachersForClassInSchoolOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolRole$ {
  /** @deprecated use `GetTeachersForClassInSchoolRole$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolRole$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRole$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForClassInSchoolRole$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolRole$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolRole$Outbound;
}

export function getTeachersForClassInSchoolRoleToJSON(
  getTeachersForClassInSchoolRole: GetTeachersForClassInSchoolRole,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolRole$outboundSchema.parse(
      getTeachersForClassInSchoolRole,
    ),
  );
}

export function getTeachersForClassInSchoolRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForClassInSchoolRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolRole' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolType
> = z.nativeEnum(GetTeachersForClassInSchoolType);

/** @internal */
export const GetTeachersForClassInSchoolType$outboundSchema: z.ZodNativeEnum<
  typeof GetTeachersForClassInSchoolType
> = GetTeachersForClassInSchoolType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolType$ {
  /** @deprecated use `GetTeachersForClassInSchoolType$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolType$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolType$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForClassInSchoolType$outboundSchema;
}

/** @internal */
export const GetTeachersForClassInSchoolAgent$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeachersForClassInSchoolType$inboundSchema,
});

/** @internal */
export type GetTeachersForClassInSchoolAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForClassInSchoolAgent$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolAgent$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeachersForClassInSchoolType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolAgent$ {
  /** @deprecated use `GetTeachersForClassInSchoolAgent$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolAgent$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolAgent$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForClassInSchoolAgent$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolAgent$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolAgent$Outbound;
}

export function getTeachersForClassInSchoolAgentToJSON(
  getTeachersForClassInSchoolAgent: GetTeachersForClassInSchoolAgent,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolAgent$outboundSchema.parse(
      getTeachersForClassInSchoolAgent,
    ),
  );
}

export function getTeachersForClassInSchoolAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForClassInSchoolAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolAgent' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolPrimaryOrg$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeachersForClassInSchoolPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeachersForClassInSchoolPrimaryOrg$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolPrimaryOrg$ {
  /** @deprecated use `GetTeachersForClassInSchoolPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema =
    GetTeachersForClassInSchoolPrimaryOrg$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolPrimaryOrg$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolPrimaryOrg$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolPrimaryOrg$Outbound;
}

export function getTeachersForClassInSchoolPrimaryOrgToJSON(
  getTeachersForClassInSchoolPrimaryOrg: GetTeachersForClassInSchoolPrimaryOrg,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolPrimaryOrg$outboundSchema.parse(
      getTeachersForClassInSchoolPrimaryOrg,
    ),
  );
}

export function getTeachersForClassInSchoolPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTeachersForClassInSchoolPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolUser$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetTeachersForClassInSchoolStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(
    z.lazy(() => GetTeachersForClassInSchoolUserId$inboundSchema),
  ).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeachersForClassInSchoolRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetTeachersForClassInSchoolAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetTeachersForClassInSchoolPrimaryOrg$inboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetTeachersForClassInSchoolUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeachersForClassInSchoolUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeachersForClassInSchoolRole$Outbound>;
  agents: Array<GetTeachersForClassInSchoolAgent$Outbound>;
  primaryOrg?: GetTeachersForClassInSchoolPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetTeachersForClassInSchoolUser$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolUser$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolUser
> = z.object({
  sourcedId: z.string(),
  status: GetTeachersForClassInSchoolStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(
    z.lazy(() => GetTeachersForClassInSchoolUserId$outboundSchema),
  ).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeachersForClassInSchoolRole$outboundSchema)),
  agents: z.array(
    z.lazy(() => GetTeachersForClassInSchoolAgent$outboundSchema),
  ),
  primaryOrg: z.lazy(() => GetTeachersForClassInSchoolPrimaryOrg$outboundSchema)
    .optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolUser$ {
  /** @deprecated use `GetTeachersForClassInSchoolUser$inboundSchema` instead. */
  export const inboundSchema = GetTeachersForClassInSchoolUser$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolUser$outboundSchema` instead. */
  export const outboundSchema = GetTeachersForClassInSchoolUser$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolUser$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolUser$Outbound;
}

export function getTeachersForClassInSchoolUserToJSON(
  getTeachersForClassInSchoolUser: GetTeachersForClassInSchoolUser,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolUser$outboundSchema.parse(
      getTeachersForClassInSchoolUser,
    ),
  );
}

export function getTeachersForClassInSchoolUserFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeachersForClassInSchoolUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolUser' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolResponseBody$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(z.lazy(() => GetTeachersForClassInSchoolUser$inboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetTeachersForClassInSchoolResponseBody$Outbound = {
  users: Array<GetTeachersForClassInSchoolUser$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetTeachersForClassInSchoolResponseBody$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolResponseBody$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolResponseBody
> = z.object({
  users: z.array(z.lazy(() => GetTeachersForClassInSchoolUser$outboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolResponseBody$ {
  /** @deprecated use `GetTeachersForClassInSchoolResponseBody$inboundSchema` instead. */
  export const inboundSchema =
    GetTeachersForClassInSchoolResponseBody$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolResponseBody$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolResponseBody$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolResponseBody$Outbound;
}

export function getTeachersForClassInSchoolResponseBodyToJSON(
  getTeachersForClassInSchoolResponseBody:
    GetTeachersForClassInSchoolResponseBody,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolResponseBody$outboundSchema.parse(
      getTeachersForClassInSchoolResponseBody,
    ),
  );
}

export function getTeachersForClassInSchoolResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<
  GetTeachersForClassInSchoolResponseBody,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetTeachersForClassInSchoolResponseBody$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetTeachersForClassInSchoolResponseBody' from JSON`,
  );
}

/** @internal */
export const GetTeachersForClassInSchoolResponse$inboundSchema: z.ZodType<
  GetTeachersForClassInSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetTeachersForClassInSchoolResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetTeachersForClassInSchoolResponse$Outbound = {
  Result: GetTeachersForClassInSchoolResponseBody$Outbound;
};

/** @internal */
export const GetTeachersForClassInSchoolResponse$outboundSchema: z.ZodType<
  GetTeachersForClassInSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetTeachersForClassInSchoolResponse
> = z.object({
  result: z.lazy(() => GetTeachersForClassInSchoolResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeachersForClassInSchoolResponse$ {
  /** @deprecated use `GetTeachersForClassInSchoolResponse$inboundSchema` instead. */
  export const inboundSchema =
    GetTeachersForClassInSchoolResponse$inboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolResponse$outboundSchema` instead. */
  export const outboundSchema =
    GetTeachersForClassInSchoolResponse$outboundSchema;
  /** @deprecated use `GetTeachersForClassInSchoolResponse$Outbound` instead. */
  export type Outbound = GetTeachersForClassInSchoolResponse$Outbound;
}

export function getTeachersForClassInSchoolResponseToJSON(
  getTeachersForClassInSchoolResponse: GetTeachersForClassInSchoolResponse,
): string {
  return JSON.stringify(
    GetTeachersForClassInSchoolResponse$outboundSchema.parse(
      getTeachersForClassInSchoolResponse,
    ),
  );
}

export function getTeachersForClassInSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTeachersForClassInSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetTeachersForClassInSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeachersForClassInSchoolResponse' from JSON`,
  );
}
