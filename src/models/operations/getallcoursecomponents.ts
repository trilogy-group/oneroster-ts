/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllCourseComponentsOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllCourseComponentsOrderBy = ClosedEnum<
  typeof GetAllCourseComponentsOrderBy
>;

export type GetAllCourseComponentsRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllCourseComponentsOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetAllCourseComponentsStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetAllCourseComponentsStatus = ClosedEnum<
  typeof GetAllCourseComponentsStatus
>;

export type GetAllCourseComponentsCourse = {
  sourcedId: string;
};

export type GetAllCourseComponentsCourseComponentCourseComponent = {
  sourcedId: string;
};

export type GetAllCourseComponentsParent = {
  sourcedId: string;
};

/**
 * Represents a component of a course.
 */
export type GetAllCourseComponentsCourseComponent = {
  sourcedId?: string | undefined;
  status: GetAllCourseComponentsStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: GetAllCourseComponentsCourse;
  courseComponent?:
    | GetAllCourseComponentsCourseComponentCourseComponent
    | null
    | undefined;
  parent?: GetAllCourseComponentsParent | null | undefined;
  title: string;
  sortOrder: number;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  /**
   * The date the component is unlocked for the student
   */
  unlockDate: string;
};

/**
 * Collection of Course Components
 */
export type GetAllCourseComponentsResponseBody = {
  courseComponents: Array<GetAllCourseComponentsCourseComponent>;
};

export type GetAllCourseComponentsResponse = {
  result: GetAllCourseComponentsResponseBody;
};

/** @internal */
export const GetAllCourseComponentsOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllCourseComponentsOrderBy
> = z.nativeEnum(GetAllCourseComponentsOrderBy);

/** @internal */
export const GetAllCourseComponentsOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllCourseComponentsOrderBy
> = GetAllCourseComponentsOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsOrderBy$ {
  /** @deprecated use `GetAllCourseComponentsOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsOrderBy$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsOrderBy$outboundSchema;
}

/** @internal */
export const GetAllCourseComponentsRequest$inboundSchema: z.ZodType<
  GetAllCourseComponentsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllCourseComponentsOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllCourseComponentsRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllCourseComponentsRequest$outboundSchema: z.ZodType<
  GetAllCourseComponentsRequest$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllCourseComponentsOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsRequest$ {
  /** @deprecated use `GetAllCourseComponentsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsRequest$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsRequest$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsRequest$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsRequest$Outbound;
}

export function getAllCourseComponentsRequestToJSON(
  getAllCourseComponentsRequest: GetAllCourseComponentsRequest,
): string {
  return JSON.stringify(
    GetAllCourseComponentsRequest$outboundSchema.parse(
      getAllCourseComponentsRequest,
    ),
  );
}

export function getAllCourseComponentsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCourseComponentsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAllCourseComponentsStatus
> = z.nativeEnum(GetAllCourseComponentsStatus);

/** @internal */
export const GetAllCourseComponentsStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAllCourseComponentsStatus
> = GetAllCourseComponentsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsStatus$ {
  /** @deprecated use `GetAllCourseComponentsStatus$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsStatus$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsStatus$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsStatus$outboundSchema;
}

/** @internal */
export const GetAllCourseComponentsCourse$inboundSchema: z.ZodType<
  GetAllCourseComponentsCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetAllCourseComponentsCourse$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetAllCourseComponentsCourse$outboundSchema: z.ZodType<
  GetAllCourseComponentsCourse$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsCourse
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsCourse$ {
  /** @deprecated use `GetAllCourseComponentsCourse$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsCourse$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourse$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsCourse$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourse$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsCourse$Outbound;
}

export function getAllCourseComponentsCourseToJSON(
  getAllCourseComponentsCourse: GetAllCourseComponentsCourse,
): string {
  return JSON.stringify(
    GetAllCourseComponentsCourse$outboundSchema.parse(
      getAllCourseComponentsCourse,
    ),
  );
}

export function getAllCourseComponentsCourseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCourseComponentsCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsCourse' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsCourseComponentCourseComponent$inboundSchema:
  z.ZodType<
    GetAllCourseComponentsCourseComponentCourseComponent,
    z.ZodTypeDef,
    unknown
  > = z.object({
    sourcedId: z.string(),
  });

/** @internal */
export type GetAllCourseComponentsCourseComponentCourseComponent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetAllCourseComponentsCourseComponentCourseComponent$outboundSchema:
  z.ZodType<
    GetAllCourseComponentsCourseComponentCourseComponent$Outbound,
    z.ZodTypeDef,
    GetAllCourseComponentsCourseComponentCourseComponent
  > = z.object({
    sourcedId: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsCourseComponentCourseComponent$ {
  /** @deprecated use `GetAllCourseComponentsCourseComponentCourseComponent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllCourseComponentsCourseComponentCourseComponent$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourseComponentCourseComponent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllCourseComponentsCourseComponentCourseComponent$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourseComponentCourseComponent$Outbound` instead. */
  export type Outbound =
    GetAllCourseComponentsCourseComponentCourseComponent$Outbound;
}

export function getAllCourseComponentsCourseComponentCourseComponentToJSON(
  getAllCourseComponentsCourseComponentCourseComponent:
    GetAllCourseComponentsCourseComponentCourseComponent,
): string {
  return JSON.stringify(
    GetAllCourseComponentsCourseComponentCourseComponent$outboundSchema.parse(
      getAllCourseComponentsCourseComponentCourseComponent,
    ),
  );
}

export function getAllCourseComponentsCourseComponentCourseComponentFromJSON(
  jsonString: string,
): SafeParseResult<
  GetAllCourseComponentsCourseComponentCourseComponent,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllCourseComponentsCourseComponentCourseComponent$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'GetAllCourseComponentsCourseComponentCourseComponent' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsParent$inboundSchema: z.ZodType<
  GetAllCourseComponentsParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetAllCourseComponentsParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetAllCourseComponentsParent$outboundSchema: z.ZodType<
  GetAllCourseComponentsParent$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsParent$ {
  /** @deprecated use `GetAllCourseComponentsParent$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsParent$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsParent$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsParent$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsParent$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsParent$Outbound;
}

export function getAllCourseComponentsParentToJSON(
  getAllCourseComponentsParent: GetAllCourseComponentsParent,
): string {
  return JSON.stringify(
    GetAllCourseComponentsParent$outboundSchema.parse(
      getAllCourseComponentsParent,
    ),
  );
}

export function getAllCourseComponentsParentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCourseComponentsParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsParent' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsCourseComponent$inboundSchema: z.ZodType<
  GetAllCourseComponentsCourseComponent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: GetAllCourseComponentsStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => GetAllCourseComponentsCourse$inboundSchema),
  courseComponent: z.nullable(
    z.lazy(() =>
      GetAllCourseComponentsCourseComponentCourseComponent$inboundSchema
    ),
  ).optional(),
  parent: z.nullable(z.lazy(() => GetAllCourseComponentsParent$inboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string(),
});

/** @internal */
export type GetAllCourseComponentsCourseComponent$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: GetAllCourseComponentsCourse$Outbound;
  courseComponent?:
    | GetAllCourseComponentsCourseComponentCourseComponent$Outbound
    | null
    | undefined;
  parent?: GetAllCourseComponentsParent$Outbound | null | undefined;
  title: string;
  sortOrder: number;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  unlockDate: string;
};

/** @internal */
export const GetAllCourseComponentsCourseComponent$outboundSchema: z.ZodType<
  GetAllCourseComponentsCourseComponent$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsCourseComponent
> = z.object({
  sourcedId: z.string().optional(),
  status: GetAllCourseComponentsStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => GetAllCourseComponentsCourse$outboundSchema),
  courseComponent: z.nullable(
    z.lazy(() =>
      GetAllCourseComponentsCourseComponentCourseComponent$outboundSchema
    ),
  ).optional(),
  parent: z.nullable(z.lazy(() => GetAllCourseComponentsParent$outboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsCourseComponent$ {
  /** @deprecated use `GetAllCourseComponentsCourseComponent$inboundSchema` instead. */
  export const inboundSchema =
    GetAllCourseComponentsCourseComponent$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourseComponent$outboundSchema` instead. */
  export const outboundSchema =
    GetAllCourseComponentsCourseComponent$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsCourseComponent$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsCourseComponent$Outbound;
}

export function getAllCourseComponentsCourseComponentToJSON(
  getAllCourseComponentsCourseComponent: GetAllCourseComponentsCourseComponent,
): string {
  return JSON.stringify(
    GetAllCourseComponentsCourseComponent$outboundSchema.parse(
      getAllCourseComponentsCourseComponent,
    ),
  );
}

export function getAllCourseComponentsCourseComponentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsCourseComponent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllCourseComponentsCourseComponent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsCourseComponent' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsResponseBody$inboundSchema: z.ZodType<
  GetAllCourseComponentsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseComponents: z.array(
    z.lazy(() => GetAllCourseComponentsCourseComponent$inboundSchema),
  ),
});

/** @internal */
export type GetAllCourseComponentsResponseBody$Outbound = {
  courseComponents: Array<GetAllCourseComponentsCourseComponent$Outbound>;
};

/** @internal */
export const GetAllCourseComponentsResponseBody$outboundSchema: z.ZodType<
  GetAllCourseComponentsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsResponseBody
> = z.object({
  courseComponents: z.array(
    z.lazy(() => GetAllCourseComponentsCourseComponent$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsResponseBody$ {
  /** @deprecated use `GetAllCourseComponentsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsResponseBody$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetAllCourseComponentsResponseBody$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsResponseBody$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsResponseBody$Outbound;
}

export function getAllCourseComponentsResponseBodyToJSON(
  getAllCourseComponentsResponseBody: GetAllCourseComponentsResponseBody,
): string {
  return JSON.stringify(
    GetAllCourseComponentsResponseBody$outboundSchema.parse(
      getAllCourseComponentsResponseBody,
    ),
  );
}

export function getAllCourseComponentsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllCourseComponentsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllCourseComponentsResponse$inboundSchema: z.ZodType<
  GetAllCourseComponentsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllCourseComponentsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllCourseComponentsResponse$Outbound = {
  Result: GetAllCourseComponentsResponseBody$Outbound;
};

/** @internal */
export const GetAllCourseComponentsResponse$outboundSchema: z.ZodType<
  GetAllCourseComponentsResponse$Outbound,
  z.ZodTypeDef,
  GetAllCourseComponentsResponse
> = z.object({
  result: z.lazy(() => GetAllCourseComponentsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCourseComponentsResponse$ {
  /** @deprecated use `GetAllCourseComponentsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllCourseComponentsResponse$inboundSchema;
  /** @deprecated use `GetAllCourseComponentsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllCourseComponentsResponse$outboundSchema;
  /** @deprecated use `GetAllCourseComponentsResponse$Outbound` instead. */
  export type Outbound = GetAllCourseComponentsResponse$Outbound;
}

export function getAllCourseComponentsResponseToJSON(
  getAllCourseComponentsResponse: GetAllCourseComponentsResponse,
): string {
  return JSON.stringify(
    GetAllCourseComponentsResponse$outboundSchema.parse(
      getAllCourseComponentsResponse,
    ),
  );
}

export function getAllCourseComponentsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCourseComponentsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCourseComponentsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCourseComponentsResponse' from JSON`,
  );
}
