/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTermsForSchoolRequest = {
  /**
   * School sourced ID
   */
  schoolSourcedId: string;
};

/**
 * Collection of terms successfully retrieved
 */
export type GetTermsForSchoolResponse = {
  terms: Array<components.AcademicSession>;
};

/** @internal */
export const GetTermsForSchoolRequest$inboundSchema: z.ZodType<
  GetTermsForSchoolRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  schoolSourcedId: z.string(),
});

/** @internal */
export type GetTermsForSchoolRequest$Outbound = {
  schoolSourcedId: string;
};

/** @internal */
export const GetTermsForSchoolRequest$outboundSchema: z.ZodType<
  GetTermsForSchoolRequest$Outbound,
  z.ZodTypeDef,
  GetTermsForSchoolRequest
> = z.object({
  schoolSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsForSchoolRequest$ {
  /** @deprecated use `GetTermsForSchoolRequest$inboundSchema` instead. */
  export const inboundSchema = GetTermsForSchoolRequest$inboundSchema;
  /** @deprecated use `GetTermsForSchoolRequest$outboundSchema` instead. */
  export const outboundSchema = GetTermsForSchoolRequest$outboundSchema;
  /** @deprecated use `GetTermsForSchoolRequest$Outbound` instead. */
  export type Outbound = GetTermsForSchoolRequest$Outbound;
}

export function getTermsForSchoolRequestToJSON(
  getTermsForSchoolRequest: GetTermsForSchoolRequest,
): string {
  return JSON.stringify(
    GetTermsForSchoolRequest$outboundSchema.parse(getTermsForSchoolRequest),
  );
}

export function getTermsForSchoolRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsForSchoolRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsForSchoolRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsForSchoolRequest' from JSON`,
  );
}

/** @internal */
export const GetTermsForSchoolResponse$inboundSchema: z.ZodType<
  GetTermsForSchoolResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  terms: z.array(components.AcademicSession$inboundSchema),
});

/** @internal */
export type GetTermsForSchoolResponse$Outbound = {
  terms: Array<components.AcademicSession$Outbound>;
};

/** @internal */
export const GetTermsForSchoolResponse$outboundSchema: z.ZodType<
  GetTermsForSchoolResponse$Outbound,
  z.ZodTypeDef,
  GetTermsForSchoolResponse
> = z.object({
  terms: z.array(components.AcademicSession$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTermsForSchoolResponse$ {
  /** @deprecated use `GetTermsForSchoolResponse$inboundSchema` instead. */
  export const inboundSchema = GetTermsForSchoolResponse$inboundSchema;
  /** @deprecated use `GetTermsForSchoolResponse$outboundSchema` instead. */
  export const outboundSchema = GetTermsForSchoolResponse$outboundSchema;
  /** @deprecated use `GetTermsForSchoolResponse$Outbound` instead. */
  export type Outbound = GetTermsForSchoolResponse$Outbound;
}

export function getTermsForSchoolResponseToJSON(
  getTermsForSchoolResponse: GetTermsForSchoolResponse,
): string {
  return JSON.stringify(
    GetTermsForSchoolResponse$outboundSchema.parse(getTermsForSchoolResponse),
  );
}

export function getTermsForSchoolResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTermsForSchoolResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTermsForSchoolResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTermsForSchoolResponse' from JSON`,
  );
}
