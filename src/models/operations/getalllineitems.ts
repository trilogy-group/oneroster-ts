/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful response containing a collection of line items
 */
export type GetAllLineItemsResponse = {
  lineItems: Array<components.LineItem>;
};

/** @internal */
export const GetAllLineItemsResponse$inboundSchema: z.ZodType<
  GetAllLineItemsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  lineItems: z.array(components.LineItem$inboundSchema),
});

/** @internal */
export type GetAllLineItemsResponse$Outbound = {
  lineItems: Array<components.LineItem$Outbound>;
};

/** @internal */
export const GetAllLineItemsResponse$outboundSchema: z.ZodType<
  GetAllLineItemsResponse$Outbound,
  z.ZodTypeDef,
  GetAllLineItemsResponse
> = z.object({
  lineItems: z.array(components.LineItem$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllLineItemsResponse$ {
  /** @deprecated use `GetAllLineItemsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllLineItemsResponse$inboundSchema;
  /** @deprecated use `GetAllLineItemsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllLineItemsResponse$outboundSchema;
  /** @deprecated use `GetAllLineItemsResponse$Outbound` instead. */
  export type Outbound = GetAllLineItemsResponse$Outbound;
}

export function getAllLineItemsResponseToJSON(
  getAllLineItemsResponse: GetAllLineItemsResponse,
): string {
  return JSON.stringify(
    GetAllLineItemsResponse$outboundSchema.parse(getAllLineItemsResponse),
  );
}

export function getAllLineItemsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllLineItemsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllLineItemsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllLineItemsResponse' from JSON`,
  );
}
