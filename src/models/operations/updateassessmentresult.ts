/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdateAssessmentResultRequestBody = {
  /**
   * Represents an assessment result.
   */
  assessmentResult: components.AssessmentResult;
};

export type UpdateAssessmentResultRequest = {
  /**
   * The sourcedId of the assessment result to update
   */
  sourcedId: string;
  requestBody: UpdateAssessmentResultRequestBody;
};

/**
 * Assessment result successfully updated
 */
export type UpdateAssessmentResultResponse = {
  /**
   * Represents an assessment result.
   */
  assessmentResult: components.AssessmentResult;
};

/** @internal */
export const UpdateAssessmentResultRequestBody$inboundSchema: z.ZodType<
  UpdateAssessmentResultRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentResult: components.AssessmentResult$inboundSchema,
});

/** @internal */
export type UpdateAssessmentResultRequestBody$Outbound = {
  assessmentResult: components.AssessmentResult$Outbound;
};

/** @internal */
export const UpdateAssessmentResultRequestBody$outboundSchema: z.ZodType<
  UpdateAssessmentResultRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentResultRequestBody
> = z.object({
  assessmentResult: components.AssessmentResult$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentResultRequestBody$ {
  /** @deprecated use `UpdateAssessmentResultRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentResultRequestBody$inboundSchema;
  /** @deprecated use `UpdateAssessmentResultRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    UpdateAssessmentResultRequestBody$outboundSchema;
  /** @deprecated use `UpdateAssessmentResultRequestBody$Outbound` instead. */
  export type Outbound = UpdateAssessmentResultRequestBody$Outbound;
}

export function updateAssessmentResultRequestBodyToJSON(
  updateAssessmentResultRequestBody: UpdateAssessmentResultRequestBody,
): string {
  return JSON.stringify(
    UpdateAssessmentResultRequestBody$outboundSchema.parse(
      updateAssessmentResultRequestBody,
    ),
  );
}

export function updateAssessmentResultRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentResultRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentResultRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentResultRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentResultRequest$inboundSchema: z.ZodType<
  UpdateAssessmentResultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateAssessmentResultRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateAssessmentResultRequest$Outbound = {
  sourcedId: string;
  RequestBody: UpdateAssessmentResultRequestBody$Outbound;
};

/** @internal */
export const UpdateAssessmentResultRequest$outboundSchema: z.ZodType<
  UpdateAssessmentResultRequest$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentResultRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateAssessmentResultRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentResultRequest$ {
  /** @deprecated use `UpdateAssessmentResultRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentResultRequest$inboundSchema;
  /** @deprecated use `UpdateAssessmentResultRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentResultRequest$outboundSchema;
  /** @deprecated use `UpdateAssessmentResultRequest$Outbound` instead. */
  export type Outbound = UpdateAssessmentResultRequest$Outbound;
}

export function updateAssessmentResultRequestToJSON(
  updateAssessmentResultRequest: UpdateAssessmentResultRequest,
): string {
  return JSON.stringify(
    UpdateAssessmentResultRequest$outboundSchema.parse(
      updateAssessmentResultRequest,
    ),
  );
}

export function updateAssessmentResultRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentResultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentResultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentResultRequest' from JSON`,
  );
}

/** @internal */
export const UpdateAssessmentResultResponse$inboundSchema: z.ZodType<
  UpdateAssessmentResultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  assessmentResult: components.AssessmentResult$inboundSchema,
});

/** @internal */
export type UpdateAssessmentResultResponse$Outbound = {
  assessmentResult: components.AssessmentResult$Outbound;
};

/** @internal */
export const UpdateAssessmentResultResponse$outboundSchema: z.ZodType<
  UpdateAssessmentResultResponse$Outbound,
  z.ZodTypeDef,
  UpdateAssessmentResultResponse
> = z.object({
  assessmentResult: components.AssessmentResult$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateAssessmentResultResponse$ {
  /** @deprecated use `UpdateAssessmentResultResponse$inboundSchema` instead. */
  export const inboundSchema = UpdateAssessmentResultResponse$inboundSchema;
  /** @deprecated use `UpdateAssessmentResultResponse$outboundSchema` instead. */
  export const outboundSchema = UpdateAssessmentResultResponse$outboundSchema;
  /** @deprecated use `UpdateAssessmentResultResponse$Outbound` instead. */
  export type Outbound = UpdateAssessmentResultResponse$Outbound;
}

export function updateAssessmentResultResponseToJSON(
  updateAssessmentResultResponse: UpdateAssessmentResultResponse,
): string {
  return JSON.stringify(
    UpdateAssessmentResultResponse$outboundSchema.parse(
      updateAssessmentResultResponse,
    ),
  );
}

export function updateAssessmentResultResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdateAssessmentResultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateAssessmentResultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateAssessmentResultResponse' from JSON`,
  );
}
