/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const UpdateOrgStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type UpdateOrgStatus = ClosedEnum<typeof UpdateOrgStatus>;

export const UpdateOrgType = {
  Department: "department",
  School: "school",
  District: "district",
  Local: "local",
  State: "state",
  National: "national",
} as const;
export type UpdateOrgType = ClosedEnum<typeof UpdateOrgType>;

export type UpdateOrgParent = {
  sourcedId: string;
};

export type UpdateOrgOrg = {
  sourcedId?: string | undefined;
  status?: UpdateOrgStatus | undefined;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: UpdateOrgType;
  identifier?: string | undefined;
  parent?: UpdateOrgParent | null | undefined;
};

export type UpdateOrgRequestBody = {
  org: UpdateOrgOrg;
};

export type UpdateOrgRequest = {
  /**
   * The sourcedId of the organization to update
   */
  sourcedId: string;
  requestBody?: UpdateOrgRequestBody | undefined;
};

/** @internal */
export const UpdateOrgStatus$inboundSchema: z.ZodNativeEnum<
  typeof UpdateOrgStatus
> = z.nativeEnum(UpdateOrgStatus);

/** @internal */
export const UpdateOrgStatus$outboundSchema: z.ZodNativeEnum<
  typeof UpdateOrgStatus
> = UpdateOrgStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgStatus$ {
  /** @deprecated use `UpdateOrgStatus$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgStatus$inboundSchema;
  /** @deprecated use `UpdateOrgStatus$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgStatus$outboundSchema;
}

/** @internal */
export const UpdateOrgType$inboundSchema: z.ZodNativeEnum<
  typeof UpdateOrgType
> = z.nativeEnum(UpdateOrgType);

/** @internal */
export const UpdateOrgType$outboundSchema: z.ZodNativeEnum<
  typeof UpdateOrgType
> = UpdateOrgType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgType$ {
  /** @deprecated use `UpdateOrgType$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgType$inboundSchema;
  /** @deprecated use `UpdateOrgType$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgType$outboundSchema;
}

/** @internal */
export const UpdateOrgParent$inboundSchema: z.ZodType<
  UpdateOrgParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type UpdateOrgParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const UpdateOrgParent$outboundSchema: z.ZodType<
  UpdateOrgParent$Outbound,
  z.ZodTypeDef,
  UpdateOrgParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgParent$ {
  /** @deprecated use `UpdateOrgParent$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgParent$inboundSchema;
  /** @deprecated use `UpdateOrgParent$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgParent$outboundSchema;
  /** @deprecated use `UpdateOrgParent$Outbound` instead. */
  export type Outbound = UpdateOrgParent$Outbound;
}

export function updateOrgParentToJSON(
  updateOrgParent: UpdateOrgParent,
): string {
  return JSON.stringify(UpdateOrgParent$outboundSchema.parse(updateOrgParent));
}

export function updateOrgParentFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrgParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrgParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrgParent' from JSON`,
  );
}

/** @internal */
export const UpdateOrgOrg$inboundSchema: z.ZodType<
  UpdateOrgOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateOrgStatus$inboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: UpdateOrgType$inboundSchema,
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => UpdateOrgParent$inboundSchema)).optional(),
});

/** @internal */
export type UpdateOrgOrg$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  metadata?: { [k: string]: any } | undefined;
  name: string;
  type: string;
  identifier?: string | undefined;
  parent?: UpdateOrgParent$Outbound | null | undefined;
};

/** @internal */
export const UpdateOrgOrg$outboundSchema: z.ZodType<
  UpdateOrgOrg$Outbound,
  z.ZodTypeDef,
  UpdateOrgOrg
> = z.object({
  sourcedId: z.string().optional(),
  status: UpdateOrgStatus$outboundSchema.default("active"),
  metadata: z.record(z.any()).optional(),
  name: z.string(),
  type: UpdateOrgType$outboundSchema,
  identifier: z.string().optional(),
  parent: z.nullable(z.lazy(() => UpdateOrgParent$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgOrg$ {
  /** @deprecated use `UpdateOrgOrg$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgOrg$inboundSchema;
  /** @deprecated use `UpdateOrgOrg$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgOrg$outboundSchema;
  /** @deprecated use `UpdateOrgOrg$Outbound` instead. */
  export type Outbound = UpdateOrgOrg$Outbound;
}

export function updateOrgOrgToJSON(updateOrgOrg: UpdateOrgOrg): string {
  return JSON.stringify(UpdateOrgOrg$outboundSchema.parse(updateOrgOrg));
}

export function updateOrgOrgFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrgOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrgOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrgOrg' from JSON`,
  );
}

/** @internal */
export const UpdateOrgRequestBody$inboundSchema: z.ZodType<
  UpdateOrgRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: z.lazy(() => UpdateOrgOrg$inboundSchema),
});

/** @internal */
export type UpdateOrgRequestBody$Outbound = {
  org: UpdateOrgOrg$Outbound;
};

/** @internal */
export const UpdateOrgRequestBody$outboundSchema: z.ZodType<
  UpdateOrgRequestBody$Outbound,
  z.ZodTypeDef,
  UpdateOrgRequestBody
> = z.object({
  org: z.lazy(() => UpdateOrgOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgRequestBody$ {
  /** @deprecated use `UpdateOrgRequestBody$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgRequestBody$inboundSchema;
  /** @deprecated use `UpdateOrgRequestBody$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgRequestBody$outboundSchema;
  /** @deprecated use `UpdateOrgRequestBody$Outbound` instead. */
  export type Outbound = UpdateOrgRequestBody$Outbound;
}

export function updateOrgRequestBodyToJSON(
  updateOrgRequestBody: UpdateOrgRequestBody,
): string {
  return JSON.stringify(
    UpdateOrgRequestBody$outboundSchema.parse(updateOrgRequestBody),
  );
}

export function updateOrgRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrgRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrgRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrgRequestBody' from JSON`,
  );
}

/** @internal */
export const UpdateOrgRequest$inboundSchema: z.ZodType<
  UpdateOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => UpdateOrgRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UpdateOrgRequest$Outbound = {
  sourcedId: string;
  RequestBody?: UpdateOrgRequestBody$Outbound | undefined;
};

/** @internal */
export const UpdateOrgRequest$outboundSchema: z.ZodType<
  UpdateOrgRequest$Outbound,
  z.ZodTypeDef,
  UpdateOrgRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => UpdateOrgRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateOrgRequest$ {
  /** @deprecated use `UpdateOrgRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateOrgRequest$inboundSchema;
  /** @deprecated use `UpdateOrgRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateOrgRequest$outboundSchema;
  /** @deprecated use `UpdateOrgRequest$Outbound` instead. */
  export type Outbound = UpdateOrgRequest$Outbound;
}

export function updateOrgRequestToJSON(
  updateOrgRequest: UpdateOrgRequest,
): string {
  return JSON.stringify(
    UpdateOrgRequest$outboundSchema.parse(updateOrgRequest),
  );
}

export function updateOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateOrgRequest' from JSON`,
  );
}
