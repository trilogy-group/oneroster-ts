/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AssignResourceToCourseResource = {
  sourcedId: string;
  dateAssigned?: string | undefined;
};

export type AssignResourceToCourseRequestBody = {
  resource: AssignResourceToCourseResource;
};

export type AssignResourceToCourseRequest = {
  /**
   * The sourcedId of the course
   */
  courseSourcedId: string;
  requestBody: AssignResourceToCourseRequestBody;
};

/** @internal */
export const AssignResourceToCourseResource$inboundSchema: z.ZodType<
  AssignResourceToCourseResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  dateAssigned: z.string().optional(),
});

/** @internal */
export type AssignResourceToCourseResource$Outbound = {
  sourcedId: string;
  dateAssigned?: string | undefined;
};

/** @internal */
export const AssignResourceToCourseResource$outboundSchema: z.ZodType<
  AssignResourceToCourseResource$Outbound,
  z.ZodTypeDef,
  AssignResourceToCourseResource
> = z.object({
  sourcedId: z.string(),
  dateAssigned: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToCourseResource$ {
  /** @deprecated use `AssignResourceToCourseResource$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToCourseResource$inboundSchema;
  /** @deprecated use `AssignResourceToCourseResource$outboundSchema` instead. */
  export const outboundSchema = AssignResourceToCourseResource$outboundSchema;
  /** @deprecated use `AssignResourceToCourseResource$Outbound` instead. */
  export type Outbound = AssignResourceToCourseResource$Outbound;
}

export function assignResourceToCourseResourceToJSON(
  assignResourceToCourseResource: AssignResourceToCourseResource,
): string {
  return JSON.stringify(
    AssignResourceToCourseResource$outboundSchema.parse(
      assignResourceToCourseResource,
    ),
  );
}

export function assignResourceToCourseResourceFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToCourseResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToCourseResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToCourseResource' from JSON`,
  );
}

/** @internal */
export const AssignResourceToCourseRequestBody$inboundSchema: z.ZodType<
  AssignResourceToCourseRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  resource: z.lazy(() => AssignResourceToCourseResource$inboundSchema),
});

/** @internal */
export type AssignResourceToCourseRequestBody$Outbound = {
  resource: AssignResourceToCourseResource$Outbound;
};

/** @internal */
export const AssignResourceToCourseRequestBody$outboundSchema: z.ZodType<
  AssignResourceToCourseRequestBody$Outbound,
  z.ZodTypeDef,
  AssignResourceToCourseRequestBody
> = z.object({
  resource: z.lazy(() => AssignResourceToCourseResource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToCourseRequestBody$ {
  /** @deprecated use `AssignResourceToCourseRequestBody$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToCourseRequestBody$inboundSchema;
  /** @deprecated use `AssignResourceToCourseRequestBody$outboundSchema` instead. */
  export const outboundSchema =
    AssignResourceToCourseRequestBody$outboundSchema;
  /** @deprecated use `AssignResourceToCourseRequestBody$Outbound` instead. */
  export type Outbound = AssignResourceToCourseRequestBody$Outbound;
}

export function assignResourceToCourseRequestBodyToJSON(
  assignResourceToCourseRequestBody: AssignResourceToCourseRequestBody,
): string {
  return JSON.stringify(
    AssignResourceToCourseRequestBody$outboundSchema.parse(
      assignResourceToCourseRequestBody,
    ),
  );
}

export function assignResourceToCourseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToCourseRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToCourseRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToCourseRequestBody' from JSON`,
  );
}

/** @internal */
export const AssignResourceToCourseRequest$inboundSchema: z.ZodType<
  AssignResourceToCourseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseSourcedId: z.string(),
  RequestBody: z.lazy(() => AssignResourceToCourseRequestBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AssignResourceToCourseRequest$Outbound = {
  courseSourcedId: string;
  RequestBody: AssignResourceToCourseRequestBody$Outbound;
};

/** @internal */
export const AssignResourceToCourseRequest$outboundSchema: z.ZodType<
  AssignResourceToCourseRequest$Outbound,
  z.ZodTypeDef,
  AssignResourceToCourseRequest
> = z.object({
  courseSourcedId: z.string(),
  requestBody: z.lazy(() => AssignResourceToCourseRequestBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AssignResourceToCourseRequest$ {
  /** @deprecated use `AssignResourceToCourseRequest$inboundSchema` instead. */
  export const inboundSchema = AssignResourceToCourseRequest$inboundSchema;
  /** @deprecated use `AssignResourceToCourseRequest$outboundSchema` instead. */
  export const outboundSchema = AssignResourceToCourseRequest$outboundSchema;
  /** @deprecated use `AssignResourceToCourseRequest$Outbound` instead. */
  export type Outbound = AssignResourceToCourseRequest$Outbound;
}

export function assignResourceToCourseRequestToJSON(
  assignResourceToCourseRequest: AssignResourceToCourseRequest,
): string {
  return JSON.stringify(
    AssignResourceToCourseRequest$outboundSchema.parse(
      assignResourceToCourseRequest,
    ),
  );
}

export function assignResourceToCourseRequestFromJSON(
  jsonString: string,
): SafeParseResult<AssignResourceToCourseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AssignResourceToCourseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AssignResourceToCourseRequest' from JSON`,
  );
}
