/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PutCourseStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type PutCourseStatus = ClosedEnum<typeof PutCourseStatus>;

export type PutCourseAcademicSession = {
  sourcedId: string;
};

export type PutCourseOrg = {
  sourcedId: string;
};

/**
 * Represents a course.
 */
export type PutCourseCourse = {
  sourcedId?: string | undefined;
  status: PutCourseStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: PutCourseAcademicSession | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: PutCourseOrg;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

export type PutCourseRequestBody = {
  /**
   * Represents a course.
   */
  course: PutCourseCourse;
};

export type PutCourseRequest = {
  /**
   * The sourcedId of the course to update
   */
  sourcedId: string;
  requestBody?: PutCourseRequestBody | undefined;
};

/** @internal */
export const PutCourseStatus$inboundSchema: z.ZodNativeEnum<
  typeof PutCourseStatus
> = z.nativeEnum(PutCourseStatus);

/** @internal */
export const PutCourseStatus$outboundSchema: z.ZodNativeEnum<
  typeof PutCourseStatus
> = PutCourseStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseStatus$ {
  /** @deprecated use `PutCourseStatus$inboundSchema` instead. */
  export const inboundSchema = PutCourseStatus$inboundSchema;
  /** @deprecated use `PutCourseStatus$outboundSchema` instead. */
  export const outboundSchema = PutCourseStatus$outboundSchema;
}

/** @internal */
export const PutCourseAcademicSession$inboundSchema: z.ZodType<
  PutCourseAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutCourseAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutCourseAcademicSession$outboundSchema: z.ZodType<
  PutCourseAcademicSession$Outbound,
  z.ZodTypeDef,
  PutCourseAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseAcademicSession$ {
  /** @deprecated use `PutCourseAcademicSession$inboundSchema` instead. */
  export const inboundSchema = PutCourseAcademicSession$inboundSchema;
  /** @deprecated use `PutCourseAcademicSession$outboundSchema` instead. */
  export const outboundSchema = PutCourseAcademicSession$outboundSchema;
  /** @deprecated use `PutCourseAcademicSession$Outbound` instead. */
  export type Outbound = PutCourseAcademicSession$Outbound;
}

export function putCourseAcademicSessionToJSON(
  putCourseAcademicSession: PutCourseAcademicSession,
): string {
  return JSON.stringify(
    PutCourseAcademicSession$outboundSchema.parse(putCourseAcademicSession),
  );
}

export function putCourseAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseAcademicSession' from JSON`,
  );
}

/** @internal */
export const PutCourseOrg$inboundSchema: z.ZodType<
  PutCourseOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type PutCourseOrg$Outbound = {
  sourcedId: string;
};

/** @internal */
export const PutCourseOrg$outboundSchema: z.ZodType<
  PutCourseOrg$Outbound,
  z.ZodTypeDef,
  PutCourseOrg
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseOrg$ {
  /** @deprecated use `PutCourseOrg$inboundSchema` instead. */
  export const inboundSchema = PutCourseOrg$inboundSchema;
  /** @deprecated use `PutCourseOrg$outboundSchema` instead. */
  export const outboundSchema = PutCourseOrg$outboundSchema;
  /** @deprecated use `PutCourseOrg$Outbound` instead. */
  export type Outbound = PutCourseOrg$Outbound;
}

export function putCourseOrgToJSON(putCourseOrg: PutCourseOrg): string {
  return JSON.stringify(PutCourseOrg$outboundSchema.parse(putCourseOrg));
}

export function putCourseOrgFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseOrg' from JSON`,
  );
}

/** @internal */
export const PutCourseCourse$inboundSchema: z.ZodType<
  PutCourseCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: PutCourseStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => PutCourseAcademicSession$inboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => PutCourseOrg$inboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/** @internal */
export type PutCourseCourse$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  academicSession?: PutCourseAcademicSession$Outbound | null | undefined;
  courseCode?: string | null | undefined;
  grades?: Array<string> | null | undefined;
  subjects?: Array<string> | null | undefined;
  subjectCodes?: Array<string> | null | undefined;
  org: PutCourseOrg$Outbound;
  level?: string | null | undefined;
  gradingScheme?: string | null | undefined;
};

/** @internal */
export const PutCourseCourse$outboundSchema: z.ZodType<
  PutCourseCourse$Outbound,
  z.ZodTypeDef,
  PutCourseCourse
> = z.object({
  sourcedId: z.string().optional(),
  status: PutCourseStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  academicSession: z.nullable(
    z.lazy(() => PutCourseAcademicSession$outboundSchema),
  ).optional(),
  courseCode: z.nullable(z.string()).optional(),
  grades: z.nullable(z.array(z.string())).optional(),
  subjects: z.nullable(z.array(z.string())).optional(),
  subjectCodes: z.nullable(z.array(z.string())).optional(),
  org: z.lazy(() => PutCourseOrg$outboundSchema),
  level: z.nullable(z.string()).optional(),
  gradingScheme: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseCourse$ {
  /** @deprecated use `PutCourseCourse$inboundSchema` instead. */
  export const inboundSchema = PutCourseCourse$inboundSchema;
  /** @deprecated use `PutCourseCourse$outboundSchema` instead. */
  export const outboundSchema = PutCourseCourse$outboundSchema;
  /** @deprecated use `PutCourseCourse$Outbound` instead. */
  export type Outbound = PutCourseCourse$Outbound;
}

export function putCourseCourseToJSON(
  putCourseCourse: PutCourseCourse,
): string {
  return JSON.stringify(PutCourseCourse$outboundSchema.parse(putCourseCourse));
}

export function putCourseCourseFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseCourse' from JSON`,
  );
}

/** @internal */
export const PutCourseRequestBody$inboundSchema: z.ZodType<
  PutCourseRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  course: z.lazy(() => PutCourseCourse$inboundSchema),
});

/** @internal */
export type PutCourseRequestBody$Outbound = {
  course: PutCourseCourse$Outbound;
};

/** @internal */
export const PutCourseRequestBody$outboundSchema: z.ZodType<
  PutCourseRequestBody$Outbound,
  z.ZodTypeDef,
  PutCourseRequestBody
> = z.object({
  course: z.lazy(() => PutCourseCourse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseRequestBody$ {
  /** @deprecated use `PutCourseRequestBody$inboundSchema` instead. */
  export const inboundSchema = PutCourseRequestBody$inboundSchema;
  /** @deprecated use `PutCourseRequestBody$outboundSchema` instead. */
  export const outboundSchema = PutCourseRequestBody$outboundSchema;
  /** @deprecated use `PutCourseRequestBody$Outbound` instead. */
  export type Outbound = PutCourseRequestBody$Outbound;
}

export function putCourseRequestBodyToJSON(
  putCourseRequestBody: PutCourseRequestBody,
): string {
  return JSON.stringify(
    PutCourseRequestBody$outboundSchema.parse(putCourseRequestBody),
  );
}

export function putCourseRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseRequestBody' from JSON`,
  );
}

/** @internal */
export const PutCourseRequest$inboundSchema: z.ZodType<
  PutCourseRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  RequestBody: z.lazy(() => PutCourseRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type PutCourseRequest$Outbound = {
  sourcedId: string;
  RequestBody?: PutCourseRequestBody$Outbound | undefined;
};

/** @internal */
export const PutCourseRequest$outboundSchema: z.ZodType<
  PutCourseRequest$Outbound,
  z.ZodTypeDef,
  PutCourseRequest
> = z.object({
  sourcedId: z.string(),
  requestBody: z.lazy(() => PutCourseRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PutCourseRequest$ {
  /** @deprecated use `PutCourseRequest$inboundSchema` instead. */
  export const inboundSchema = PutCourseRequest$inboundSchema;
  /** @deprecated use `PutCourseRequest$outboundSchema` instead. */
  export const outboundSchema = PutCourseRequest$outboundSchema;
  /** @deprecated use `PutCourseRequest$Outbound` instead. */
  export type Outbound = PutCourseRequest$Outbound;
}

export function putCourseRequestToJSON(
  putCourseRequest: PutCourseRequest,
): string {
  return JSON.stringify(
    PutCourseRequest$outboundSchema.parse(putCourseRequest),
  );
}

export function putCourseRequestFromJSON(
  jsonString: string,
): SafeParseResult<PutCourseRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PutCourseRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PutCourseRequest' from JSON`,
  );
}
