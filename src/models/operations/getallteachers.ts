/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllTeachersOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllTeachersOrderBy = ClosedEnum<typeof GetAllTeachersOrderBy>;

export type GetAllTeachersRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllTeachersOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

export const GetAllTeachersStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetAllTeachersStatus = ClosedEnum<typeof GetAllTeachersStatus>;

export type GetAllTeachersUserId = {
  type: string;
  identifier: string;
};

export const GetAllTeachersRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetAllTeachersRoleType = ClosedEnum<typeof GetAllTeachersRoleType>;

export const GetAllTeachersRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetAllTeachersRoleEnum = ClosedEnum<typeof GetAllTeachersRoleEnum>;

export type GetAllTeachersOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetAllTeachersRole = {
  roleType: GetAllTeachersRoleType;
  role: GetAllTeachersRoleEnum;
  org: GetAllTeachersOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetAllTeachersType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetAllTeachersType = ClosedEnum<typeof GetAllTeachersType>;

export type GetAllTeachersAgent = {
  href: string;
  sourcedId: string;
  type: GetAllTeachersType;
};

export type GetAllTeachersPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetAllTeachersUser = {
  sourcedId: string;
  status: GetAllTeachersStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetAllTeachersUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetAllTeachersRole>;
  agents: Array<GetAllTeachersAgent>;
  primaryOrg?: GetAllTeachersPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Successful response containing a collection of teachers
 */
export type GetAllTeachersResponseBody = {
  users: Array<GetAllTeachersUser>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetAllTeachersResponse = {
  result: GetAllTeachersResponseBody;
};

/** @internal */
export const GetAllTeachersOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersOrderBy
> = z.nativeEnum(GetAllTeachersOrderBy);

/** @internal */
export const GetAllTeachersOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersOrderBy
> = GetAllTeachersOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersOrderBy$ {
  /** @deprecated use `GetAllTeachersOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersOrderBy$inboundSchema;
  /** @deprecated use `GetAllTeachersOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersOrderBy$outboundSchema;
}

/** @internal */
export const GetAllTeachersRequest$inboundSchema: z.ZodType<
  GetAllTeachersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllTeachersOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllTeachersRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllTeachersRequest$outboundSchema: z.ZodType<
  GetAllTeachersRequest$Outbound,
  z.ZodTypeDef,
  GetAllTeachersRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllTeachersOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersRequest$ {
  /** @deprecated use `GetAllTeachersRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersRequest$inboundSchema;
  /** @deprecated use `GetAllTeachersRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersRequest$outboundSchema;
  /** @deprecated use `GetAllTeachersRequest$Outbound` instead. */
  export type Outbound = GetAllTeachersRequest$Outbound;
}

export function getAllTeachersRequestToJSON(
  getAllTeachersRequest: GetAllTeachersRequest,
): string {
  return JSON.stringify(
    GetAllTeachersRequest$outboundSchema.parse(getAllTeachersRequest),
  );
}

export function getAllTeachersRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersRequest' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersStatus
> = z.nativeEnum(GetAllTeachersStatus);

/** @internal */
export const GetAllTeachersStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersStatus
> = GetAllTeachersStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersStatus$ {
  /** @deprecated use `GetAllTeachersStatus$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersStatus$inboundSchema;
  /** @deprecated use `GetAllTeachersStatus$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersStatus$outboundSchema;
}

/** @internal */
export const GetAllTeachersUserId$inboundSchema: z.ZodType<
  GetAllTeachersUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetAllTeachersUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetAllTeachersUserId$outboundSchema: z.ZodType<
  GetAllTeachersUserId$Outbound,
  z.ZodTypeDef,
  GetAllTeachersUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersUserId$ {
  /** @deprecated use `GetAllTeachersUserId$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersUserId$inboundSchema;
  /** @deprecated use `GetAllTeachersUserId$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersUserId$outboundSchema;
  /** @deprecated use `GetAllTeachersUserId$Outbound` instead. */
  export type Outbound = GetAllTeachersUserId$Outbound;
}

export function getAllTeachersUserIdToJSON(
  getAllTeachersUserId: GetAllTeachersUserId,
): string {
  return JSON.stringify(
    GetAllTeachersUserId$outboundSchema.parse(getAllTeachersUserId),
  );
}

export function getAllTeachersUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersUserId' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersRoleType
> = z.nativeEnum(GetAllTeachersRoleType);

/** @internal */
export const GetAllTeachersRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersRoleType
> = GetAllTeachersRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersRoleType$ {
  /** @deprecated use `GetAllTeachersRoleType$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersRoleType$inboundSchema;
  /** @deprecated use `GetAllTeachersRoleType$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersRoleType$outboundSchema;
}

/** @internal */
export const GetAllTeachersRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersRoleEnum
> = z.nativeEnum(GetAllTeachersRoleEnum);

/** @internal */
export const GetAllTeachersRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersRoleEnum
> = GetAllTeachersRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersRoleEnum$ {
  /** @deprecated use `GetAllTeachersRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersRoleEnum$inboundSchema;
  /** @deprecated use `GetAllTeachersRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersRoleEnum$outboundSchema;
}

/** @internal */
export const GetAllTeachersOrg$inboundSchema: z.ZodType<
  GetAllTeachersOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetAllTeachersOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllTeachersOrg$outboundSchema: z.ZodType<
  GetAllTeachersOrg$Outbound,
  z.ZodTypeDef,
  GetAllTeachersOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersOrg$ {
  /** @deprecated use `GetAllTeachersOrg$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersOrg$inboundSchema;
  /** @deprecated use `GetAllTeachersOrg$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersOrg$outboundSchema;
  /** @deprecated use `GetAllTeachersOrg$Outbound` instead. */
  export type Outbound = GetAllTeachersOrg$Outbound;
}

export function getAllTeachersOrgToJSON(
  getAllTeachersOrg: GetAllTeachersOrg,
): string {
  return JSON.stringify(
    GetAllTeachersOrg$outboundSchema.parse(getAllTeachersOrg),
  );
}

export function getAllTeachersOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersOrg' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersRole$inboundSchema: z.ZodType<
  GetAllTeachersRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetAllTeachersRoleType$inboundSchema,
  role: GetAllTeachersRoleEnum$inboundSchema,
  org: z.lazy(() => GetAllTeachersOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetAllTeachersRole$Outbound = {
  roleType: string;
  role: string;
  org: GetAllTeachersOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetAllTeachersRole$outboundSchema: z.ZodType<
  GetAllTeachersRole$Outbound,
  z.ZodTypeDef,
  GetAllTeachersRole
> = z.object({
  roleType: GetAllTeachersRoleType$outboundSchema,
  role: GetAllTeachersRoleEnum$outboundSchema,
  org: z.lazy(() => GetAllTeachersOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersRole$ {
  /** @deprecated use `GetAllTeachersRole$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersRole$inboundSchema;
  /** @deprecated use `GetAllTeachersRole$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersRole$outboundSchema;
  /** @deprecated use `GetAllTeachersRole$Outbound` instead. */
  export type Outbound = GetAllTeachersRole$Outbound;
}

export function getAllTeachersRoleToJSON(
  getAllTeachersRole: GetAllTeachersRole,
): string {
  return JSON.stringify(
    GetAllTeachersRole$outboundSchema.parse(getAllTeachersRole),
  );
}

export function getAllTeachersRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersRole' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersType$inboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersType
> = z.nativeEnum(GetAllTeachersType);

/** @internal */
export const GetAllTeachersType$outboundSchema: z.ZodNativeEnum<
  typeof GetAllTeachersType
> = GetAllTeachersType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersType$ {
  /** @deprecated use `GetAllTeachersType$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersType$inboundSchema;
  /** @deprecated use `GetAllTeachersType$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersType$outboundSchema;
}

/** @internal */
export const GetAllTeachersAgent$inboundSchema: z.ZodType<
  GetAllTeachersAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetAllTeachersType$inboundSchema,
});

/** @internal */
export type GetAllTeachersAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllTeachersAgent$outboundSchema: z.ZodType<
  GetAllTeachersAgent$Outbound,
  z.ZodTypeDef,
  GetAllTeachersAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetAllTeachersType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersAgent$ {
  /** @deprecated use `GetAllTeachersAgent$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersAgent$inboundSchema;
  /** @deprecated use `GetAllTeachersAgent$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersAgent$outboundSchema;
  /** @deprecated use `GetAllTeachersAgent$Outbound` instead. */
  export type Outbound = GetAllTeachersAgent$Outbound;
}

export function getAllTeachersAgentToJSON(
  getAllTeachersAgent: GetAllTeachersAgent,
): string {
  return JSON.stringify(
    GetAllTeachersAgent$outboundSchema.parse(getAllTeachersAgent),
  );
}

export function getAllTeachersAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersAgent' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersPrimaryOrg$inboundSchema: z.ZodType<
  GetAllTeachersPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetAllTeachersPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetAllTeachersPrimaryOrg$outboundSchema: z.ZodType<
  GetAllTeachersPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetAllTeachersPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersPrimaryOrg$ {
  /** @deprecated use `GetAllTeachersPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersPrimaryOrg$inboundSchema;
  /** @deprecated use `GetAllTeachersPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersPrimaryOrg$outboundSchema;
  /** @deprecated use `GetAllTeachersPrimaryOrg$Outbound` instead. */
  export type Outbound = GetAllTeachersPrimaryOrg$Outbound;
}

export function getAllTeachersPrimaryOrgToJSON(
  getAllTeachersPrimaryOrg: GetAllTeachersPrimaryOrg,
): string {
  return JSON.stringify(
    GetAllTeachersPrimaryOrg$outboundSchema.parse(getAllTeachersPrimaryOrg),
  );
}

export function getAllTeachersPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersUser$inboundSchema: z.ZodType<
  GetAllTeachersUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetAllTeachersStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetAllTeachersUserId$inboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetAllTeachersRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetAllTeachersAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetAllTeachersPrimaryOrg$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAllTeachersUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetAllTeachersUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetAllTeachersRole$Outbound>;
  agents: Array<GetAllTeachersAgent$Outbound>;
  primaryOrg?: GetAllTeachersPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetAllTeachersUser$outboundSchema: z.ZodType<
  GetAllTeachersUser$Outbound,
  z.ZodTypeDef,
  GetAllTeachersUser
> = z.object({
  sourcedId: z.string(),
  status: GetAllTeachersStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetAllTeachersUserId$outboundSchema))
    .optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetAllTeachersRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetAllTeachersAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetAllTeachersPrimaryOrg$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersUser$ {
  /** @deprecated use `GetAllTeachersUser$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersUser$inboundSchema;
  /** @deprecated use `GetAllTeachersUser$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersUser$outboundSchema;
  /** @deprecated use `GetAllTeachersUser$Outbound` instead. */
  export type Outbound = GetAllTeachersUser$Outbound;
}

export function getAllTeachersUserToJSON(
  getAllTeachersUser: GetAllTeachersUser,
): string {
  return JSON.stringify(
    GetAllTeachersUser$outboundSchema.parse(getAllTeachersUser),
  );
}

export function getAllTeachersUserFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersUser' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersResponseBody$inboundSchema: z.ZodType<
  GetAllTeachersResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  users: z.array(z.lazy(() => GetAllTeachersUser$inboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetAllTeachersResponseBody$Outbound = {
  users: Array<GetAllTeachersUser$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetAllTeachersResponseBody$outboundSchema: z.ZodType<
  GetAllTeachersResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllTeachersResponseBody
> = z.object({
  users: z.array(z.lazy(() => GetAllTeachersUser$outboundSchema)),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersResponseBody$ {
  /** @deprecated use `GetAllTeachersResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersResponseBody$inboundSchema;
  /** @deprecated use `GetAllTeachersResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersResponseBody$outboundSchema;
  /** @deprecated use `GetAllTeachersResponseBody$Outbound` instead. */
  export type Outbound = GetAllTeachersResponseBody$Outbound;
}

export function getAllTeachersResponseBodyToJSON(
  getAllTeachersResponseBody: GetAllTeachersResponseBody,
): string {
  return JSON.stringify(
    GetAllTeachersResponseBody$outboundSchema.parse(getAllTeachersResponseBody),
  );
}

export function getAllTeachersResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllTeachersResponse$inboundSchema: z.ZodType<
  GetAllTeachersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllTeachersResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllTeachersResponse$Outbound = {
  Result: GetAllTeachersResponseBody$Outbound;
};

/** @internal */
export const GetAllTeachersResponse$outboundSchema: z.ZodType<
  GetAllTeachersResponse$Outbound,
  z.ZodTypeDef,
  GetAllTeachersResponse
> = z.object({
  result: z.lazy(() => GetAllTeachersResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllTeachersResponse$ {
  /** @deprecated use `GetAllTeachersResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllTeachersResponse$inboundSchema;
  /** @deprecated use `GetAllTeachersResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllTeachersResponse$outboundSchema;
  /** @deprecated use `GetAllTeachersResponse$Outbound` instead. */
  export type Outbound = GetAllTeachersResponse$Outbound;
}

export function getAllTeachersResponseToJSON(
  getAllTeachersResponse: GetAllTeachersResponse,
): string {
  return JSON.stringify(
    GetAllTeachersResponse$outboundSchema.parse(getAllTeachersResponse),
  );
}

export function getAllTeachersResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllTeachersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllTeachersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllTeachersResponse' from JSON`,
  );
}
