/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Successful response containing a collection of categories
 */
export type GetAllCategoriesResponse = {
  categories: Array<components.Category>;
};

/** @internal */
export const GetAllCategoriesResponse$inboundSchema: z.ZodType<
  GetAllCategoriesResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  categories: z.array(components.Category$inboundSchema),
});

/** @internal */
export type GetAllCategoriesResponse$Outbound = {
  categories: Array<components.Category$Outbound>;
};

/** @internal */
export const GetAllCategoriesResponse$outboundSchema: z.ZodType<
  GetAllCategoriesResponse$Outbound,
  z.ZodTypeDef,
  GetAllCategoriesResponse
> = z.object({
  categories: z.array(components.Category$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllCategoriesResponse$ {
  /** @deprecated use `GetAllCategoriesResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllCategoriesResponse$inboundSchema;
  /** @deprecated use `GetAllCategoriesResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllCategoriesResponse$outboundSchema;
  /** @deprecated use `GetAllCategoriesResponse$Outbound` instead. */
  export type Outbound = GetAllCategoriesResponse$Outbound;
}

export function getAllCategoriesResponseToJSON(
  getAllCategoriesResponse: GetAllCategoriesResponse,
): string {
  return JSON.stringify(
    GetAllCategoriesResponse$outboundSchema.parse(getAllCategoriesResponse),
  );
}

export function getAllCategoriesResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllCategoriesResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllCategoriesResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllCategoriesResponse' from JSON`,
  );
}
