/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetOrgRequest = {
  /**
   * The sourcedId of the organization to retrieve
   */
  sourcedId: string;
};

/**
 * Organization retrieved successfully
 */
export type GetOrgResponse = {
  /**
   * Represents an organization.
   */
  org: components.Org;
};

/** @internal */
export const GetOrgRequest$inboundSchema: z.ZodType<
  GetOrgRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetOrgRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetOrgRequest$outboundSchema: z.ZodType<
  GetOrgRequest$Outbound,
  z.ZodTypeDef,
  GetOrgRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgRequest$ {
  /** @deprecated use `GetOrgRequest$inboundSchema` instead. */
  export const inboundSchema = GetOrgRequest$inboundSchema;
  /** @deprecated use `GetOrgRequest$outboundSchema` instead. */
  export const outboundSchema = GetOrgRequest$outboundSchema;
  /** @deprecated use `GetOrgRequest$Outbound` instead. */
  export type Outbound = GetOrgRequest$Outbound;
}

export function getOrgRequestToJSON(getOrgRequest: GetOrgRequest): string {
  return JSON.stringify(GetOrgRequest$outboundSchema.parse(getOrgRequest));
}

export function getOrgRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgRequest' from JSON`,
  );
}

/** @internal */
export const GetOrgResponse$inboundSchema: z.ZodType<
  GetOrgResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  org: components.Org$inboundSchema,
});

/** @internal */
export type GetOrgResponse$Outbound = {
  org: components.Org$Outbound;
};

/** @internal */
export const GetOrgResponse$outboundSchema: z.ZodType<
  GetOrgResponse$Outbound,
  z.ZodTypeDef,
  GetOrgResponse
> = z.object({
  org: components.Org$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetOrgResponse$ {
  /** @deprecated use `GetOrgResponse$inboundSchema` instead. */
  export const inboundSchema = GetOrgResponse$inboundSchema;
  /** @deprecated use `GetOrgResponse$outboundSchema` instead. */
  export const outboundSchema = GetOrgResponse$outboundSchema;
  /** @deprecated use `GetOrgResponse$Outbound` instead. */
  export type Outbound = GetOrgResponse$Outbound;
}

export function getOrgResponseToJSON(getOrgResponse: GetOrgResponse): string {
  return JSON.stringify(GetOrgResponse$outboundSchema.parse(getOrgResponse));
}

export function getOrgResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetOrgResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetOrgResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetOrgResponse' from JSON`,
  );
}
