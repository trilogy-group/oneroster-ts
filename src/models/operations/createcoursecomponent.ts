/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const CreateCourseComponentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type CreateCourseComponentStatus = ClosedEnum<
  typeof CreateCourseComponentStatus
>;

export type CreateCourseComponentCourse = {
  sourcedId: string;
};

export type CreateCourseComponentCourseComponent2 = {
  sourcedId: string;
};

export type CreateCourseComponentParent = {
  sourcedId: string;
};

/**
 * Represents a component of a course.
 */
export type CreateCourseComponentCourseComponent1 = {
  sourcedId?: string | undefined;
  status: CreateCourseComponentStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: CreateCourseComponentCourse;
  courseComponent?: CreateCourseComponentCourseComponent2 | null | undefined;
  parent?: CreateCourseComponentParent | null | undefined;
  title: string;
  sortOrder?: number | undefined;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  /**
   * The date the component is unlocked for the student
   */
  unlockDate?: string | undefined;
};

export type CreateCourseComponentRequest = {
  /**
   * Represents a component of a course.
   */
  courseComponent: CreateCourseComponentCourseComponent1;
};

export type CreateCourseComponentSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Created Course Component Successfully
 */
export type CreateCourseComponentResponse = {
  sourcedIdPairs: CreateCourseComponentSourcedIdPairs;
};

/** @internal */
export const CreateCourseComponentStatus$inboundSchema: z.ZodNativeEnum<
  typeof CreateCourseComponentStatus
> = z.nativeEnum(CreateCourseComponentStatus);

/** @internal */
export const CreateCourseComponentStatus$outboundSchema: z.ZodNativeEnum<
  typeof CreateCourseComponentStatus
> = CreateCourseComponentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentStatus$ {
  /** @deprecated use `CreateCourseComponentStatus$inboundSchema` instead. */
  export const inboundSchema = CreateCourseComponentStatus$inboundSchema;
  /** @deprecated use `CreateCourseComponentStatus$outboundSchema` instead. */
  export const outboundSchema = CreateCourseComponentStatus$outboundSchema;
}

/** @internal */
export const CreateCourseComponentCourse$inboundSchema: z.ZodType<
  CreateCourseComponentCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateCourseComponentCourse$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateCourseComponentCourse$outboundSchema: z.ZodType<
  CreateCourseComponentCourse$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentCourse
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentCourse$ {
  /** @deprecated use `CreateCourseComponentCourse$inboundSchema` instead. */
  export const inboundSchema = CreateCourseComponentCourse$inboundSchema;
  /** @deprecated use `CreateCourseComponentCourse$outboundSchema` instead. */
  export const outboundSchema = CreateCourseComponentCourse$outboundSchema;
  /** @deprecated use `CreateCourseComponentCourse$Outbound` instead. */
  export type Outbound = CreateCourseComponentCourse$Outbound;
}

export function createCourseComponentCourseToJSON(
  createCourseComponentCourse: CreateCourseComponentCourse,
): string {
  return JSON.stringify(
    CreateCourseComponentCourse$outboundSchema.parse(
      createCourseComponentCourse,
    ),
  );
}

export function createCourseComponentCourseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseComponentCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentCourse' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentCourseComponent2$inboundSchema: z.ZodType<
  CreateCourseComponentCourseComponent2,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateCourseComponentCourseComponent2$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateCourseComponentCourseComponent2$outboundSchema: z.ZodType<
  CreateCourseComponentCourseComponent2$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentCourseComponent2
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentCourseComponent2$ {
  /** @deprecated use `CreateCourseComponentCourseComponent2$inboundSchema` instead. */
  export const inboundSchema =
    CreateCourseComponentCourseComponent2$inboundSchema;
  /** @deprecated use `CreateCourseComponentCourseComponent2$outboundSchema` instead. */
  export const outboundSchema =
    CreateCourseComponentCourseComponent2$outboundSchema;
  /** @deprecated use `CreateCourseComponentCourseComponent2$Outbound` instead. */
  export type Outbound = CreateCourseComponentCourseComponent2$Outbound;
}

export function createCourseComponentCourseComponent2ToJSON(
  createCourseComponentCourseComponent2: CreateCourseComponentCourseComponent2,
): string {
  return JSON.stringify(
    CreateCourseComponentCourseComponent2$outboundSchema.parse(
      createCourseComponentCourseComponent2,
    ),
  );
}

export function createCourseComponentCourseComponent2FromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentCourseComponent2, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCourseComponentCourseComponent2$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentCourseComponent2' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentParent$inboundSchema: z.ZodType<
  CreateCourseComponentParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type CreateCourseComponentParent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const CreateCourseComponentParent$outboundSchema: z.ZodType<
  CreateCourseComponentParent$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentParent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentParent$ {
  /** @deprecated use `CreateCourseComponentParent$inboundSchema` instead. */
  export const inboundSchema = CreateCourseComponentParent$inboundSchema;
  /** @deprecated use `CreateCourseComponentParent$outboundSchema` instead. */
  export const outboundSchema = CreateCourseComponentParent$outboundSchema;
  /** @deprecated use `CreateCourseComponentParent$Outbound` instead. */
  export type Outbound = CreateCourseComponentParent$Outbound;
}

export function createCourseComponentParentToJSON(
  createCourseComponentParent: CreateCourseComponentParent,
): string {
  return JSON.stringify(
    CreateCourseComponentParent$outboundSchema.parse(
      createCourseComponentParent,
    ),
  );
}

export function createCourseComponentParentFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseComponentParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentParent' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentCourseComponent1$inboundSchema: z.ZodType<
  CreateCourseComponentCourseComponent1,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateCourseComponentStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => CreateCourseComponentCourse$inboundSchema),
  courseComponent: z.nullable(
    z.lazy(() => CreateCourseComponentCourseComponent2$inboundSchema),
  ).optional(),
  parent: z.nullable(z.lazy(() => CreateCourseComponentParent$inboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number().optional(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string().optional(),
});

/** @internal */
export type CreateCourseComponentCourseComponent1$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  course: CreateCourseComponentCourse$Outbound;
  courseComponent?:
    | CreateCourseComponentCourseComponent2$Outbound
    | null
    | undefined;
  parent?: CreateCourseComponentParent$Outbound | null | undefined;
  title: string;
  sortOrder?: number | undefined;
  prerequisites?: Array<string> | null | undefined;
  prerequisiteCriteria?: string | null | undefined;
  unlockDate?: string | undefined;
};

/** @internal */
export const CreateCourseComponentCourseComponent1$outboundSchema: z.ZodType<
  CreateCourseComponentCourseComponent1$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentCourseComponent1
> = z.object({
  sourcedId: z.string().optional(),
  status: CreateCourseComponentStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  course: z.lazy(() => CreateCourseComponentCourse$outboundSchema),
  courseComponent: z.nullable(
    z.lazy(() => CreateCourseComponentCourseComponent2$outboundSchema),
  ).optional(),
  parent: z.nullable(z.lazy(() => CreateCourseComponentParent$outboundSchema))
    .optional(),
  title: z.string(),
  sortOrder: z.number().optional(),
  prerequisites: z.nullable(z.array(z.string())).optional(),
  prerequisiteCriteria: z.nullable(z.string()).optional(),
  unlockDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentCourseComponent1$ {
  /** @deprecated use `CreateCourseComponentCourseComponent1$inboundSchema` instead. */
  export const inboundSchema =
    CreateCourseComponentCourseComponent1$inboundSchema;
  /** @deprecated use `CreateCourseComponentCourseComponent1$outboundSchema` instead. */
  export const outboundSchema =
    CreateCourseComponentCourseComponent1$outboundSchema;
  /** @deprecated use `CreateCourseComponentCourseComponent1$Outbound` instead. */
  export type Outbound = CreateCourseComponentCourseComponent1$Outbound;
}

export function createCourseComponentCourseComponent1ToJSON(
  createCourseComponentCourseComponent1: CreateCourseComponentCourseComponent1,
): string {
  return JSON.stringify(
    CreateCourseComponentCourseComponent1$outboundSchema.parse(
      createCourseComponentCourseComponent1,
    ),
  );
}

export function createCourseComponentCourseComponent1FromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentCourseComponent1, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCourseComponentCourseComponent1$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentCourseComponent1' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentRequest$inboundSchema: z.ZodType<
  CreateCourseComponentRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  courseComponent: z.lazy(() =>
    CreateCourseComponentCourseComponent1$inboundSchema
  ),
});

/** @internal */
export type CreateCourseComponentRequest$Outbound = {
  courseComponent: CreateCourseComponentCourseComponent1$Outbound;
};

/** @internal */
export const CreateCourseComponentRequest$outboundSchema: z.ZodType<
  CreateCourseComponentRequest$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentRequest
> = z.object({
  courseComponent: z.lazy(() =>
    CreateCourseComponentCourseComponent1$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentRequest$ {
  /** @deprecated use `CreateCourseComponentRequest$inboundSchema` instead. */
  export const inboundSchema = CreateCourseComponentRequest$inboundSchema;
  /** @deprecated use `CreateCourseComponentRequest$outboundSchema` instead. */
  export const outboundSchema = CreateCourseComponentRequest$outboundSchema;
  /** @deprecated use `CreateCourseComponentRequest$Outbound` instead. */
  export type Outbound = CreateCourseComponentRequest$Outbound;
}

export function createCourseComponentRequestToJSON(
  createCourseComponentRequest: CreateCourseComponentRequest,
): string {
  return JSON.stringify(
    CreateCourseComponentRequest$outboundSchema.parse(
      createCourseComponentRequest,
    ),
  );
}

export function createCourseComponentRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseComponentRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentRequest' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentSourcedIdPairs$inboundSchema: z.ZodType<
  CreateCourseComponentSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type CreateCourseComponentSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const CreateCourseComponentSourcedIdPairs$outboundSchema: z.ZodType<
  CreateCourseComponentSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentSourcedIdPairs$ {
  /** @deprecated use `CreateCourseComponentSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema =
    CreateCourseComponentSourcedIdPairs$inboundSchema;
  /** @deprecated use `CreateCourseComponentSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema =
    CreateCourseComponentSourcedIdPairs$outboundSchema;
  /** @deprecated use `CreateCourseComponentSourcedIdPairs$Outbound` instead. */
  export type Outbound = CreateCourseComponentSourcedIdPairs$Outbound;
}

export function createCourseComponentSourcedIdPairsToJSON(
  createCourseComponentSourcedIdPairs: CreateCourseComponentSourcedIdPairs,
): string {
  return JSON.stringify(
    CreateCourseComponentSourcedIdPairs$outboundSchema.parse(
      createCourseComponentSourcedIdPairs,
    ),
  );
}

export function createCourseComponentSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateCourseComponentSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const CreateCourseComponentResponse$inboundSchema: z.ZodType<
  CreateCourseComponentResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() =>
    CreateCourseComponentSourcedIdPairs$inboundSchema
  ),
});

/** @internal */
export type CreateCourseComponentResponse$Outbound = {
  sourcedIdPairs: CreateCourseComponentSourcedIdPairs$Outbound;
};

/** @internal */
export const CreateCourseComponentResponse$outboundSchema: z.ZodType<
  CreateCourseComponentResponse$Outbound,
  z.ZodTypeDef,
  CreateCourseComponentResponse
> = z.object({
  sourcedIdPairs: z.lazy(() =>
    CreateCourseComponentSourcedIdPairs$outboundSchema
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateCourseComponentResponse$ {
  /** @deprecated use `CreateCourseComponentResponse$inboundSchema` instead. */
  export const inboundSchema = CreateCourseComponentResponse$inboundSchema;
  /** @deprecated use `CreateCourseComponentResponse$outboundSchema` instead. */
  export const outboundSchema = CreateCourseComponentResponse$outboundSchema;
  /** @deprecated use `CreateCourseComponentResponse$Outbound` instead. */
  export type Outbound = CreateCourseComponentResponse$Outbound;
}

export function createCourseComponentResponseToJSON(
  createCourseComponentResponse: CreateCourseComponentResponse,
): string {
  return JSON.stringify(
    CreateCourseComponentResponse$outboundSchema.parse(
      createCourseComponentResponse,
    ),
  );
}

export function createCourseComponentResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateCourseComponentResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateCourseComponentResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateCourseComponentResponse' from JSON`,
  );
}
