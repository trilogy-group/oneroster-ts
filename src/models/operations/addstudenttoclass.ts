/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AddStudentToClassUser = {
  sourcedId: string;
};

export type AddStudentToClassEnrollment = {
  user: AddStudentToClassUser;
  primary?: boolean | undefined;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

export type AddStudentToClassRequestBody = {
  enrollment: AddStudentToClassEnrollment;
};

export type AddStudentToClassRequest = {
  /**
   * Class sourcedId
   */
  classSourcedId: string;
  requestBody?: AddStudentToClassRequestBody | undefined;
};

export type AddStudentToClassSourcedIdPairs = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/**
 * Student successfully enrolled in class
 */
export type AddStudentToClassResponse = {
  sourcedIdPairs: AddStudentToClassSourcedIdPairs;
};

/** @internal */
export const AddStudentToClassUser$inboundSchema: z.ZodType<
  AddStudentToClassUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type AddStudentToClassUser$Outbound = {
  sourcedId: string;
};

/** @internal */
export const AddStudentToClassUser$outboundSchema: z.ZodType<
  AddStudentToClassUser$Outbound,
  z.ZodTypeDef,
  AddStudentToClassUser
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassUser$ {
  /** @deprecated use `AddStudentToClassUser$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassUser$inboundSchema;
  /** @deprecated use `AddStudentToClassUser$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassUser$outboundSchema;
  /** @deprecated use `AddStudentToClassUser$Outbound` instead. */
  export type Outbound = AddStudentToClassUser$Outbound;
}

export function addStudentToClassUserToJSON(
  addStudentToClassUser: AddStudentToClassUser,
): string {
  return JSON.stringify(
    AddStudentToClassUser$outboundSchema.parse(addStudentToClassUser),
  );
}

export function addStudentToClassUserFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassUser' from JSON`,
  );
}

/** @internal */
export const AddStudentToClassEnrollment$inboundSchema: z.ZodType<
  AddStudentToClassEnrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => AddStudentToClassUser$inboundSchema),
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/** @internal */
export type AddStudentToClassEnrollment$Outbound = {
  user: AddStudentToClassUser$Outbound;
  primary: boolean;
  beginDate?: string | undefined;
  endDate?: string | undefined;
};

/** @internal */
export const AddStudentToClassEnrollment$outboundSchema: z.ZodType<
  AddStudentToClassEnrollment$Outbound,
  z.ZodTypeDef,
  AddStudentToClassEnrollment
> = z.object({
  user: z.lazy(() => AddStudentToClassUser$outboundSchema),
  primary: z.boolean().default(false),
  beginDate: z.string().optional(),
  endDate: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassEnrollment$ {
  /** @deprecated use `AddStudentToClassEnrollment$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassEnrollment$inboundSchema;
  /** @deprecated use `AddStudentToClassEnrollment$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassEnrollment$outboundSchema;
  /** @deprecated use `AddStudentToClassEnrollment$Outbound` instead. */
  export type Outbound = AddStudentToClassEnrollment$Outbound;
}

export function addStudentToClassEnrollmentToJSON(
  addStudentToClassEnrollment: AddStudentToClassEnrollment,
): string {
  return JSON.stringify(
    AddStudentToClassEnrollment$outboundSchema.parse(
      addStudentToClassEnrollment,
    ),
  );
}

export function addStudentToClassEnrollmentFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassEnrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassEnrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassEnrollment' from JSON`,
  );
}

/** @internal */
export const AddStudentToClassRequestBody$inboundSchema: z.ZodType<
  AddStudentToClassRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  enrollment: z.lazy(() => AddStudentToClassEnrollment$inboundSchema),
});

/** @internal */
export type AddStudentToClassRequestBody$Outbound = {
  enrollment: AddStudentToClassEnrollment$Outbound;
};

/** @internal */
export const AddStudentToClassRequestBody$outboundSchema: z.ZodType<
  AddStudentToClassRequestBody$Outbound,
  z.ZodTypeDef,
  AddStudentToClassRequestBody
> = z.object({
  enrollment: z.lazy(() => AddStudentToClassEnrollment$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassRequestBody$ {
  /** @deprecated use `AddStudentToClassRequestBody$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassRequestBody$inboundSchema;
  /** @deprecated use `AddStudentToClassRequestBody$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassRequestBody$outboundSchema;
  /** @deprecated use `AddStudentToClassRequestBody$Outbound` instead. */
  export type Outbound = AddStudentToClassRequestBody$Outbound;
}

export function addStudentToClassRequestBodyToJSON(
  addStudentToClassRequestBody: AddStudentToClassRequestBody,
): string {
  return JSON.stringify(
    AddStudentToClassRequestBody$outboundSchema.parse(
      addStudentToClassRequestBody,
    ),
  );
}

export function addStudentToClassRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassRequestBody' from JSON`,
  );
}

/** @internal */
export const AddStudentToClassRequest$inboundSchema: z.ZodType<
  AddStudentToClassRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  classSourcedId: z.string(),
  RequestBody: z.lazy(() => AddStudentToClassRequestBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type AddStudentToClassRequest$Outbound = {
  classSourcedId: string;
  RequestBody?: AddStudentToClassRequestBody$Outbound | undefined;
};

/** @internal */
export const AddStudentToClassRequest$outboundSchema: z.ZodType<
  AddStudentToClassRequest$Outbound,
  z.ZodTypeDef,
  AddStudentToClassRequest
> = z.object({
  classSourcedId: z.string(),
  requestBody: z.lazy(() => AddStudentToClassRequestBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassRequest$ {
  /** @deprecated use `AddStudentToClassRequest$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassRequest$inboundSchema;
  /** @deprecated use `AddStudentToClassRequest$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassRequest$outboundSchema;
  /** @deprecated use `AddStudentToClassRequest$Outbound` instead. */
  export type Outbound = AddStudentToClassRequest$Outbound;
}

export function addStudentToClassRequestToJSON(
  addStudentToClassRequest: AddStudentToClassRequest,
): string {
  return JSON.stringify(
    AddStudentToClassRequest$outboundSchema.parse(addStudentToClassRequest),
  );
}

export function addStudentToClassRequestFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassRequest' from JSON`,
  );
}

/** @internal */
export const AddStudentToClassSourcedIdPairs$inboundSchema: z.ZodType<
  AddStudentToClassSourcedIdPairs,
  z.ZodTypeDef,
  unknown
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/** @internal */
export type AddStudentToClassSourcedIdPairs$Outbound = {
  suppliedSourcedId: string;
  allocatedSourcedId: string;
};

/** @internal */
export const AddStudentToClassSourcedIdPairs$outboundSchema: z.ZodType<
  AddStudentToClassSourcedIdPairs$Outbound,
  z.ZodTypeDef,
  AddStudentToClassSourcedIdPairs
> = z.object({
  suppliedSourcedId: z.string(),
  allocatedSourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassSourcedIdPairs$ {
  /** @deprecated use `AddStudentToClassSourcedIdPairs$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassSourcedIdPairs$inboundSchema;
  /** @deprecated use `AddStudentToClassSourcedIdPairs$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassSourcedIdPairs$outboundSchema;
  /** @deprecated use `AddStudentToClassSourcedIdPairs$Outbound` instead. */
  export type Outbound = AddStudentToClassSourcedIdPairs$Outbound;
}

export function addStudentToClassSourcedIdPairsToJSON(
  addStudentToClassSourcedIdPairs: AddStudentToClassSourcedIdPairs,
): string {
  return JSON.stringify(
    AddStudentToClassSourcedIdPairs$outboundSchema.parse(
      addStudentToClassSourcedIdPairs,
    ),
  );
}

export function addStudentToClassSourcedIdPairsFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassSourcedIdPairs, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassSourcedIdPairs$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassSourcedIdPairs' from JSON`,
  );
}

/** @internal */
export const AddStudentToClassResponse$inboundSchema: z.ZodType<
  AddStudentToClassResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedIdPairs: z.lazy(() => AddStudentToClassSourcedIdPairs$inboundSchema),
});

/** @internal */
export type AddStudentToClassResponse$Outbound = {
  sourcedIdPairs: AddStudentToClassSourcedIdPairs$Outbound;
};

/** @internal */
export const AddStudentToClassResponse$outboundSchema: z.ZodType<
  AddStudentToClassResponse$Outbound,
  z.ZodTypeDef,
  AddStudentToClassResponse
> = z.object({
  sourcedIdPairs: z.lazy(() => AddStudentToClassSourcedIdPairs$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AddStudentToClassResponse$ {
  /** @deprecated use `AddStudentToClassResponse$inboundSchema` instead. */
  export const inboundSchema = AddStudentToClassResponse$inboundSchema;
  /** @deprecated use `AddStudentToClassResponse$outboundSchema` instead. */
  export const outboundSchema = AddStudentToClassResponse$outboundSchema;
  /** @deprecated use `AddStudentToClassResponse$Outbound` instead. */
  export type Outbound = AddStudentToClassResponse$Outbound;
}

export function addStudentToClassResponseToJSON(
  addStudentToClassResponse: AddStudentToClassResponse,
): string {
  return JSON.stringify(
    AddStudentToClassResponse$outboundSchema.parse(addStudentToClassResponse),
  );
}

export function addStudentToClassResponseFromJSON(
  jsonString: string,
): SafeParseResult<AddStudentToClassResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AddStudentToClassResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AddStudentToClassResponse' from JSON`,
  );
}
