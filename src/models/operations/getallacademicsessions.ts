/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The order to sort the response by
 */
export const GetAllAcademicSessionsOrderBy = {
  Asc: "asc",
  Desc: "desc",
} as const;
/**
 * The order to sort the response by
 */
export type GetAllAcademicSessionsOrderBy = ClosedEnum<
  typeof GetAllAcademicSessionsOrderBy
>;

export type GetAllAcademicSessionsRequest = {
  /**
   * Comma-separated list of fields to include in the response
   */
  fields?: string | undefined;
  /**
   * The maximum number of items to return in the paginated response
   */
  limit?: number | undefined;
  /**
   * The number of items to skip in the paginated response
   */
  offset?: number | undefined;
  /**
   * The field to sort the response by
   */
  sort?: string | undefined;
  /**
   * The order to sort the response by
   */
  orderBy?: GetAllAcademicSessionsOrderBy | undefined;
  /**
   * The filter to apply to the response
   */
  filter?: string | undefined;
  /**
   * The search query to apply to the response
   */
  search?: string | undefined;
};

/**
 * Success
 */
export type GetAllAcademicSessionsResponseBody = {
  academicSessions: Array<components.AcademicSession>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

export type GetAllAcademicSessionsResponse = {
  result: GetAllAcademicSessionsResponseBody;
};

/** @internal */
export const GetAllAcademicSessionsOrderBy$inboundSchema: z.ZodNativeEnum<
  typeof GetAllAcademicSessionsOrderBy
> = z.nativeEnum(GetAllAcademicSessionsOrderBy);

/** @internal */
export const GetAllAcademicSessionsOrderBy$outboundSchema: z.ZodNativeEnum<
  typeof GetAllAcademicSessionsOrderBy
> = GetAllAcademicSessionsOrderBy$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAcademicSessionsOrderBy$ {
  /** @deprecated use `GetAllAcademicSessionsOrderBy$inboundSchema` instead. */
  export const inboundSchema = GetAllAcademicSessionsOrderBy$inboundSchema;
  /** @deprecated use `GetAllAcademicSessionsOrderBy$outboundSchema` instead. */
  export const outboundSchema = GetAllAcademicSessionsOrderBy$outboundSchema;
}

/** @internal */
export const GetAllAcademicSessionsRequest$inboundSchema: z.ZodType<
  GetAllAcademicSessionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllAcademicSessionsOrderBy$inboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/** @internal */
export type GetAllAcademicSessionsRequest$Outbound = {
  fields?: string | undefined;
  limit: number;
  offset: number;
  sort?: string | undefined;
  orderBy?: string | undefined;
  filter?: string | undefined;
  search?: string | undefined;
};

/** @internal */
export const GetAllAcademicSessionsRequest$outboundSchema: z.ZodType<
  GetAllAcademicSessionsRequest$Outbound,
  z.ZodTypeDef,
  GetAllAcademicSessionsRequest
> = z.object({
  fields: z.string().optional(),
  limit: z.number().int().default(100),
  offset: z.number().int().default(0),
  sort: z.string().optional(),
  orderBy: GetAllAcademicSessionsOrderBy$outboundSchema.optional(),
  filter: z.string().optional(),
  search: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAcademicSessionsRequest$ {
  /** @deprecated use `GetAllAcademicSessionsRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllAcademicSessionsRequest$inboundSchema;
  /** @deprecated use `GetAllAcademicSessionsRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllAcademicSessionsRequest$outboundSchema;
  /** @deprecated use `GetAllAcademicSessionsRequest$Outbound` instead. */
  export type Outbound = GetAllAcademicSessionsRequest$Outbound;
}

export function getAllAcademicSessionsRequestToJSON(
  getAllAcademicSessionsRequest: GetAllAcademicSessionsRequest,
): string {
  return JSON.stringify(
    GetAllAcademicSessionsRequest$outboundSchema.parse(
      getAllAcademicSessionsRequest,
    ),
  );
}

export function getAllAcademicSessionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllAcademicSessionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllAcademicSessionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllAcademicSessionsRequest' from JSON`,
  );
}

/** @internal */
export const GetAllAcademicSessionsResponseBody$inboundSchema: z.ZodType<
  GetAllAcademicSessionsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  academicSessions: z.array(components.AcademicSession$inboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/** @internal */
export type GetAllAcademicSessionsResponseBody$Outbound = {
  academicSessions: Array<components.AcademicSession$Outbound>;
  totalCount: number;
  pageCount: number;
  pageNumber: number;
  offset: number;
  limit: number;
};

/** @internal */
export const GetAllAcademicSessionsResponseBody$outboundSchema: z.ZodType<
  GetAllAcademicSessionsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllAcademicSessionsResponseBody
> = z.object({
  academicSessions: z.array(components.AcademicSession$outboundSchema),
  totalCount: z.number(),
  pageCount: z.number(),
  pageNumber: z.number(),
  offset: z.number(),
  limit: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAcademicSessionsResponseBody$ {
  /** @deprecated use `GetAllAcademicSessionsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllAcademicSessionsResponseBody$inboundSchema;
  /** @deprecated use `GetAllAcademicSessionsResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    GetAllAcademicSessionsResponseBody$outboundSchema;
  /** @deprecated use `GetAllAcademicSessionsResponseBody$Outbound` instead. */
  export type Outbound = GetAllAcademicSessionsResponseBody$Outbound;
}

export function getAllAcademicSessionsResponseBodyToJSON(
  getAllAcademicSessionsResponseBody: GetAllAcademicSessionsResponseBody,
): string {
  return JSON.stringify(
    GetAllAcademicSessionsResponseBody$outboundSchema.parse(
      getAllAcademicSessionsResponseBody,
    ),
  );
}

export function getAllAcademicSessionsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllAcademicSessionsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      GetAllAcademicSessionsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllAcademicSessionsResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllAcademicSessionsResponse$inboundSchema: z.ZodType<
  GetAllAcademicSessionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  Result: z.lazy(() => GetAllAcademicSessionsResponseBody$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "Result": "result",
  });
});

/** @internal */
export type GetAllAcademicSessionsResponse$Outbound = {
  Result: GetAllAcademicSessionsResponseBody$Outbound;
};

/** @internal */
export const GetAllAcademicSessionsResponse$outboundSchema: z.ZodType<
  GetAllAcademicSessionsResponse$Outbound,
  z.ZodTypeDef,
  GetAllAcademicSessionsResponse
> = z.object({
  result: z.lazy(() => GetAllAcademicSessionsResponseBody$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    result: "Result",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllAcademicSessionsResponse$ {
  /** @deprecated use `GetAllAcademicSessionsResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllAcademicSessionsResponse$inboundSchema;
  /** @deprecated use `GetAllAcademicSessionsResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllAcademicSessionsResponse$outboundSchema;
  /** @deprecated use `GetAllAcademicSessionsResponse$Outbound` instead. */
  export type Outbound = GetAllAcademicSessionsResponse$Outbound;
}

export function getAllAcademicSessionsResponseToJSON(
  getAllAcademicSessionsResponse: GetAllAcademicSessionsResponse,
): string {
  return JSON.stringify(
    GetAllAcademicSessionsResponse$outboundSchema.parse(
      getAllAcademicSessionsResponse,
    ),
  );
}

export function getAllAcademicSessionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllAcademicSessionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllAcademicSessionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllAcademicSessionsResponse' from JSON`,
  );
}
