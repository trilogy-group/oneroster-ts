/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetTeacherRequest = {
  /**
   * The sourcedId of the teacher
   */
  sourcedId: string;
};

export const GetTeacherStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type GetTeacherStatus = ClosedEnum<typeof GetTeacherStatus>;

export type GetTeacherUserId = {
  type: string;
  identifier: string;
};

export const GetTeacherRoleType = {
  Primary: "primary",
  Secondary: "secondary",
} as const;
export type GetTeacherRoleType = ClosedEnum<typeof GetTeacherRoleType>;

export const GetTeacherRoleEnum = {
  Administrator: "administrator",
  Aide: "aide",
  Guardian: "guardian",
  Parent: "parent",
  Proctor: "proctor",
  Relative: "relative",
  Student: "student",
  Teacher: "teacher",
} as const;
export type GetTeacherRoleEnum = ClosedEnum<typeof GetTeacherRoleEnum>;

export type GetTeacherOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeacherRole = {
  roleType: GetTeacherRoleType;
  role: GetTeacherRoleEnum;
  org: GetTeacherOrg;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

export const GetTeacherType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type GetTeacherType = ClosedEnum<typeof GetTeacherType>;

export type GetTeacherAgent = {
  href: string;
  sourcedId: string;
  type: GetTeacherType;
};

export type GetTeacherPrimaryOrg = {
  href: string;
  sourcedId: string;
  type: string;
};

export type GetTeacherUser = {
  sourcedId: string;
  status: GetTeacherStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeacherUserId> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeacherRole>;
  agents: Array<GetTeacherAgent>;
  primaryOrg?: GetTeacherPrimaryOrg | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/**
 * Successful response with the teacher
 */
export type GetTeacherResponse = {
  user: GetTeacherUser;
};

/** @internal */
export const GetTeacherRequest$inboundSchema: z.ZodType<
  GetTeacherRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GetTeacherRequest$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GetTeacherRequest$outboundSchema: z.ZodType<
  GetTeacherRequest$Outbound,
  z.ZodTypeDef,
  GetTeacherRequest
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherRequest$ {
  /** @deprecated use `GetTeacherRequest$inboundSchema` instead. */
  export const inboundSchema = GetTeacherRequest$inboundSchema;
  /** @deprecated use `GetTeacherRequest$outboundSchema` instead. */
  export const outboundSchema = GetTeacherRequest$outboundSchema;
  /** @deprecated use `GetTeacherRequest$Outbound` instead. */
  export type Outbound = GetTeacherRequest$Outbound;
}

export function getTeacherRequestToJSON(
  getTeacherRequest: GetTeacherRequest,
): string {
  return JSON.stringify(
    GetTeacherRequest$outboundSchema.parse(getTeacherRequest),
  );
}

export function getTeacherRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherRequest' from JSON`,
  );
}

/** @internal */
export const GetTeacherStatus$inboundSchema: z.ZodNativeEnum<
  typeof GetTeacherStatus
> = z.nativeEnum(GetTeacherStatus);

/** @internal */
export const GetTeacherStatus$outboundSchema: z.ZodNativeEnum<
  typeof GetTeacherStatus
> = GetTeacherStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherStatus$ {
  /** @deprecated use `GetTeacherStatus$inboundSchema` instead. */
  export const inboundSchema = GetTeacherStatus$inboundSchema;
  /** @deprecated use `GetTeacherStatus$outboundSchema` instead. */
  export const outboundSchema = GetTeacherStatus$outboundSchema;
}

/** @internal */
export const GetTeacherUserId$inboundSchema: z.ZodType<
  GetTeacherUserId,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/** @internal */
export type GetTeacherUserId$Outbound = {
  type: string;
  identifier: string;
};

/** @internal */
export const GetTeacherUserId$outboundSchema: z.ZodType<
  GetTeacherUserId$Outbound,
  z.ZodTypeDef,
  GetTeacherUserId
> = z.object({
  type: z.string(),
  identifier: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherUserId$ {
  /** @deprecated use `GetTeacherUserId$inboundSchema` instead. */
  export const inboundSchema = GetTeacherUserId$inboundSchema;
  /** @deprecated use `GetTeacherUserId$outboundSchema` instead. */
  export const outboundSchema = GetTeacherUserId$outboundSchema;
  /** @deprecated use `GetTeacherUserId$Outbound` instead. */
  export type Outbound = GetTeacherUserId$Outbound;
}

export function getTeacherUserIdToJSON(
  getTeacherUserId: GetTeacherUserId,
): string {
  return JSON.stringify(
    GetTeacherUserId$outboundSchema.parse(getTeacherUserId),
  );
}

export function getTeacherUserIdFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherUserId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherUserId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherUserId' from JSON`,
  );
}

/** @internal */
export const GetTeacherRoleType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeacherRoleType
> = z.nativeEnum(GetTeacherRoleType);

/** @internal */
export const GetTeacherRoleType$outboundSchema: z.ZodNativeEnum<
  typeof GetTeacherRoleType
> = GetTeacherRoleType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherRoleType$ {
  /** @deprecated use `GetTeacherRoleType$inboundSchema` instead. */
  export const inboundSchema = GetTeacherRoleType$inboundSchema;
  /** @deprecated use `GetTeacherRoleType$outboundSchema` instead. */
  export const outboundSchema = GetTeacherRoleType$outboundSchema;
}

/** @internal */
export const GetTeacherRoleEnum$inboundSchema: z.ZodNativeEnum<
  typeof GetTeacherRoleEnum
> = z.nativeEnum(GetTeacherRoleEnum);

/** @internal */
export const GetTeacherRoleEnum$outboundSchema: z.ZodNativeEnum<
  typeof GetTeacherRoleEnum
> = GetTeacherRoleEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherRoleEnum$ {
  /** @deprecated use `GetTeacherRoleEnum$inboundSchema` instead. */
  export const inboundSchema = GetTeacherRoleEnum$inboundSchema;
  /** @deprecated use `GetTeacherRoleEnum$outboundSchema` instead. */
  export const outboundSchema = GetTeacherRoleEnum$outboundSchema;
}

/** @internal */
export const GetTeacherOrg$inboundSchema: z.ZodType<
  GetTeacherOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeacherOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeacherOrg$outboundSchema: z.ZodType<
  GetTeacherOrg$Outbound,
  z.ZodTypeDef,
  GetTeacherOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherOrg$ {
  /** @deprecated use `GetTeacherOrg$inboundSchema` instead. */
  export const inboundSchema = GetTeacherOrg$inboundSchema;
  /** @deprecated use `GetTeacherOrg$outboundSchema` instead. */
  export const outboundSchema = GetTeacherOrg$outboundSchema;
  /** @deprecated use `GetTeacherOrg$Outbound` instead. */
  export type Outbound = GetTeacherOrg$Outbound;
}

export function getTeacherOrgToJSON(getTeacherOrg: GetTeacherOrg): string {
  return JSON.stringify(GetTeacherOrg$outboundSchema.parse(getTeacherOrg));
}

export function getTeacherOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherOrg' from JSON`,
  );
}

/** @internal */
export const GetTeacherRole$inboundSchema: z.ZodType<
  GetTeacherRole,
  z.ZodTypeDef,
  unknown
> = z.object({
  roleType: GetTeacherRoleType$inboundSchema,
  role: GetTeacherRoleEnum$inboundSchema,
  org: z.lazy(() => GetTeacherOrg$inboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/** @internal */
export type GetTeacherRole$Outbound = {
  roleType: string;
  role: string;
  org: GetTeacherOrg$Outbound;
  userProfile?: string | undefined;
  beginDate: string | null;
  endDate: string | null;
};

/** @internal */
export const GetTeacherRole$outboundSchema: z.ZodType<
  GetTeacherRole$Outbound,
  z.ZodTypeDef,
  GetTeacherRole
> = z.object({
  roleType: GetTeacherRoleType$outboundSchema,
  role: GetTeacherRoleEnum$outboundSchema,
  org: z.lazy(() => GetTeacherOrg$outboundSchema),
  userProfile: z.string().optional(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherRole$ {
  /** @deprecated use `GetTeacherRole$inboundSchema` instead. */
  export const inboundSchema = GetTeacherRole$inboundSchema;
  /** @deprecated use `GetTeacherRole$outboundSchema` instead. */
  export const outboundSchema = GetTeacherRole$outboundSchema;
  /** @deprecated use `GetTeacherRole$Outbound` instead. */
  export type Outbound = GetTeacherRole$Outbound;
}

export function getTeacherRoleToJSON(getTeacherRole: GetTeacherRole): string {
  return JSON.stringify(GetTeacherRole$outboundSchema.parse(getTeacherRole));
}

export function getTeacherRoleFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherRole, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherRole$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherRole' from JSON`,
  );
}

/** @internal */
export const GetTeacherType$inboundSchema: z.ZodNativeEnum<
  typeof GetTeacherType
> = z.nativeEnum(GetTeacherType);

/** @internal */
export const GetTeacherType$outboundSchema: z.ZodNativeEnum<
  typeof GetTeacherType
> = GetTeacherType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherType$ {
  /** @deprecated use `GetTeacherType$inboundSchema` instead. */
  export const inboundSchema = GetTeacherType$inboundSchema;
  /** @deprecated use `GetTeacherType$outboundSchema` instead. */
  export const outboundSchema = GetTeacherType$outboundSchema;
}

/** @internal */
export const GetTeacherAgent$inboundSchema: z.ZodType<
  GetTeacherAgent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeacherType$inboundSchema,
});

/** @internal */
export type GetTeacherAgent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeacherAgent$outboundSchema: z.ZodType<
  GetTeacherAgent$Outbound,
  z.ZodTypeDef,
  GetTeacherAgent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: GetTeacherType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherAgent$ {
  /** @deprecated use `GetTeacherAgent$inboundSchema` instead. */
  export const inboundSchema = GetTeacherAgent$inboundSchema;
  /** @deprecated use `GetTeacherAgent$outboundSchema` instead. */
  export const outboundSchema = GetTeacherAgent$outboundSchema;
  /** @deprecated use `GetTeacherAgent$Outbound` instead. */
  export type Outbound = GetTeacherAgent$Outbound;
}

export function getTeacherAgentToJSON(
  getTeacherAgent: GetTeacherAgent,
): string {
  return JSON.stringify(GetTeacherAgent$outboundSchema.parse(getTeacherAgent));
}

export function getTeacherAgentFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherAgent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherAgent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherAgent' from JSON`,
  );
}

/** @internal */
export const GetTeacherPrimaryOrg$inboundSchema: z.ZodType<
  GetTeacherPrimaryOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type GetTeacherPrimaryOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const GetTeacherPrimaryOrg$outboundSchema: z.ZodType<
  GetTeacherPrimaryOrg$Outbound,
  z.ZodTypeDef,
  GetTeacherPrimaryOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherPrimaryOrg$ {
  /** @deprecated use `GetTeacherPrimaryOrg$inboundSchema` instead. */
  export const inboundSchema = GetTeacherPrimaryOrg$inboundSchema;
  /** @deprecated use `GetTeacherPrimaryOrg$outboundSchema` instead. */
  export const outboundSchema = GetTeacherPrimaryOrg$outboundSchema;
  /** @deprecated use `GetTeacherPrimaryOrg$Outbound` instead. */
  export type Outbound = GetTeacherPrimaryOrg$Outbound;
}

export function getTeacherPrimaryOrgToJSON(
  getTeacherPrimaryOrg: GetTeacherPrimaryOrg,
): string {
  return JSON.stringify(
    GetTeacherPrimaryOrg$outboundSchema.parse(getTeacherPrimaryOrg),
  );
}

export function getTeacherPrimaryOrgFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherPrimaryOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherPrimaryOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherPrimaryOrg' from JSON`,
  );
}

/** @internal */
export const GetTeacherUser$inboundSchema: z.ZodType<
  GetTeacherUser,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: GetTeacherStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetTeacherUserId$inboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeacherRole$inboundSchema)),
  agents: z.array(z.lazy(() => GetTeacherAgent$inboundSchema)),
  primaryOrg: z.lazy(() => GetTeacherPrimaryOrg$inboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetTeacherUser$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  userMasterIdentifier?: string | null | undefined;
  username?: string | null | undefined;
  userIds?: Array<GetTeacherUserId$Outbound> | undefined;
  enabledUser: boolean;
  givenName: string;
  familyName: string;
  middleName?: string | null | undefined;
  roles: Array<GetTeacherRole$Outbound>;
  agents: Array<GetTeacherAgent$Outbound>;
  primaryOrg?: GetTeacherPrimaryOrg$Outbound | undefined;
  email?: string | null | undefined;
  preferredFirstName?: string | null | undefined;
  preferredMiddleName?: string | null | undefined;
  preferredLastName?: string | null | undefined;
  pronouns?: string | null | undefined;
  grades?: Array<string> | undefined;
  password?: string | null | undefined;
  sms?: string | null | undefined;
  phone?: string | null | undefined;
};

/** @internal */
export const GetTeacherUser$outboundSchema: z.ZodType<
  GetTeacherUser$Outbound,
  z.ZodTypeDef,
  GetTeacherUser
> = z.object({
  sourcedId: z.string(),
  status: GetTeacherStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  userMasterIdentifier: z.nullable(z.string()).optional(),
  username: z.nullable(z.string()).optional(),
  userIds: z.array(z.lazy(() => GetTeacherUserId$outboundSchema)).optional(),
  enabledUser: z.boolean(),
  givenName: z.string(),
  familyName: z.string(),
  middleName: z.nullable(z.string()).optional(),
  roles: z.array(z.lazy(() => GetTeacherRole$outboundSchema)),
  agents: z.array(z.lazy(() => GetTeacherAgent$outboundSchema)),
  primaryOrg: z.lazy(() => GetTeacherPrimaryOrg$outboundSchema).optional(),
  email: z.nullable(z.string()).optional(),
  preferredFirstName: z.nullable(z.string()).optional(),
  preferredMiddleName: z.nullable(z.string()).optional(),
  preferredLastName: z.nullable(z.string()).optional(),
  pronouns: z.nullable(z.string()).optional(),
  grades: z.array(z.string()).optional(),
  password: z.nullable(z.string()).optional(),
  sms: z.nullable(z.string()).optional(),
  phone: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherUser$ {
  /** @deprecated use `GetTeacherUser$inboundSchema` instead. */
  export const inboundSchema = GetTeacherUser$inboundSchema;
  /** @deprecated use `GetTeacherUser$outboundSchema` instead. */
  export const outboundSchema = GetTeacherUser$outboundSchema;
  /** @deprecated use `GetTeacherUser$Outbound` instead. */
  export type Outbound = GetTeacherUser$Outbound;
}

export function getTeacherUserToJSON(getTeacherUser: GetTeacherUser): string {
  return JSON.stringify(GetTeacherUser$outboundSchema.parse(getTeacherUser));
}

export function getTeacherUserFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherUser, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherUser$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherUser' from JSON`,
  );
}

/** @internal */
export const GetTeacherResponse$inboundSchema: z.ZodType<
  GetTeacherResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  user: z.lazy(() => GetTeacherUser$inboundSchema),
});

/** @internal */
export type GetTeacherResponse$Outbound = {
  user: GetTeacherUser$Outbound;
};

/** @internal */
export const GetTeacherResponse$outboundSchema: z.ZodType<
  GetTeacherResponse$Outbound,
  z.ZodTypeDef,
  GetTeacherResponse
> = z.object({
  user: z.lazy(() => GetTeacherUser$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetTeacherResponse$ {
  /** @deprecated use `GetTeacherResponse$inboundSchema` instead. */
  export const inboundSchema = GetTeacherResponse$inboundSchema;
  /** @deprecated use `GetTeacherResponse$outboundSchema` instead. */
  export const outboundSchema = GetTeacherResponse$outboundSchema;
  /** @deprecated use `GetTeacherResponse$Outbound` instead. */
  export type Outbound = GetTeacherResponse$Outbound;
}

export function getTeacherResponseToJSON(
  getTeacherResponse: GetTeacherResponse,
): string {
  return JSON.stringify(
    GetTeacherResponse$outboundSchema.parse(getTeacherResponse),
  );
}

export function getTeacherResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetTeacherResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetTeacherResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetTeacherResponse' from JSON`,
  );
}
