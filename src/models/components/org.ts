/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const OrgStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type OrgStatus = ClosedEnum<typeof OrgStatus>;

export const OrgType1 = {
  Department: "department",
  School: "school",
  District: "district",
  Local: "local",
  State: "state",
  National: "national",
} as const;
export type OrgType1 = ClosedEnum<typeof OrgType1>;

export type OrgParent = {
  href: string;
  sourcedId: string;
  type: string;
};

export type Child = {
  href: string;
  sourcedId: string;
  type: string;
};

/**
 * Represents an organization.
 */
export type Org = {
  sourcedId: string;
  status: OrgStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  name: string;
  type: OrgType1;
  identifier: string;
  parent: OrgParent | null;
  children: Array<Child>;
};

/** @internal */
export const OrgStatus$inboundSchema: z.ZodNativeEnum<typeof OrgStatus> = z
  .nativeEnum(OrgStatus);

/** @internal */
export const OrgStatus$outboundSchema: z.ZodNativeEnum<typeof OrgStatus> =
  OrgStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgStatus$ {
  /** @deprecated use `OrgStatus$inboundSchema` instead. */
  export const inboundSchema = OrgStatus$inboundSchema;
  /** @deprecated use `OrgStatus$outboundSchema` instead. */
  export const outboundSchema = OrgStatus$outboundSchema;
}

/** @internal */
export const OrgType1$inboundSchema: z.ZodNativeEnum<typeof OrgType1> = z
  .nativeEnum(OrgType1);

/** @internal */
export const OrgType1$outboundSchema: z.ZodNativeEnum<typeof OrgType1> =
  OrgType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgType1$ {
  /** @deprecated use `OrgType1$inboundSchema` instead. */
  export const inboundSchema = OrgType1$inboundSchema;
  /** @deprecated use `OrgType1$outboundSchema` instead. */
  export const outboundSchema = OrgType1$outboundSchema;
}

/** @internal */
export const OrgParent$inboundSchema: z.ZodType<
  OrgParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type OrgParent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const OrgParent$outboundSchema: z.ZodType<
  OrgParent$Outbound,
  z.ZodTypeDef,
  OrgParent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgParent$ {
  /** @deprecated use `OrgParent$inboundSchema` instead. */
  export const inboundSchema = OrgParent$inboundSchema;
  /** @deprecated use `OrgParent$outboundSchema` instead. */
  export const outboundSchema = OrgParent$outboundSchema;
  /** @deprecated use `OrgParent$Outbound` instead. */
  export type Outbound = OrgParent$Outbound;
}

export function orgParentToJSON(orgParent: OrgParent): string {
  return JSON.stringify(OrgParent$outboundSchema.parse(orgParent));
}

export function orgParentFromJSON(
  jsonString: string,
): SafeParseResult<OrgParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrgParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrgParent' from JSON`,
  );
}

/** @internal */
export const Child$inboundSchema: z.ZodType<Child, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    sourcedId: z.string(),
    type: z.string(),
  });

/** @internal */
export type Child$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const Child$outboundSchema: z.ZodType<
  Child$Outbound,
  z.ZodTypeDef,
  Child
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Child$ {
  /** @deprecated use `Child$inboundSchema` instead. */
  export const inboundSchema = Child$inboundSchema;
  /** @deprecated use `Child$outboundSchema` instead. */
  export const outboundSchema = Child$outboundSchema;
  /** @deprecated use `Child$Outbound` instead. */
  export type Outbound = Child$Outbound;
}

export function childToJSON(child: Child): string {
  return JSON.stringify(Child$outboundSchema.parse(child));
}

export function childFromJSON(
  jsonString: string,
): SafeParseResult<Child, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Child$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Child' from JSON`,
  );
}

/** @internal */
export const Org$inboundSchema: z.ZodType<Org, z.ZodTypeDef, unknown> = z
  .object({
    sourcedId: z.string(),
    status: OrgStatus$inboundSchema,
    dateLastModified: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    name: z.string(),
    type: OrgType1$inboundSchema,
    identifier: z.string(),
    parent: z.nullable(z.lazy(() => OrgParent$inboundSchema)),
    children: z.array(z.lazy(() => Child$inboundSchema)),
  });

/** @internal */
export type Org$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  name: string;
  type: string;
  identifier: string;
  parent: OrgParent$Outbound | null;
  children: Array<Child$Outbound>;
};

/** @internal */
export const Org$outboundSchema: z.ZodType<Org$Outbound, z.ZodTypeDef, Org> = z
  .object({
    sourcedId: z.string(),
    status: OrgStatus$outboundSchema,
    dateLastModified: z.date().transform(v => v.toISOString()).optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    name: z.string(),
    type: OrgType1$outboundSchema,
    identifier: z.string(),
    parent: z.nullable(z.lazy(() => OrgParent$outboundSchema)),
    children: z.array(z.lazy(() => Child$outboundSchema)),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Org$ {
  /** @deprecated use `Org$inboundSchema` instead. */
  export const inboundSchema = Org$inboundSchema;
  /** @deprecated use `Org$outboundSchema` instead. */
  export const outboundSchema = Org$outboundSchema;
  /** @deprecated use `Org$Outbound` instead. */
  export type Outbound = Org$Outbound;
}

export function orgToJSON(org: Org): string {
  return JSON.stringify(Org$outboundSchema.parse(org));
}

export function orgFromJSON(
  jsonString: string,
): SafeParseResult<Org, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Org$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Org' from JSON`,
  );
}
