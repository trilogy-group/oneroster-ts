/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const DemographicsStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type DemographicsStatus = ClosedEnum<typeof DemographicsStatus>;

export const Sex = {
  Male: "male",
  Female: "female",
  Other: "other",
  Unspecified: "unspecified",
} as const;
export type Sex = ClosedEnum<typeof Sex>;

/**
 * Represents a student's demographics information.
 */
export type Demographics = {
  sourcedId: string;
  status: DemographicsStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  birthDate: string | null;
  sex: Sex | null;
  americanIndianOrAlaskaNative: string | null;
  asian: string | null;
  blackOrAfricanAmerican: string | null;
  nativeHawaiianOrOtherPacificIslander: string | null;
  white: string | null;
  demographicRaceTwoOrMoreRaces: string | null;
  hispanicOrLatinoEthnicity: string | null;
  countryOfBirthCode: string | null;
  stateOfBirthAbbreviation: string | null;
  cityOfBirth: string | null;
  publicSchoolResidenceStatus: string | null;
};

/** @internal */
export const DemographicsStatus$inboundSchema: z.ZodNativeEnum<
  typeof DemographicsStatus
> = z.nativeEnum(DemographicsStatus);

/** @internal */
export const DemographicsStatus$outboundSchema: z.ZodNativeEnum<
  typeof DemographicsStatus
> = DemographicsStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DemographicsStatus$ {
  /** @deprecated use `DemographicsStatus$inboundSchema` instead. */
  export const inboundSchema = DemographicsStatus$inboundSchema;
  /** @deprecated use `DemographicsStatus$outboundSchema` instead. */
  export const outboundSchema = DemographicsStatus$outboundSchema;
}

/** @internal */
export const Sex$inboundSchema: z.ZodNativeEnum<typeof Sex> = z.nativeEnum(Sex);

/** @internal */
export const Sex$outboundSchema: z.ZodNativeEnum<typeof Sex> =
  Sex$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Sex$ {
  /** @deprecated use `Sex$inboundSchema` instead. */
  export const inboundSchema = Sex$inboundSchema;
  /** @deprecated use `Sex$outboundSchema` instead. */
  export const outboundSchema = Sex$outboundSchema;
}

/** @internal */
export const Demographics$inboundSchema: z.ZodType<
  Demographics,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: DemographicsStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  birthDate: z.nullable(z.string()),
  sex: z.nullable(Sex$inboundSchema),
  americanIndianOrAlaskaNative: z.nullable(z.string()),
  asian: z.nullable(z.string()),
  blackOrAfricanAmerican: z.nullable(z.string()),
  nativeHawaiianOrOtherPacificIslander: z.nullable(z.string()),
  white: z.nullable(z.string()),
  demographicRaceTwoOrMoreRaces: z.nullable(z.string()),
  hispanicOrLatinoEthnicity: z.nullable(z.string()),
  countryOfBirthCode: z.nullable(z.string()),
  stateOfBirthAbbreviation: z.nullable(z.string()),
  cityOfBirth: z.nullable(z.string()),
  publicSchoolResidenceStatus: z.nullable(z.string()),
});

/** @internal */
export type Demographics$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  birthDate: string | null;
  sex: string | null;
  americanIndianOrAlaskaNative: string | null;
  asian: string | null;
  blackOrAfricanAmerican: string | null;
  nativeHawaiianOrOtherPacificIslander: string | null;
  white: string | null;
  demographicRaceTwoOrMoreRaces: string | null;
  hispanicOrLatinoEthnicity: string | null;
  countryOfBirthCode: string | null;
  stateOfBirthAbbreviation: string | null;
  cityOfBirth: string | null;
  publicSchoolResidenceStatus: string | null;
};

/** @internal */
export const Demographics$outboundSchema: z.ZodType<
  Demographics$Outbound,
  z.ZodTypeDef,
  Demographics
> = z.object({
  sourcedId: z.string(),
  status: DemographicsStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  birthDate: z.nullable(z.string()),
  sex: z.nullable(Sex$outboundSchema),
  americanIndianOrAlaskaNative: z.nullable(z.string()),
  asian: z.nullable(z.string()),
  blackOrAfricanAmerican: z.nullable(z.string()),
  nativeHawaiianOrOtherPacificIslander: z.nullable(z.string()),
  white: z.nullable(z.string()),
  demographicRaceTwoOrMoreRaces: z.nullable(z.string()),
  hispanicOrLatinoEthnicity: z.nullable(z.string()),
  countryOfBirthCode: z.nullable(z.string()),
  stateOfBirthAbbreviation: z.nullable(z.string()),
  cityOfBirth: z.nullable(z.string()),
  publicSchoolResidenceStatus: z.nullable(z.string()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Demographics$ {
  /** @deprecated use `Demographics$inboundSchema` instead. */
  export const inboundSchema = Demographics$inboundSchema;
  /** @deprecated use `Demographics$outboundSchema` instead. */
  export const outboundSchema = Demographics$outboundSchema;
  /** @deprecated use `Demographics$Outbound` instead. */
  export type Outbound = Demographics$Outbound;
}

export function demographicsToJSON(demographics: Demographics): string {
  return JSON.stringify(Demographics$outboundSchema.parse(demographics));
}

export function demographicsFromJSON(
  jsonString: string,
): SafeParseResult<Demographics, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Demographics$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Demographics' from JSON`,
  );
}
