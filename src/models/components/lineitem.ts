/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const LineItemStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type LineItemStatus = ClosedEnum<typeof LineItemStatus>;

export type LineItemClass = {
  sourcedId: string;
};

export type LineItemSchool = {
  sourcedId: string;
};

export type LineItemCategory = {
  sourcedId: string;
};

export type GradingPeriod = {
  sourcedId: string;
};

export type LineItemAcademicSession = {
  sourcedId: string;
};

export type LineItemScoreScale = {
  sourcedId: string;
};

export type LineItemLearningObjectiveId = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type LineItemLearningObjectiveSet = {
  source: string;
  learningObjectiveIds: Array<LineItemLearningObjectiveId>;
};

/**
 * Represents a line item.
 */
export type LineItem = {
  sourcedId?: string | undefined;
  status: LineItemStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  description?: string | null | undefined;
  assignDate: Date;
  dueDate: Date;
  class: LineItemClass;
  school: LineItemSchool;
  category: LineItemCategory;
  gradingPeriod?: GradingPeriod | null | undefined;
  academicSession?: LineItemAcademicSession | null | undefined;
  scoreScale?: LineItemScoreScale | null | undefined;
  resultValueMin?: number | null | undefined;
  resultValueMax?: number | null | undefined;
  learningObjectiveSet?: Array<LineItemLearningObjectiveSet> | null | undefined;
};

/** @internal */
export const LineItemStatus$inboundSchema: z.ZodNativeEnum<
  typeof LineItemStatus
> = z.nativeEnum(LineItemStatus);

/** @internal */
export const LineItemStatus$outboundSchema: z.ZodNativeEnum<
  typeof LineItemStatus
> = LineItemStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemStatus$ {
  /** @deprecated use `LineItemStatus$inboundSchema` instead. */
  export const inboundSchema = LineItemStatus$inboundSchema;
  /** @deprecated use `LineItemStatus$outboundSchema` instead. */
  export const outboundSchema = LineItemStatus$outboundSchema;
}

/** @internal */
export const LineItemClass$inboundSchema: z.ZodType<
  LineItemClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type LineItemClass$Outbound = {
  sourcedId: string;
};

/** @internal */
export const LineItemClass$outboundSchema: z.ZodType<
  LineItemClass$Outbound,
  z.ZodTypeDef,
  LineItemClass
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemClass$ {
  /** @deprecated use `LineItemClass$inboundSchema` instead. */
  export const inboundSchema = LineItemClass$inboundSchema;
  /** @deprecated use `LineItemClass$outboundSchema` instead. */
  export const outboundSchema = LineItemClass$outboundSchema;
  /** @deprecated use `LineItemClass$Outbound` instead. */
  export type Outbound = LineItemClass$Outbound;
}

export function lineItemClassToJSON(lineItemClass: LineItemClass): string {
  return JSON.stringify(LineItemClass$outboundSchema.parse(lineItemClass));
}

export function lineItemClassFromJSON(
  jsonString: string,
): SafeParseResult<LineItemClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemClass' from JSON`,
  );
}

/** @internal */
export const LineItemSchool$inboundSchema: z.ZodType<
  LineItemSchool,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type LineItemSchool$Outbound = {
  sourcedId: string;
};

/** @internal */
export const LineItemSchool$outboundSchema: z.ZodType<
  LineItemSchool$Outbound,
  z.ZodTypeDef,
  LineItemSchool
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemSchool$ {
  /** @deprecated use `LineItemSchool$inboundSchema` instead. */
  export const inboundSchema = LineItemSchool$inboundSchema;
  /** @deprecated use `LineItemSchool$outboundSchema` instead. */
  export const outboundSchema = LineItemSchool$outboundSchema;
  /** @deprecated use `LineItemSchool$Outbound` instead. */
  export type Outbound = LineItemSchool$Outbound;
}

export function lineItemSchoolToJSON(lineItemSchool: LineItemSchool): string {
  return JSON.stringify(LineItemSchool$outboundSchema.parse(lineItemSchool));
}

export function lineItemSchoolFromJSON(
  jsonString: string,
): SafeParseResult<LineItemSchool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemSchool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemSchool' from JSON`,
  );
}

/** @internal */
export const LineItemCategory$inboundSchema: z.ZodType<
  LineItemCategory,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type LineItemCategory$Outbound = {
  sourcedId: string;
};

/** @internal */
export const LineItemCategory$outboundSchema: z.ZodType<
  LineItemCategory$Outbound,
  z.ZodTypeDef,
  LineItemCategory
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemCategory$ {
  /** @deprecated use `LineItemCategory$inboundSchema` instead. */
  export const inboundSchema = LineItemCategory$inboundSchema;
  /** @deprecated use `LineItemCategory$outboundSchema` instead. */
  export const outboundSchema = LineItemCategory$outboundSchema;
  /** @deprecated use `LineItemCategory$Outbound` instead. */
  export type Outbound = LineItemCategory$Outbound;
}

export function lineItemCategoryToJSON(
  lineItemCategory: LineItemCategory,
): string {
  return JSON.stringify(
    LineItemCategory$outboundSchema.parse(lineItemCategory),
  );
}

export function lineItemCategoryFromJSON(
  jsonString: string,
): SafeParseResult<LineItemCategory, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemCategory$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemCategory' from JSON`,
  );
}

/** @internal */
export const GradingPeriod$inboundSchema: z.ZodType<
  GradingPeriod,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type GradingPeriod$Outbound = {
  sourcedId: string;
};

/** @internal */
export const GradingPeriod$outboundSchema: z.ZodType<
  GradingPeriod$Outbound,
  z.ZodTypeDef,
  GradingPeriod
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GradingPeriod$ {
  /** @deprecated use `GradingPeriod$inboundSchema` instead. */
  export const inboundSchema = GradingPeriod$inboundSchema;
  /** @deprecated use `GradingPeriod$outboundSchema` instead. */
  export const outboundSchema = GradingPeriod$outboundSchema;
  /** @deprecated use `GradingPeriod$Outbound` instead. */
  export type Outbound = GradingPeriod$Outbound;
}

export function gradingPeriodToJSON(gradingPeriod: GradingPeriod): string {
  return JSON.stringify(GradingPeriod$outboundSchema.parse(gradingPeriod));
}

export function gradingPeriodFromJSON(
  jsonString: string,
): SafeParseResult<GradingPeriod, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GradingPeriod$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GradingPeriod' from JSON`,
  );
}

/** @internal */
export const LineItemAcademicSession$inboundSchema: z.ZodType<
  LineItemAcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type LineItemAcademicSession$Outbound = {
  sourcedId: string;
};

/** @internal */
export const LineItemAcademicSession$outboundSchema: z.ZodType<
  LineItemAcademicSession$Outbound,
  z.ZodTypeDef,
  LineItemAcademicSession
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemAcademicSession$ {
  /** @deprecated use `LineItemAcademicSession$inboundSchema` instead. */
  export const inboundSchema = LineItemAcademicSession$inboundSchema;
  /** @deprecated use `LineItemAcademicSession$outboundSchema` instead. */
  export const outboundSchema = LineItemAcademicSession$outboundSchema;
  /** @deprecated use `LineItemAcademicSession$Outbound` instead. */
  export type Outbound = LineItemAcademicSession$Outbound;
}

export function lineItemAcademicSessionToJSON(
  lineItemAcademicSession: LineItemAcademicSession,
): string {
  return JSON.stringify(
    LineItemAcademicSession$outboundSchema.parse(lineItemAcademicSession),
  );
}

export function lineItemAcademicSessionFromJSON(
  jsonString: string,
): SafeParseResult<LineItemAcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemAcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemAcademicSession' from JSON`,
  );
}

/** @internal */
export const LineItemScoreScale$inboundSchema: z.ZodType<
  LineItemScoreScale,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type LineItemScoreScale$Outbound = {
  sourcedId: string;
};

/** @internal */
export const LineItemScoreScale$outboundSchema: z.ZodType<
  LineItemScoreScale$Outbound,
  z.ZodTypeDef,
  LineItemScoreScale
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemScoreScale$ {
  /** @deprecated use `LineItemScoreScale$inboundSchema` instead. */
  export const inboundSchema = LineItemScoreScale$inboundSchema;
  /** @deprecated use `LineItemScoreScale$outboundSchema` instead. */
  export const outboundSchema = LineItemScoreScale$outboundSchema;
  /** @deprecated use `LineItemScoreScale$Outbound` instead. */
  export type Outbound = LineItemScoreScale$Outbound;
}

export function lineItemScoreScaleToJSON(
  lineItemScoreScale: LineItemScoreScale,
): string {
  return JSON.stringify(
    LineItemScoreScale$outboundSchema.parse(lineItemScoreScale),
  );
}

export function lineItemScoreScaleFromJSON(
  jsonString: string,
): SafeParseResult<LineItemScoreScale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemScoreScale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemScoreScale' from JSON`,
  );
}

/** @internal */
export const LineItemLearningObjectiveId$inboundSchema: z.ZodType<
  LineItemLearningObjectiveId,
  z.ZodTypeDef,
  unknown
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/** @internal */
export type LineItemLearningObjectiveId$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const LineItemLearningObjectiveId$outboundSchema: z.ZodType<
  LineItemLearningObjectiveId$Outbound,
  z.ZodTypeDef,
  LineItemLearningObjectiveId
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemLearningObjectiveId$ {
  /** @deprecated use `LineItemLearningObjectiveId$inboundSchema` instead. */
  export const inboundSchema = LineItemLearningObjectiveId$inboundSchema;
  /** @deprecated use `LineItemLearningObjectiveId$outboundSchema` instead. */
  export const outboundSchema = LineItemLearningObjectiveId$outboundSchema;
  /** @deprecated use `LineItemLearningObjectiveId$Outbound` instead. */
  export type Outbound = LineItemLearningObjectiveId$Outbound;
}

export function lineItemLearningObjectiveIdToJSON(
  lineItemLearningObjectiveId: LineItemLearningObjectiveId,
): string {
  return JSON.stringify(
    LineItemLearningObjectiveId$outboundSchema.parse(
      lineItemLearningObjectiveId,
    ),
  );
}

export function lineItemLearningObjectiveIdFromJSON(
  jsonString: string,
): SafeParseResult<LineItemLearningObjectiveId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemLearningObjectiveId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemLearningObjectiveId' from JSON`,
  );
}

/** @internal */
export const LineItemLearningObjectiveSet$inboundSchema: z.ZodType<
  LineItemLearningObjectiveSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => LineItemLearningObjectiveId$inboundSchema),
  ),
});

/** @internal */
export type LineItemLearningObjectiveSet$Outbound = {
  source: string;
  learningObjectiveIds: Array<LineItemLearningObjectiveId$Outbound>;
};

/** @internal */
export const LineItemLearningObjectiveSet$outboundSchema: z.ZodType<
  LineItemLearningObjectiveSet$Outbound,
  z.ZodTypeDef,
  LineItemLearningObjectiveSet
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => LineItemLearningObjectiveId$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItemLearningObjectiveSet$ {
  /** @deprecated use `LineItemLearningObjectiveSet$inboundSchema` instead. */
  export const inboundSchema = LineItemLearningObjectiveSet$inboundSchema;
  /** @deprecated use `LineItemLearningObjectiveSet$outboundSchema` instead. */
  export const outboundSchema = LineItemLearningObjectiveSet$outboundSchema;
  /** @deprecated use `LineItemLearningObjectiveSet$Outbound` instead. */
  export type Outbound = LineItemLearningObjectiveSet$Outbound;
}

export function lineItemLearningObjectiveSetToJSON(
  lineItemLearningObjectiveSet: LineItemLearningObjectiveSet,
): string {
  return JSON.stringify(
    LineItemLearningObjectiveSet$outboundSchema.parse(
      lineItemLearningObjectiveSet,
    ),
  );
}

export function lineItemLearningObjectiveSetFromJSON(
  jsonString: string,
): SafeParseResult<LineItemLearningObjectiveSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItemLearningObjectiveSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItemLearningObjectiveSet' from JSON`,
  );
}

/** @internal */
export const LineItem$inboundSchema: z.ZodType<
  LineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string().optional(),
  status: LineItemStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  description: z.nullable(z.string()).optional(),
  assignDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  dueDate: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  class: z.lazy(() => LineItemClass$inboundSchema),
  school: z.lazy(() => LineItemSchool$inboundSchema),
  category: z.lazy(() => LineItemCategory$inboundSchema),
  gradingPeriod: z.nullable(z.lazy(() => GradingPeriod$inboundSchema))
    .optional(),
  academicSession: z.nullable(
    z.lazy(() => LineItemAcademicSession$inboundSchema),
  ).optional(),
  scoreScale: z.nullable(z.lazy(() => LineItemScoreScale$inboundSchema))
    .optional(),
  resultValueMin: z.nullable(z.number()).optional(),
  resultValueMax: z.nullable(z.number()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => LineItemLearningObjectiveSet$inboundSchema)),
  ).optional(),
});

/** @internal */
export type LineItem$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  description?: string | null | undefined;
  assignDate: string;
  dueDate: string;
  class: LineItemClass$Outbound;
  school: LineItemSchool$Outbound;
  category: LineItemCategory$Outbound;
  gradingPeriod?: GradingPeriod$Outbound | null | undefined;
  academicSession?: LineItemAcademicSession$Outbound | null | undefined;
  scoreScale?: LineItemScoreScale$Outbound | null | undefined;
  resultValueMin?: number | null | undefined;
  resultValueMax?: number | null | undefined;
  learningObjectiveSet?:
    | Array<LineItemLearningObjectiveSet$Outbound>
    | null
    | undefined;
};

/** @internal */
export const LineItem$outboundSchema: z.ZodType<
  LineItem$Outbound,
  z.ZodTypeDef,
  LineItem
> = z.object({
  sourcedId: z.string().optional(),
  status: LineItemStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  description: z.nullable(z.string()).optional(),
  assignDate: z.date().transform(v => v.toISOString()),
  dueDate: z.date().transform(v => v.toISOString()),
  class: z.lazy(() => LineItemClass$outboundSchema),
  school: z.lazy(() => LineItemSchool$outboundSchema),
  category: z.lazy(() => LineItemCategory$outboundSchema),
  gradingPeriod: z.nullable(z.lazy(() => GradingPeriod$outboundSchema))
    .optional(),
  academicSession: z.nullable(
    z.lazy(() => LineItemAcademicSession$outboundSchema),
  ).optional(),
  scoreScale: z.nullable(z.lazy(() => LineItemScoreScale$outboundSchema))
    .optional(),
  resultValueMin: z.nullable(z.number()).optional(),
  resultValueMax: z.nullable(z.number()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => LineItemLearningObjectiveSet$outboundSchema)),
  ).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LineItem$ {
  /** @deprecated use `LineItem$inboundSchema` instead. */
  export const inboundSchema = LineItem$inboundSchema;
  /** @deprecated use `LineItem$outboundSchema` instead. */
  export const outboundSchema = LineItem$outboundSchema;
  /** @deprecated use `LineItem$Outbound` instead. */
  export type Outbound = LineItem$Outbound;
}

export function lineItemToJSON(lineItem: LineItem): string {
  return JSON.stringify(LineItem$outboundSchema.parse(lineItem));
}

export function lineItemFromJSON(
  jsonString: string,
): SafeParseResult<LineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LineItem' from JSON`,
  );
}
