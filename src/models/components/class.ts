/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ClassStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type ClassStatus = ClosedEnum<typeof ClassStatus>;

export const ClassType = {
  Homeroom: "homeroom",
  Scheduled: "scheduled",
} as const;
export type ClassType = ClosedEnum<typeof ClassType>;

export type ClassCourse = {
  href: string;
  sourcedId: string;
  type: string;
};

export type ClassSchool = {
  href: string;
  sourcedId: string;
  type: string;
};

export type Term = {
  href: string;
  sourcedId: string;
  type: string;
};

export type ClassResource = {
  href: string;
  sourcedId: string;
  type: string;
};

/**
 * Represents a class.
 */
export type Class = {
  sourcedId: string;
  status: ClassStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  classCode: string | null;
  classType: ClassType;
  location: string | null;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  course: ClassCourse | null;
  school: ClassSchool | null;
  terms: Array<Term>;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<ClassResource> | undefined;
};

/** @internal */
export const ClassStatus$inboundSchema: z.ZodNativeEnum<typeof ClassStatus> = z
  .nativeEnum(ClassStatus);

/** @internal */
export const ClassStatus$outboundSchema: z.ZodNativeEnum<typeof ClassStatus> =
  ClassStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassStatus$ {
  /** @deprecated use `ClassStatus$inboundSchema` instead. */
  export const inboundSchema = ClassStatus$inboundSchema;
  /** @deprecated use `ClassStatus$outboundSchema` instead. */
  export const outboundSchema = ClassStatus$outboundSchema;
}

/** @internal */
export const ClassType$inboundSchema: z.ZodNativeEnum<typeof ClassType> = z
  .nativeEnum(ClassType);

/** @internal */
export const ClassType$outboundSchema: z.ZodNativeEnum<typeof ClassType> =
  ClassType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassType$ {
  /** @deprecated use `ClassType$inboundSchema` instead. */
  export const inboundSchema = ClassType$inboundSchema;
  /** @deprecated use `ClassType$outboundSchema` instead. */
  export const outboundSchema = ClassType$outboundSchema;
}

/** @internal */
export const ClassCourse$inboundSchema: z.ZodType<
  ClassCourse,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type ClassCourse$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const ClassCourse$outboundSchema: z.ZodType<
  ClassCourse$Outbound,
  z.ZodTypeDef,
  ClassCourse
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassCourse$ {
  /** @deprecated use `ClassCourse$inboundSchema` instead. */
  export const inboundSchema = ClassCourse$inboundSchema;
  /** @deprecated use `ClassCourse$outboundSchema` instead. */
  export const outboundSchema = ClassCourse$outboundSchema;
  /** @deprecated use `ClassCourse$Outbound` instead. */
  export type Outbound = ClassCourse$Outbound;
}

export function classCourseToJSON(classCourse: ClassCourse): string {
  return JSON.stringify(ClassCourse$outboundSchema.parse(classCourse));
}

export function classCourseFromJSON(
  jsonString: string,
): SafeParseResult<ClassCourse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClassCourse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClassCourse' from JSON`,
  );
}

/** @internal */
export const ClassSchool$inboundSchema: z.ZodType<
  ClassSchool,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type ClassSchool$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const ClassSchool$outboundSchema: z.ZodType<
  ClassSchool$Outbound,
  z.ZodTypeDef,
  ClassSchool
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassSchool$ {
  /** @deprecated use `ClassSchool$inboundSchema` instead. */
  export const inboundSchema = ClassSchool$inboundSchema;
  /** @deprecated use `ClassSchool$outboundSchema` instead. */
  export const outboundSchema = ClassSchool$outboundSchema;
  /** @deprecated use `ClassSchool$Outbound` instead. */
  export type Outbound = ClassSchool$Outbound;
}

export function classSchoolToJSON(classSchool: ClassSchool): string {
  return JSON.stringify(ClassSchool$outboundSchema.parse(classSchool));
}

export function classSchoolFromJSON(
  jsonString: string,
): SafeParseResult<ClassSchool, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClassSchool$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClassSchool' from JSON`,
  );
}

/** @internal */
export const Term$inboundSchema: z.ZodType<Term, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    sourcedId: z.string(),
    type: z.string(),
  });

/** @internal */
export type Term$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const Term$outboundSchema: z.ZodType<Term$Outbound, z.ZodTypeDef, Term> =
  z.object({
    href: z.string(),
    sourcedId: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Term$ {
  /** @deprecated use `Term$inboundSchema` instead. */
  export const inboundSchema = Term$inboundSchema;
  /** @deprecated use `Term$outboundSchema` instead. */
  export const outboundSchema = Term$outboundSchema;
  /** @deprecated use `Term$Outbound` instead. */
  export type Outbound = Term$Outbound;
}

export function termToJSON(term: Term): string {
  return JSON.stringify(Term$outboundSchema.parse(term));
}

export function termFromJSON(
  jsonString: string,
): SafeParseResult<Term, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Term$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Term' from JSON`,
  );
}

/** @internal */
export const ClassResource$inboundSchema: z.ZodType<
  ClassResource,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type ClassResource$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const ClassResource$outboundSchema: z.ZodType<
  ClassResource$Outbound,
  z.ZodTypeDef,
  ClassResource
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClassResource$ {
  /** @deprecated use `ClassResource$inboundSchema` instead. */
  export const inboundSchema = ClassResource$inboundSchema;
  /** @deprecated use `ClassResource$outboundSchema` instead. */
  export const outboundSchema = ClassResource$outboundSchema;
  /** @deprecated use `ClassResource$Outbound` instead. */
  export type Outbound = ClassResource$Outbound;
}

export function classResourceToJSON(classResource: ClassResource): string {
  return JSON.stringify(ClassResource$outboundSchema.parse(classResource));
}

export function classResourceFromJSON(
  jsonString: string,
): SafeParseResult<ClassResource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClassResource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClassResource' from JSON`,
  );
}

/** @internal */
export const Class$inboundSchema: z.ZodType<Class, z.ZodTypeDef, unknown> = z
  .object({
    sourcedId: z.string(),
    status: ClassStatus$inboundSchema,
    dateLastModified: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    title: z.string(),
    classCode: z.nullable(z.string()),
    classType: ClassType$inboundSchema,
    location: z.nullable(z.string()),
    grades: z.array(z.string()).optional(),
    subjects: z.array(z.string()).optional(),
    course: z.nullable(z.lazy(() => ClassCourse$inboundSchema)),
    school: z.nullable(z.lazy(() => ClassSchool$inboundSchema)),
    terms: z.array(z.lazy(() => Term$inboundSchema)),
    subjectCodes: z.array(z.string()).optional(),
    periods: z.array(z.string()).optional(),
    resources: z.array(z.lazy(() => ClassResource$inboundSchema)).optional(),
  });

/** @internal */
export type Class$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  classCode: string | null;
  classType: string;
  location: string | null;
  grades?: Array<string> | undefined;
  subjects?: Array<string> | undefined;
  course: ClassCourse$Outbound | null;
  school: ClassSchool$Outbound | null;
  terms: Array<Term$Outbound>;
  subjectCodes?: Array<string> | undefined;
  periods?: Array<string> | undefined;
  resources?: Array<ClassResource$Outbound> | undefined;
};

/** @internal */
export const Class$outboundSchema: z.ZodType<
  Class$Outbound,
  z.ZodTypeDef,
  Class
> = z.object({
  sourcedId: z.string(),
  status: ClassStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  classCode: z.nullable(z.string()),
  classType: ClassType$outboundSchema,
  location: z.nullable(z.string()),
  grades: z.array(z.string()).optional(),
  subjects: z.array(z.string()).optional(),
  course: z.nullable(z.lazy(() => ClassCourse$outboundSchema)),
  school: z.nullable(z.lazy(() => ClassSchool$outboundSchema)),
  terms: z.array(z.lazy(() => Term$outboundSchema)),
  subjectCodes: z.array(z.string()).optional(),
  periods: z.array(z.string()).optional(),
  resources: z.array(z.lazy(() => ClassResource$outboundSchema)).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Class$ {
  /** @deprecated use `Class$inboundSchema` instead. */
  export const inboundSchema = Class$inboundSchema;
  /** @deprecated use `Class$outboundSchema` instead. */
  export const outboundSchema = Class$outboundSchema;
  /** @deprecated use `Class$Outbound` instead. */
  export type Outbound = Class$Outbound;
}

export function classToJSON(value: Class): string {
  return JSON.stringify(Class$outboundSchema.parse(value));
}

export function classFromJSON(
  jsonString: string,
): SafeParseResult<Class, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Class$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Class' from JSON`,
  );
}
