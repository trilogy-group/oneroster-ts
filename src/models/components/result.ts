/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const ResultStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type ResultStatus = ClosedEnum<typeof ResultStatus>;

export type ResultLineItem = {
  sourcedId: string;
};

export type ResultStudent = {
  sourcedId: string;
};

export type ResultClass = {
  sourcedId: string;
};

export type ResultScoreScale = {
  sourcedId: string;
};

export const ResultScoreStatus = {
  Exempt: "exempt",
  FullyGraded: "fully graded",
  NotSubmitted: "not submitted",
  PartiallyGraded: "partially graded",
  Submitted: "submitted",
} as const;
export type ResultScoreStatus = ClosedEnum<typeof ResultScoreStatus>;

export type ResultLearningObjectiveId = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

export type ResultLearningObjectiveSet = {
  source: string;
  learningObjectiveIds: Array<ResultLearningObjectiveId>;
};

/**
 * Represents a result.
 */
export type Result = {
  sourcedId?: string | undefined;
  status: ResultStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  lineItem: ResultLineItem;
  student: ResultStudent;
  class?: ResultClass | null | undefined;
  scoreScale?: ResultScoreScale | null | undefined;
  scoreStatus: ResultScoreStatus;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: Date;
  comment?: string | null | undefined;
  learningObjectiveSet?: Array<ResultLearningObjectiveSet> | null | undefined;
  inProgress?: string | undefined;
  incomplete?: string | undefined;
  late?: string | undefined;
  missing?: string | undefined;
};

/** @internal */
export const ResultStatus$inboundSchema: z.ZodNativeEnum<typeof ResultStatus> =
  z.nativeEnum(ResultStatus);

/** @internal */
export const ResultStatus$outboundSchema: z.ZodNativeEnum<typeof ResultStatus> =
  ResultStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultStatus$ {
  /** @deprecated use `ResultStatus$inboundSchema` instead. */
  export const inboundSchema = ResultStatus$inboundSchema;
  /** @deprecated use `ResultStatus$outboundSchema` instead. */
  export const outboundSchema = ResultStatus$outboundSchema;
}

/** @internal */
export const ResultLineItem$inboundSchema: z.ZodType<
  ResultLineItem,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ResultLineItem$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ResultLineItem$outboundSchema: z.ZodType<
  ResultLineItem$Outbound,
  z.ZodTypeDef,
  ResultLineItem
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultLineItem$ {
  /** @deprecated use `ResultLineItem$inboundSchema` instead. */
  export const inboundSchema = ResultLineItem$inboundSchema;
  /** @deprecated use `ResultLineItem$outboundSchema` instead. */
  export const outboundSchema = ResultLineItem$outboundSchema;
  /** @deprecated use `ResultLineItem$Outbound` instead. */
  export type Outbound = ResultLineItem$Outbound;
}

export function resultLineItemToJSON(resultLineItem: ResultLineItem): string {
  return JSON.stringify(ResultLineItem$outboundSchema.parse(resultLineItem));
}

export function resultLineItemFromJSON(
  jsonString: string,
): SafeParseResult<ResultLineItem, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultLineItem$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultLineItem' from JSON`,
  );
}

/** @internal */
export const ResultStudent$inboundSchema: z.ZodType<
  ResultStudent,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ResultStudent$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ResultStudent$outboundSchema: z.ZodType<
  ResultStudent$Outbound,
  z.ZodTypeDef,
  ResultStudent
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultStudent$ {
  /** @deprecated use `ResultStudent$inboundSchema` instead. */
  export const inboundSchema = ResultStudent$inboundSchema;
  /** @deprecated use `ResultStudent$outboundSchema` instead. */
  export const outboundSchema = ResultStudent$outboundSchema;
  /** @deprecated use `ResultStudent$Outbound` instead. */
  export type Outbound = ResultStudent$Outbound;
}

export function resultStudentToJSON(resultStudent: ResultStudent): string {
  return JSON.stringify(ResultStudent$outboundSchema.parse(resultStudent));
}

export function resultStudentFromJSON(
  jsonString: string,
): SafeParseResult<ResultStudent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultStudent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultStudent' from JSON`,
  );
}

/** @internal */
export const ResultClass$inboundSchema: z.ZodType<
  ResultClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ResultClass$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ResultClass$outboundSchema: z.ZodType<
  ResultClass$Outbound,
  z.ZodTypeDef,
  ResultClass
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultClass$ {
  /** @deprecated use `ResultClass$inboundSchema` instead. */
  export const inboundSchema = ResultClass$inboundSchema;
  /** @deprecated use `ResultClass$outboundSchema` instead. */
  export const outboundSchema = ResultClass$outboundSchema;
  /** @deprecated use `ResultClass$Outbound` instead. */
  export type Outbound = ResultClass$Outbound;
}

export function resultClassToJSON(resultClass: ResultClass): string {
  return JSON.stringify(ResultClass$outboundSchema.parse(resultClass));
}

export function resultClassFromJSON(
  jsonString: string,
): SafeParseResult<ResultClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultClass' from JSON`,
  );
}

/** @internal */
export const ResultScoreScale$inboundSchema: z.ZodType<
  ResultScoreScale,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
});

/** @internal */
export type ResultScoreScale$Outbound = {
  sourcedId: string;
};

/** @internal */
export const ResultScoreScale$outboundSchema: z.ZodType<
  ResultScoreScale$Outbound,
  z.ZodTypeDef,
  ResultScoreScale
> = z.object({
  sourcedId: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultScoreScale$ {
  /** @deprecated use `ResultScoreScale$inboundSchema` instead. */
  export const inboundSchema = ResultScoreScale$inboundSchema;
  /** @deprecated use `ResultScoreScale$outboundSchema` instead. */
  export const outboundSchema = ResultScoreScale$outboundSchema;
  /** @deprecated use `ResultScoreScale$Outbound` instead. */
  export type Outbound = ResultScoreScale$Outbound;
}

export function resultScoreScaleToJSON(
  resultScoreScale: ResultScoreScale,
): string {
  return JSON.stringify(
    ResultScoreScale$outboundSchema.parse(resultScoreScale),
  );
}

export function resultScoreScaleFromJSON(
  jsonString: string,
): SafeParseResult<ResultScoreScale, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultScoreScale$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultScoreScale' from JSON`,
  );
}

/** @internal */
export const ResultScoreStatus$inboundSchema: z.ZodNativeEnum<
  typeof ResultScoreStatus
> = z.nativeEnum(ResultScoreStatus);

/** @internal */
export const ResultScoreStatus$outboundSchema: z.ZodNativeEnum<
  typeof ResultScoreStatus
> = ResultScoreStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultScoreStatus$ {
  /** @deprecated use `ResultScoreStatus$inboundSchema` instead. */
  export const inboundSchema = ResultScoreStatus$inboundSchema;
  /** @deprecated use `ResultScoreStatus$outboundSchema` instead. */
  export const outboundSchema = ResultScoreStatus$outboundSchema;
}

/** @internal */
export const ResultLearningObjectiveId$inboundSchema: z.ZodType<
  ResultLearningObjectiveId,
  z.ZodTypeDef,
  unknown
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/** @internal */
export type ResultLearningObjectiveId$Outbound = {
  learningObjectiveId: string;
  score?: number | undefined;
  textScore?: string | undefined;
};

/** @internal */
export const ResultLearningObjectiveId$outboundSchema: z.ZodType<
  ResultLearningObjectiveId$Outbound,
  z.ZodTypeDef,
  ResultLearningObjectiveId
> = z.object({
  learningObjectiveId: z.string(),
  score: z.number().optional(),
  textScore: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultLearningObjectiveId$ {
  /** @deprecated use `ResultLearningObjectiveId$inboundSchema` instead. */
  export const inboundSchema = ResultLearningObjectiveId$inboundSchema;
  /** @deprecated use `ResultLearningObjectiveId$outboundSchema` instead. */
  export const outboundSchema = ResultLearningObjectiveId$outboundSchema;
  /** @deprecated use `ResultLearningObjectiveId$Outbound` instead. */
  export type Outbound = ResultLearningObjectiveId$Outbound;
}

export function resultLearningObjectiveIdToJSON(
  resultLearningObjectiveId: ResultLearningObjectiveId,
): string {
  return JSON.stringify(
    ResultLearningObjectiveId$outboundSchema.parse(resultLearningObjectiveId),
  );
}

export function resultLearningObjectiveIdFromJSON(
  jsonString: string,
): SafeParseResult<ResultLearningObjectiveId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultLearningObjectiveId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultLearningObjectiveId' from JSON`,
  );
}

/** @internal */
export const ResultLearningObjectiveSet$inboundSchema: z.ZodType<
  ResultLearningObjectiveSet,
  z.ZodTypeDef,
  unknown
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => ResultLearningObjectiveId$inboundSchema),
  ),
});

/** @internal */
export type ResultLearningObjectiveSet$Outbound = {
  source: string;
  learningObjectiveIds: Array<ResultLearningObjectiveId$Outbound>;
};

/** @internal */
export const ResultLearningObjectiveSet$outboundSchema: z.ZodType<
  ResultLearningObjectiveSet$Outbound,
  z.ZodTypeDef,
  ResultLearningObjectiveSet
> = z.object({
  source: z.string(),
  learningObjectiveIds: z.array(
    z.lazy(() => ResultLearningObjectiveId$outboundSchema),
  ),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ResultLearningObjectiveSet$ {
  /** @deprecated use `ResultLearningObjectiveSet$inboundSchema` instead. */
  export const inboundSchema = ResultLearningObjectiveSet$inboundSchema;
  /** @deprecated use `ResultLearningObjectiveSet$outboundSchema` instead. */
  export const outboundSchema = ResultLearningObjectiveSet$outboundSchema;
  /** @deprecated use `ResultLearningObjectiveSet$Outbound` instead. */
  export type Outbound = ResultLearningObjectiveSet$Outbound;
}

export function resultLearningObjectiveSetToJSON(
  resultLearningObjectiveSet: ResultLearningObjectiveSet,
): string {
  return JSON.stringify(
    ResultLearningObjectiveSet$outboundSchema.parse(resultLearningObjectiveSet),
  );
}

export function resultLearningObjectiveSetFromJSON(
  jsonString: string,
): SafeParseResult<ResultLearningObjectiveSet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ResultLearningObjectiveSet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ResultLearningObjectiveSet' from JSON`,
  );
}

/** @internal */
export const Result$inboundSchema: z.ZodType<Result, z.ZodTypeDef, unknown> = z
  .object({
    sourcedId: z.string().optional(),
    status: ResultStatus$inboundSchema,
    dateLastModified: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    metadata: z.nullable(z.record(z.any())).optional(),
    lineItem: z.lazy(() => ResultLineItem$inboundSchema),
    student: z.lazy(() => ResultStudent$inboundSchema),
    class: z.nullable(z.lazy(() => ResultClass$inboundSchema)).optional(),
    scoreScale: z.nullable(z.lazy(() => ResultScoreScale$inboundSchema))
      .optional(),
    scoreStatus: ResultScoreStatus$inboundSchema,
    score: z.nullable(z.number()).optional(),
    textScore: z.nullable(z.string()).optional(),
    scoreDate: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ),
    comment: z.nullable(z.string()).optional(),
    learningObjectiveSet: z.nullable(
      z.array(z.lazy(() => ResultLearningObjectiveSet$inboundSchema)),
    ).optional(),
    inProgress: z.string().optional(),
    incomplete: z.string().optional(),
    late: z.string().optional(),
    missing: z.string().optional(),
  });

/** @internal */
export type Result$Outbound = {
  sourcedId?: string | undefined;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  lineItem: ResultLineItem$Outbound;
  student: ResultStudent$Outbound;
  class?: ResultClass$Outbound | null | undefined;
  scoreScale?: ResultScoreScale$Outbound | null | undefined;
  scoreStatus: string;
  score?: number | null | undefined;
  textScore?: string | null | undefined;
  scoreDate: string;
  comment?: string | null | undefined;
  learningObjectiveSet?:
    | Array<ResultLearningObjectiveSet$Outbound>
    | null
    | undefined;
  inProgress?: string | undefined;
  incomplete?: string | undefined;
  late?: string | undefined;
  missing?: string | undefined;
};

/** @internal */
export const Result$outboundSchema: z.ZodType<
  Result$Outbound,
  z.ZodTypeDef,
  Result
> = z.object({
  sourcedId: z.string().optional(),
  status: ResultStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  lineItem: z.lazy(() => ResultLineItem$outboundSchema),
  student: z.lazy(() => ResultStudent$outboundSchema),
  class: z.nullable(z.lazy(() => ResultClass$outboundSchema)).optional(),
  scoreScale: z.nullable(z.lazy(() => ResultScoreScale$outboundSchema))
    .optional(),
  scoreStatus: ResultScoreStatus$outboundSchema,
  score: z.nullable(z.number()).optional(),
  textScore: z.nullable(z.string()).optional(),
  scoreDate: z.date().transform(v => v.toISOString()),
  comment: z.nullable(z.string()).optional(),
  learningObjectiveSet: z.nullable(
    z.array(z.lazy(() => ResultLearningObjectiveSet$outboundSchema)),
  ).optional(),
  inProgress: z.string().optional(),
  incomplete: z.string().optional(),
  late: z.string().optional(),
  missing: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Result$ {
  /** @deprecated use `Result$inboundSchema` instead. */
  export const inboundSchema = Result$inboundSchema;
  /** @deprecated use `Result$outboundSchema` instead. */
  export const outboundSchema = Result$outboundSchema;
  /** @deprecated use `Result$Outbound` instead. */
  export type Outbound = Result$Outbound;
}

export function resultToJSON(result: Result): string {
  return JSON.stringify(Result$outboundSchema.parse(result));
}

export function resultFromJSON(
  jsonString: string,
): SafeParseResult<Result, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Result$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Result' from JSON`,
  );
}
