/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EnrollmentStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type EnrollmentStatus = ClosedEnum<typeof EnrollmentStatus>;

export const EnrollmentRole = {
  Administrator: "administrator",
  Proctor: "proctor",
  Student: "student",
  Teacher: "teacher",
} as const;
export type EnrollmentRole = ClosedEnum<typeof EnrollmentRole>;

export type User = {
  href: string;
  sourcedId: string;
  type: string;
};

export type EnrollmentClass = {
  href: string;
  sourcedId: string;
  type: string;
};

/**
 * Represents an enrollment.
 */
export type Enrollment = {
  sourcedId: string;
  status: EnrollmentStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  role: EnrollmentRole;
  primary: boolean;
  beginDate: string | null;
  endDate: string | null;
  user: User;
  class: EnrollmentClass;
};

/** @internal */
export const EnrollmentStatus$inboundSchema: z.ZodNativeEnum<
  typeof EnrollmentStatus
> = z.nativeEnum(EnrollmentStatus);

/** @internal */
export const EnrollmentStatus$outboundSchema: z.ZodNativeEnum<
  typeof EnrollmentStatus
> = EnrollmentStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentStatus$ {
  /** @deprecated use `EnrollmentStatus$inboundSchema` instead. */
  export const inboundSchema = EnrollmentStatus$inboundSchema;
  /** @deprecated use `EnrollmentStatus$outboundSchema` instead. */
  export const outboundSchema = EnrollmentStatus$outboundSchema;
}

/** @internal */
export const EnrollmentRole$inboundSchema: z.ZodNativeEnum<
  typeof EnrollmentRole
> = z.nativeEnum(EnrollmentRole);

/** @internal */
export const EnrollmentRole$outboundSchema: z.ZodNativeEnum<
  typeof EnrollmentRole
> = EnrollmentRole$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentRole$ {
  /** @deprecated use `EnrollmentRole$inboundSchema` instead. */
  export const inboundSchema = EnrollmentRole$inboundSchema;
  /** @deprecated use `EnrollmentRole$outboundSchema` instead. */
  export const outboundSchema = EnrollmentRole$outboundSchema;
}

/** @internal */
export const User$inboundSchema: z.ZodType<User, z.ZodTypeDef, unknown> = z
  .object({
    href: z.string(),
    sourcedId: z.string(),
    type: z.string(),
  });

/** @internal */
export type User$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const User$outboundSchema: z.ZodType<User$Outbound, z.ZodTypeDef, User> =
  z.object({
    href: z.string(),
    sourcedId: z.string(),
    type: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace User$ {
  /** @deprecated use `User$inboundSchema` instead. */
  export const inboundSchema = User$inboundSchema;
  /** @deprecated use `User$outboundSchema` instead. */
  export const outboundSchema = User$outboundSchema;
  /** @deprecated use `User$Outbound` instead. */
  export type Outbound = User$Outbound;
}

export function userToJSON(user: User): string {
  return JSON.stringify(User$outboundSchema.parse(user));
}

export function userFromJSON(
  jsonString: string,
): SafeParseResult<User, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => User$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'User' from JSON`,
  );
}

/** @internal */
export const EnrollmentClass$inboundSchema: z.ZodType<
  EnrollmentClass,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/** @internal */
export type EnrollmentClass$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const EnrollmentClass$outboundSchema: z.ZodType<
  EnrollmentClass$Outbound,
  z.ZodTypeDef,
  EnrollmentClass
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnrollmentClass$ {
  /** @deprecated use `EnrollmentClass$inboundSchema` instead. */
  export const inboundSchema = EnrollmentClass$inboundSchema;
  /** @deprecated use `EnrollmentClass$outboundSchema` instead. */
  export const outboundSchema = EnrollmentClass$outboundSchema;
  /** @deprecated use `EnrollmentClass$Outbound` instead. */
  export type Outbound = EnrollmentClass$Outbound;
}

export function enrollmentClassToJSON(
  enrollmentClass: EnrollmentClass,
): string {
  return JSON.stringify(EnrollmentClass$outboundSchema.parse(enrollmentClass));
}

export function enrollmentClassFromJSON(
  jsonString: string,
): SafeParseResult<EnrollmentClass, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnrollmentClass$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnrollmentClass' from JSON`,
  );
}

/** @internal */
export const Enrollment$inboundSchema: z.ZodType<
  Enrollment,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: EnrollmentStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  role: EnrollmentRole$inboundSchema,
  primary: z.boolean(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  user: z.lazy(() => User$inboundSchema),
  class: z.lazy(() => EnrollmentClass$inboundSchema),
});

/** @internal */
export type Enrollment$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  role: string;
  primary: boolean;
  beginDate: string | null;
  endDate: string | null;
  user: User$Outbound;
  class: EnrollmentClass$Outbound;
};

/** @internal */
export const Enrollment$outboundSchema: z.ZodType<
  Enrollment$Outbound,
  z.ZodTypeDef,
  Enrollment
> = z.object({
  sourcedId: z.string(),
  status: EnrollmentStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  role: EnrollmentRole$outboundSchema,
  primary: z.boolean(),
  beginDate: z.nullable(z.string()),
  endDate: z.nullable(z.string()),
  user: z.lazy(() => User$outboundSchema),
  class: z.lazy(() => EnrollmentClass$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Enrollment$ {
  /** @deprecated use `Enrollment$inboundSchema` instead. */
  export const inboundSchema = Enrollment$inboundSchema;
  /** @deprecated use `Enrollment$outboundSchema` instead. */
  export const outboundSchema = Enrollment$outboundSchema;
  /** @deprecated use `Enrollment$Outbound` instead. */
  export type Outbound = Enrollment$Outbound;
}

export function enrollmentToJSON(enrollment: Enrollment): string {
  return JSON.stringify(Enrollment$outboundSchema.parse(enrollment));
}

export function enrollmentFromJSON(
  jsonString: string,
): SafeParseResult<Enrollment, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Enrollment$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Enrollment' from JSON`,
  );
}
