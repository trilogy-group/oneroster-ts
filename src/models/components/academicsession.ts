/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const AcademicSessionStatus = {
  Active: "active",
  Tobedeleted: "tobedeleted",
} as const;
export type AcademicSessionStatus = ClosedEnum<typeof AcademicSessionStatus>;

export const AcademicSessionType = {
  GradingPeriod: "gradingPeriod",
  Semester: "semester",
  SchoolYear: "schoolYear",
  Term: "term",
} as const;
export type AcademicSessionType = ClosedEnum<typeof AcademicSessionType>;

export const ParentType = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type ParentType = ClosedEnum<typeof ParentType>;

export type AcademicSessionParent = {
  href: string;
  sourcedId: string;
  type: ParentType;
};

export const OrgType1 = {
  AcademicSession: "academicSession",
  AssessmentLineItem: "assessmentLineItem",
  Category: "category",
  Class: "class",
  Course: "course",
  Demographics: "demographics",
  Enrollment: "enrollment",
  GradingPeriod: "gradingPeriod",
  LineItem: "lineItem",
  Org: "org",
  Resource: "resource",
  Result: "result",
  ScoreScale: "scoreScale",
  Student: "student",
  Teacher: "teacher",
  Term: "term",
  User: "user",
  ComponentResource: "componentResource",
  CourseComponent: "courseComponent",
} as const;
export type OrgType1 = ClosedEnum<typeof OrgType1>;

export type AcademicSessionOrg = {
  href: string;
  sourcedId: string;
  type: OrgType1;
};

/**
 * Represents an academic session.
 */
export type AcademicSession = {
  sourcedId: string;
  status: AcademicSessionStatus;
  dateLastModified?: Date | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  startDate: string;
  endDate: string;
  type: AcademicSessionType;
  parent?: AcademicSessionParent | null | undefined;
  schoolYear: number;
  org: AcademicSessionOrg;
};

/** @internal */
export const AcademicSessionStatus$inboundSchema: z.ZodNativeEnum<
  typeof AcademicSessionStatus
> = z.nativeEnum(AcademicSessionStatus);

/** @internal */
export const AcademicSessionStatus$outboundSchema: z.ZodNativeEnum<
  typeof AcademicSessionStatus
> = AcademicSessionStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcademicSessionStatus$ {
  /** @deprecated use `AcademicSessionStatus$inboundSchema` instead. */
  export const inboundSchema = AcademicSessionStatus$inboundSchema;
  /** @deprecated use `AcademicSessionStatus$outboundSchema` instead. */
  export const outboundSchema = AcademicSessionStatus$outboundSchema;
}

/** @internal */
export const AcademicSessionType$inboundSchema: z.ZodNativeEnum<
  typeof AcademicSessionType
> = z.nativeEnum(AcademicSessionType);

/** @internal */
export const AcademicSessionType$outboundSchema: z.ZodNativeEnum<
  typeof AcademicSessionType
> = AcademicSessionType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcademicSessionType$ {
  /** @deprecated use `AcademicSessionType$inboundSchema` instead. */
  export const inboundSchema = AcademicSessionType$inboundSchema;
  /** @deprecated use `AcademicSessionType$outboundSchema` instead. */
  export const outboundSchema = AcademicSessionType$outboundSchema;
}

/** @internal */
export const ParentType$inboundSchema: z.ZodNativeEnum<typeof ParentType> = z
  .nativeEnum(ParentType);

/** @internal */
export const ParentType$outboundSchema: z.ZodNativeEnum<typeof ParentType> =
  ParentType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ParentType$ {
  /** @deprecated use `ParentType$inboundSchema` instead. */
  export const inboundSchema = ParentType$inboundSchema;
  /** @deprecated use `ParentType$outboundSchema` instead. */
  export const outboundSchema = ParentType$outboundSchema;
}

/** @internal */
export const AcademicSessionParent$inboundSchema: z.ZodType<
  AcademicSessionParent,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: ParentType$inboundSchema,
});

/** @internal */
export type AcademicSessionParent$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const AcademicSessionParent$outboundSchema: z.ZodType<
  AcademicSessionParent$Outbound,
  z.ZodTypeDef,
  AcademicSessionParent
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: ParentType$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcademicSessionParent$ {
  /** @deprecated use `AcademicSessionParent$inboundSchema` instead. */
  export const inboundSchema = AcademicSessionParent$inboundSchema;
  /** @deprecated use `AcademicSessionParent$outboundSchema` instead. */
  export const outboundSchema = AcademicSessionParent$outboundSchema;
  /** @deprecated use `AcademicSessionParent$Outbound` instead. */
  export type Outbound = AcademicSessionParent$Outbound;
}

export function academicSessionParentToJSON(
  academicSessionParent: AcademicSessionParent,
): string {
  return JSON.stringify(
    AcademicSessionParent$outboundSchema.parse(academicSessionParent),
  );
}

export function academicSessionParentFromJSON(
  jsonString: string,
): SafeParseResult<AcademicSessionParent, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcademicSessionParent$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcademicSessionParent' from JSON`,
  );
}

/** @internal */
export const OrgType1$inboundSchema: z.ZodNativeEnum<typeof OrgType1> = z
  .nativeEnum(OrgType1);

/** @internal */
export const OrgType1$outboundSchema: z.ZodNativeEnum<typeof OrgType1> =
  OrgType1$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrgType1$ {
  /** @deprecated use `OrgType1$inboundSchema` instead. */
  export const inboundSchema = OrgType1$inboundSchema;
  /** @deprecated use `OrgType1$outboundSchema` instead. */
  export const outboundSchema = OrgType1$outboundSchema;
}

/** @internal */
export const AcademicSessionOrg$inboundSchema: z.ZodType<
  AcademicSessionOrg,
  z.ZodTypeDef,
  unknown
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: OrgType1$inboundSchema,
});

/** @internal */
export type AcademicSessionOrg$Outbound = {
  href: string;
  sourcedId: string;
  type: string;
};

/** @internal */
export const AcademicSessionOrg$outboundSchema: z.ZodType<
  AcademicSessionOrg$Outbound,
  z.ZodTypeDef,
  AcademicSessionOrg
> = z.object({
  href: z.string(),
  sourcedId: z.string(),
  type: OrgType1$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcademicSessionOrg$ {
  /** @deprecated use `AcademicSessionOrg$inboundSchema` instead. */
  export const inboundSchema = AcademicSessionOrg$inboundSchema;
  /** @deprecated use `AcademicSessionOrg$outboundSchema` instead. */
  export const outboundSchema = AcademicSessionOrg$outboundSchema;
  /** @deprecated use `AcademicSessionOrg$Outbound` instead. */
  export type Outbound = AcademicSessionOrg$Outbound;
}

export function academicSessionOrgToJSON(
  academicSessionOrg: AcademicSessionOrg,
): string {
  return JSON.stringify(
    AcademicSessionOrg$outboundSchema.parse(academicSessionOrg),
  );
}

export function academicSessionOrgFromJSON(
  jsonString: string,
): SafeParseResult<AcademicSessionOrg, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcademicSessionOrg$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcademicSessionOrg' from JSON`,
  );
}

/** @internal */
export const AcademicSession$inboundSchema: z.ZodType<
  AcademicSession,
  z.ZodTypeDef,
  unknown
> = z.object({
  sourcedId: z.string(),
  status: AcademicSessionStatus$inboundSchema,
  dateLastModified: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  type: AcademicSessionType$inboundSchema,
  parent: z.nullable(z.lazy(() => AcademicSessionParent$inboundSchema))
    .optional(),
  schoolYear: z.number(),
  org: z.lazy(() => AcademicSessionOrg$inboundSchema),
});

/** @internal */
export type AcademicSession$Outbound = {
  sourcedId: string;
  status: string;
  dateLastModified?: string | undefined;
  metadata?: { [k: string]: any } | null | undefined;
  title: string;
  startDate: string;
  endDate: string;
  type: string;
  parent?: AcademicSessionParent$Outbound | null | undefined;
  schoolYear: number;
  org: AcademicSessionOrg$Outbound;
};

/** @internal */
export const AcademicSession$outboundSchema: z.ZodType<
  AcademicSession$Outbound,
  z.ZodTypeDef,
  AcademicSession
> = z.object({
  sourcedId: z.string(),
  status: AcademicSessionStatus$outboundSchema,
  dateLastModified: z.date().transform(v => v.toISOString()).optional(),
  metadata: z.nullable(z.record(z.any())).optional(),
  title: z.string(),
  startDate: z.string(),
  endDate: z.string(),
  type: AcademicSessionType$outboundSchema,
  parent: z.nullable(z.lazy(() => AcademicSessionParent$outboundSchema))
    .optional(),
  schoolYear: z.number(),
  org: z.lazy(() => AcademicSessionOrg$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AcademicSession$ {
  /** @deprecated use `AcademicSession$inboundSchema` instead. */
  export const inboundSchema = AcademicSession$inboundSchema;
  /** @deprecated use `AcademicSession$outboundSchema` instead. */
  export const outboundSchema = AcademicSession$outboundSchema;
  /** @deprecated use `AcademicSession$Outbound` instead. */
  export type Outbound = AcademicSession$Outbound;
}

export function academicSessionToJSON(
  academicSession: AcademicSession,
): string {
  return JSON.stringify(AcademicSession$outboundSchema.parse(academicSession));
}

export function academicSessionFromJSON(
  jsonString: string,
): SafeParseResult<AcademicSession, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AcademicSession$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AcademicSession' from JSON`,
  );
}
